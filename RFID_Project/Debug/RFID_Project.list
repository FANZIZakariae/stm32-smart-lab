
RFID_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a04  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08006ba4  08006ba4  00007ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ca4  08006ca4  00008068  2**0
                  CONTENTS
  4 .ARM          00000008  08006ca4  08006ca4  00007ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cac  08006cac  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cac  08006cac  00007cac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006cb0  08006cb0  00007cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006cb4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  20000068  08006d1c  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c8  08006d1c  000083c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b0f  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027c2  00000000  00000000  0001aba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0001d370  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e49  00000000  00000000  0001e580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d3c  00000000  00000000  0001f3c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157f9  00000000  00000000  00036105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093092  00000000  00000000  0004b8fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de990  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053dc  00000000  00000000  000de9d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000e3db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08006b8c 	.word	0x08006b8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08006b8c 	.word	0x08006b8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b96a 	b.w	8000db8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	460c      	mov	r4, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d14e      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b08:	4694      	mov	ip, r2
 8000b0a:	458c      	cmp	ip, r1
 8000b0c:	4686      	mov	lr, r0
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	d962      	bls.n	8000bda <__udivmoddi4+0xde>
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b24:	4319      	orrs	r1, r3
 8000b26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2e:	fa1f f68c 	uxth.w	r6, ip
 8000b32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb04 f106 	mul.w	r1, r4, r6
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b52:	f080 8112 	bcs.w	8000d7a <__udivmoddi4+0x27e>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 810f 	bls.w	8000d7a <__udivmoddi4+0x27e>
 8000b5c:	3c02      	subs	r4, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb00 f606 	mul.w	r6, r0, r6
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x94>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b82:	f080 80fc 	bcs.w	8000d7e <__udivmoddi4+0x282>
 8000b86:	429e      	cmp	r6, r3
 8000b88:	f240 80f9 	bls.w	8000d7e <__udivmoddi4+0x282>
 8000b8c:	4463      	add	r3, ip
 8000b8e:	3802      	subs	r0, #2
 8000b90:	1b9b      	subs	r3, r3, r6
 8000b92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b96:	2100      	movs	r1, #0
 8000b98:	b11d      	cbz	r5, 8000ba2 <__udivmoddi4+0xa6>
 8000b9a:	40d3      	lsrs	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d905      	bls.n	8000bb6 <__udivmoddi4+0xba>
 8000baa:	b10d      	cbz	r5, 8000bb0 <__udivmoddi4+0xb4>
 8000bac:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e7f5      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bb6:	fab3 f183 	clz	r1, r3
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	d146      	bne.n	8000c4c <__udivmoddi4+0x150>
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xcc>
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	f0c0 80f0 	bcc.w	8000da8 <__udivmoddi4+0x2ac>
 8000bc8:	1a86      	subs	r6, r0, r2
 8000bca:	eb64 0303 	sbc.w	r3, r4, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d0e6      	beq.n	8000ba2 <__udivmoddi4+0xa6>
 8000bd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd8:	e7e3      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	f040 8090 	bne.w	8000d00 <__udivmoddi4+0x204>
 8000be0:	eba1 040c 	sub.w	r4, r1, ip
 8000be4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be8:	fa1f f78c 	uxth.w	r7, ip
 8000bec:	2101      	movs	r1, #1
 8000bee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfe:	fb07 f006 	mul.w	r0, r7, r6
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x11c>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x11a>
 8000c10:	4298      	cmp	r0, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2b4>
 8000c16:	4626      	mov	r6, r4
 8000c18:	1a1c      	subs	r4, r3, r0
 8000c1a:	fa1f f38e 	uxth.w	r3, lr
 8000c1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c22:	fb08 4410 	mls	r4, r8, r0, r4
 8000c26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2a:	fb00 f707 	mul.w	r7, r0, r7
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x148>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x146>
 8000c3c:	429f      	cmp	r7, r3
 8000c3e:	f200 80b0 	bhi.w	8000da2 <__udivmoddi4+0x2a6>
 8000c42:	4620      	mov	r0, r4
 8000c44:	1bdb      	subs	r3, r3, r7
 8000c46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4a:	e7a5      	b.n	8000b98 <__udivmoddi4+0x9c>
 8000c4c:	f1c1 0620 	rsb	r6, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 f706 	lsr.w	r7, r2, r6
 8000c56:	431f      	orrs	r7, r3
 8000c58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c60:	ea43 030c 	orr.w	r3, r3, ip
 8000c64:	40f4      	lsrs	r4, r6
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	0c38      	lsrs	r0, r7, #16
 8000c6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c70:	fbb4 fef0 	udiv	lr, r4, r0
 8000c74:	fa1f fc87 	uxth.w	ip, r7
 8000c78:	fb00 441e 	mls	r4, r0, lr, r4
 8000c7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c80:	fb0e f90c 	mul.w	r9, lr, ip
 8000c84:	45a1      	cmp	r9, r4
 8000c86:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x1a6>
 8000c8c:	193c      	adds	r4, r7, r4
 8000c8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c92:	f080 8084 	bcs.w	8000d9e <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8081 	bls.w	8000d9e <__udivmoddi4+0x2a2>
 8000c9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca0:	443c      	add	r4, r7
 8000ca2:	eba4 0409 	sub.w	r4, r4, r9
 8000ca6:	fa1f f983 	uxth.w	r9, r3
 8000caa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cae:	fb00 4413 	mls	r4, r0, r3, r4
 8000cb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	d907      	bls.n	8000cce <__udivmoddi4+0x1d2>
 8000cbe:	193c      	adds	r4, r7, r4
 8000cc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cc4:	d267      	bcs.n	8000d96 <__udivmoddi4+0x29a>
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d965      	bls.n	8000d96 <__udivmoddi4+0x29a>
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	443c      	add	r4, r7
 8000cce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cd6:	eba4 040c 	sub.w	r4, r4, ip
 8000cda:	429c      	cmp	r4, r3
 8000cdc:	46ce      	mov	lr, r9
 8000cde:	469c      	mov	ip, r3
 8000ce0:	d351      	bcc.n	8000d86 <__udivmoddi4+0x28a>
 8000ce2:	d04e      	beq.n	8000d82 <__udivmoddi4+0x286>
 8000ce4:	b155      	cbz	r5, 8000cfc <__udivmoddi4+0x200>
 8000ce6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cea:	eb64 040c 	sbc.w	r4, r4, ip
 8000cee:	fa04 f606 	lsl.w	r6, r4, r6
 8000cf2:	40cb      	lsrs	r3, r1
 8000cf4:	431e      	orrs	r6, r3
 8000cf6:	40cc      	lsrs	r4, r1
 8000cf8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e750      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f103 	lsr.w	r1, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3110 	mls	r1, r8, r0, r3
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f107 	mul.w	r1, r0, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x24c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d3e:	d22c      	bcs.n	8000d9a <__udivmoddi4+0x29e>
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d92a      	bls.n	8000d9a <__udivmoddi4+0x29e>
 8000d44:	3802      	subs	r0, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d50:	fb08 3311 	mls	r3, r8, r1, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb01 f307 	mul.w	r3, r1, r7
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x276>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d68:	d213      	bcs.n	8000d92 <__udivmoddi4+0x296>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d911      	bls.n	8000d92 <__udivmoddi4+0x296>
 8000d6e:	3902      	subs	r1, #2
 8000d70:	4464      	add	r4, ip
 8000d72:	1ae4      	subs	r4, r4, r3
 8000d74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d78:	e739      	b.n	8000bee <__udivmoddi4+0xf2>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	e6f0      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e706      	b.n	8000b90 <__udivmoddi4+0x94>
 8000d82:	45c8      	cmp	r8, r9
 8000d84:	d2ae      	bcs.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d8e:	3801      	subs	r0, #1
 8000d90:	e7a8      	b.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d92:	4631      	mov	r1, r6
 8000d94:	e7ed      	b.n	8000d72 <__udivmoddi4+0x276>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e799      	b.n	8000cce <__udivmoddi4+0x1d2>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e7d4      	b.n	8000d48 <__udivmoddi4+0x24c>
 8000d9e:	46d6      	mov	lr, sl
 8000da0:	e77f      	b.n	8000ca2 <__udivmoddi4+0x1a6>
 8000da2:	4463      	add	r3, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e74d      	b.n	8000c44 <__udivmoddi4+0x148>
 8000da8:	4606      	mov	r6, r0
 8000daa:	4623      	mov	r3, r4
 8000dac:	4608      	mov	r0, r1
 8000dae:	e70f      	b.n	8000bd0 <__udivmoddi4+0xd4>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	e730      	b.n	8000c18 <__udivmoddi4+0x11c>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop

08000dbc <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af02      	add	r7, sp, #8
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 8000dc6:	f107 020f 	add.w	r2, r7, #15
 8000dca:	1df9      	adds	r1, r7, #7
 8000dcc:	2364      	movs	r3, #100	@ 0x64
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	4804      	ldr	r0, [pc, #16]	@ (8000de4 <RC522_SPI_Transfer+0x28>)
 8000dd4:	f003 f91b 	bl	800400e <HAL_SPI_TransmitReceive>

	return rx_data;
 8000dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3710      	adds	r7, #16
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	200000d8 	.word	0x200000d8

08000de8 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	460a      	mov	r2, r1
 8000df2:	71fb      	strb	r3, [r7, #7]
 8000df4:	4613      	mov	r3, r2
 8000df6:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2110      	movs	r1, #16
 8000dfc:	480c      	ldr	r0, [pc, #48]	@ (8000e30 <Write_MFRC522+0x48>)
 8000dfe:	f001 ff15 	bl	8002c2c <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);	
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ffd4 	bl	8000dbc <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 8000e14:	79bb      	ldrb	r3, [r7, #6]
 8000e16:	4618      	mov	r0, r3
 8000e18:	f7ff ffd0 	bl	8000dbc <RC522_SPI_Transfer>
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	2110      	movs	r1, #16
 8000e20:	4803      	ldr	r0, [pc, #12]	@ (8000e30 <Write_MFRC522+0x48>)
 8000e22:	f001 ff03 	bl	8002c2c <HAL_GPIO_WritePin>
}
 8000e26:	bf00      	nop
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40020000 	.word	0x40020000

08000e34 <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b084      	sub	sp, #16
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2110      	movs	r1, #16
 8000e42:	480f      	ldr	r0, [pc, #60]	@ (8000e80 <Read_MFRC522+0x4c>)
 8000e44:	f001 fef2 	bl	8002c2c <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);	
 8000e48:	79fb      	ldrb	r3, [r7, #7]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	b25b      	sxtb	r3, r3
 8000e4e:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000e58:	b25b      	sxtb	r3, r3
 8000e5a:	b2db      	uxtb	r3, r3
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ffad 	bl	8000dbc <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff ffaa 	bl	8000dbc <RC522_SPI_Transfer>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	73fb      	strb	r3, [r7, #15]
	
	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	2110      	movs	r1, #16
 8000e70:	4803      	ldr	r0, [pc, #12]	@ (8000e80 <Read_MFRC522+0x4c>)
 8000e72:	f001 fedb 	bl	8002c2c <HAL_GPIO_WritePin>
	
	return val;	
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
	
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	40020000 	.word	0x40020000

08000e84 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)  
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	460a      	mov	r2, r1
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	4613      	mov	r3, r2
 8000e92:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff ffcc 	bl	8000e34 <Read_MFRC522>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000ea0:	7bfa      	ldrb	r2, [r7, #15]
 8000ea2:	79bb      	ldrb	r3, [r7, #6]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	4611      	mov	r1, r2
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff ff9b 	bl	8000de8 <Write_MFRC522>
}
 8000eb2:	bf00      	nop
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)  
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b084      	sub	sp, #16
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	460a      	mov	r2, r1
 8000ec4:	71fb      	strb	r3, [r7, #7]
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ffb1 	bl	8000e34 <Read_MFRC522>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000ed6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000eda:	43db      	mvns	r3, r3
 8000edc:	b25a      	sxtb	r2, r3
 8000ede:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	4611      	mov	r1, r2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff7b 	bl	8000de8 <Write_MFRC522>
} 
 8000ef2:	bf00      	nop
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 8000efe:	2014      	movs	r0, #20
 8000f00:	f7ff ff98 	bl	8000e34 <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 8000f04:	2103      	movs	r1, #3
 8000f06:	2014      	movs	r0, #20
 8000f08:	f7ff ffbc 	bl	8000e84 <SetBitMask>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000f14:	210f      	movs	r1, #15
 8000f16:	2001      	movs	r0, #1
 8000f18:	f7ff ff66 	bl	8000de8 <Write_MFRC522>
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}

08000f20 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8000f24:	2201      	movs	r2, #1
 8000f26:	2110      	movs	r1, #16
 8000f28:	4813      	ldr	r0, [pc, #76]	@ (8000f78 <MFRC522_Init+0x58>)
 8000f2a:	f001 fe7f 	bl	8002c2c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 8000f2e:	2201      	movs	r2, #1
 8000f30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000f34:	4810      	ldr	r0, [pc, #64]	@ (8000f78 <MFRC522_Init+0x58>)
 8000f36:	f001 fe79 	bl	8002c2c <HAL_GPIO_WritePin>
	MFRC522_Reset();
 8000f3a:	f7ff ffe9 	bl	8000f10 <MFRC522_Reset>
	 	
	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000f3e:	218d      	movs	r1, #141	@ 0x8d
 8000f40:	202a      	movs	r0, #42	@ 0x2a
 8000f42:	f7ff ff51 	bl	8000de8 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 8000f46:	213e      	movs	r1, #62	@ 0x3e
 8000f48:	202b      	movs	r0, #43	@ 0x2b
 8000f4a:	f7ff ff4d 	bl	8000de8 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);           
 8000f4e:	211e      	movs	r1, #30
 8000f50:	202d      	movs	r0, #45	@ 0x2d
 8000f52:	f7ff ff49 	bl	8000de8 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 8000f56:	2100      	movs	r1, #0
 8000f58:	202c      	movs	r0, #44	@ 0x2c
 8000f5a:	f7ff ff45 	bl	8000de8 <Write_MFRC522>
	
	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8000f5e:	2140      	movs	r1, #64	@ 0x40
 8000f60:	2015      	movs	r0, #21
 8000f62:	f7ff ff41 	bl	8000de8 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8000f66:	213d      	movs	r1, #61	@ 0x3d
 8000f68:	2011      	movs	r0, #17
 8000f6a:	f7ff ff3d 	bl	8000de8 <Write_MFRC522>

	AntennaOn();
 8000f6e:	f7ff ffc4 	bl	8000efa <AntennaOn>
}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40020000 	.word	0x40020000

08000f7c <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8000f7c:	b590      	push	{r4, r7, lr}
 8000f7e:	b089      	sub	sp, #36	@ 0x24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60b9      	str	r1, [r7, #8]
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4603      	mov	r3, r0
 8000f88:	73fb      	strb	r3, [r7, #15]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8000f92:	2300      	movs	r3, #0
 8000f94:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8000f96:	2300      	movs	r3, #0
 8000f98:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8000f9a:	7bfb      	ldrb	r3, [r7, #15]
 8000f9c:	2b0c      	cmp	r3, #12
 8000f9e:	d006      	beq.n	8000fae <MFRC522_ToCard+0x32>
 8000fa0:	2b0e      	cmp	r3, #14
 8000fa2:	d109      	bne.n	8000fb8 <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8000fa4:	2312      	movs	r3, #18
 8000fa6:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8000fa8:	2310      	movs	r3, #16
 8000faa:	777b      	strb	r3, [r7, #29]
			break;
 8000fac:	e005      	b.n	8000fba <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8000fae:	2377      	movs	r3, #119	@ 0x77
 8000fb0:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8000fb2:	2330      	movs	r3, #48	@ 0x30
 8000fb4:	777b      	strb	r3, [r7, #29]
			break;
 8000fb6:	e000      	b.n	8000fba <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8000fb8:	bf00      	nop
    }
   
    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8000fba:	7fbb      	ldrb	r3, [r7, #30]
 8000fbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2002      	movs	r0, #2
 8000fc6:	f7ff ff0f 	bl	8000de8 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8000fca:	2180      	movs	r1, #128	@ 0x80
 8000fcc:	2004      	movs	r0, #4
 8000fce:	f7ff ff74 	bl	8000eba <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8000fd2:	2180      	movs	r1, #128	@ 0x80
 8000fd4:	200a      	movs	r0, #10
 8000fd6:	f7ff ff55 	bl	8000e84 <SetBitMask>
    
	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8000fda:	2100      	movs	r1, #0
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f7ff ff03 	bl	8000de8 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	e00a      	b.n	8000ffe <MFRC522_ToCard+0x82>
    {   
		Write_MFRC522(FIFODataReg, sendData[i]);    
 8000fe8:	68ba      	ldr	r2, [r7, #8]
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	4413      	add	r3, r2
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	2009      	movs	r0, #9
 8000ff4:	f7ff fef8 	bl	8000de8 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	3301      	adds	r3, #1
 8000ffc:	61bb      	str	r3, [r7, #24]
 8000ffe:	7bbb      	ldrb	r3, [r7, #14]
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	429a      	cmp	r2, r3
 8001004:	d3f0      	bcc.n	8000fe8 <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	4619      	mov	r1, r3
 800100a:	2001      	movs	r0, #1
 800100c:	f7ff feec 	bl	8000de8 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8001010:	7bfb      	ldrb	r3, [r7, #15]
 8001012:	2b0c      	cmp	r3, #12
 8001014:	d103      	bne.n	800101e <MFRC522_ToCard+0xa2>
    {    
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8001016:	2180      	movs	r1, #128	@ 0x80
 8001018:	200d      	movs	r0, #13
 800101a:	f7ff ff33 	bl	8000e84 <SetBitMask>
	}   
    
    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 800101e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001022:	61bb      	str	r3, [r7, #24]
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8001024:	2004      	movs	r0, #4
 8001026:	f7ff ff05 	bl	8000e34 <Read_MFRC522>
 800102a:	4603      	mov	r3, r0
 800102c:	773b      	strb	r3, [r7, #28]
        i--;
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	3b01      	subs	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00a      	beq.n	8001050 <MFRC522_ToCard+0xd4>
 800103a:	7f3b      	ldrb	r3, [r7, #28]
 800103c:	f003 0301 	and.w	r3, r3, #1
 8001040:	2b00      	cmp	r3, #0
 8001042:	d105      	bne.n	8001050 <MFRC522_ToCard+0xd4>
 8001044:	7f3a      	ldrb	r2, [r7, #28]
 8001046:	7f7b      	ldrb	r3, [r7, #29]
 8001048:	4013      	ands	r3, r2
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0e9      	beq.n	8001024 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8001050:	2180      	movs	r1, #128	@ 0x80
 8001052:	200d      	movs	r0, #13
 8001054:	f7ff ff31 	bl	8000eba <ClearBitMask>
	
    if (i != 0)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d052      	beq.n	8001104 <MFRC522_ToCard+0x188>
    {    
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 800105e:	2006      	movs	r0, #6
 8001060:	f7ff fee8 	bl	8000e34 <Read_MFRC522>
 8001064:	4603      	mov	r3, r0
 8001066:	f003 031b 	and.w	r3, r3, #27
 800106a:	2b00      	cmp	r3, #0
 800106c:	d148      	bne.n	8001100 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8001072:	7f3a      	ldrb	r2, [r7, #28]
 8001074:	7fbb      	ldrb	r3, [r7, #30]
 8001076:	4013      	ands	r3, r2
 8001078:	b2db      	uxtb	r3, r3
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MFRC522_ToCard+0x10a>
            {   
				status = MI_NOTAGERR;
 8001082:	2301      	movs	r3, #1
 8001084:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	2b0c      	cmp	r3, #12
 800108a:	d13b      	bne.n	8001104 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 800108c:	200a      	movs	r0, #10
 800108e:	f7ff fed1 	bl	8000e34 <Read_MFRC522>
 8001092:	4603      	mov	r3, r0
 8001094:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001096:	200c      	movs	r0, #12
 8001098:	f7ff fecc 	bl	8000e34 <Read_MFRC522>
 800109c:	4603      	mov	r3, r0
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 80010a4:	7dfb      	ldrb	r3, [r7, #23]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d008      	beq.n	80010bc <MFRC522_ToCard+0x140>
                {   
					*backLen = (n-1)*8 + lastBits;   
 80010aa:	7f3b      	ldrb	r3, [r7, #28]
 80010ac:	3b01      	subs	r3, #1
 80010ae:	00da      	lsls	r2, r3, #3
 80010b0:	7dfb      	ldrb	r3, [r7, #23]
 80010b2:	4413      	add	r3, r2
 80010b4:	461a      	mov	r2, r3
 80010b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	e004      	b.n	80010c6 <MFRC522_ToCard+0x14a>
				}
                else
                {   
					*backLen = n*8;   
 80010bc:	7f3b      	ldrb	r3, [r7, #28]
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	461a      	mov	r2, r3
 80010c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010c4:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 80010c6:	7f3b      	ldrb	r3, [r7, #28]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d101      	bne.n	80010d0 <MFRC522_ToCard+0x154>
                {   
					n = 1;    
 80010cc:	2301      	movs	r3, #1
 80010ce:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 80010d0:	7f3b      	ldrb	r3, [r7, #28]
 80010d2:	2b10      	cmp	r3, #16
 80010d4:	d901      	bls.n	80010da <MFRC522_ToCard+0x15e>
                {   
					n = MAX_LEN;   
 80010d6:	2310      	movs	r3, #16
 80010d8:	773b      	strb	r3, [r7, #28]
				}
				
                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
 80010de:	e00a      	b.n	80010f6 <MFRC522_ToCard+0x17a>
                {   
					backData[i] = Read_MFRC522(FIFODataReg);    
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	69bb      	ldr	r3, [r7, #24]
 80010e4:	18d4      	adds	r4, r2, r3
 80010e6:	2009      	movs	r0, #9
 80010e8:	f7ff fea4 	bl	8000e34 <Read_MFRC522>
 80010ec:	4603      	mov	r3, r0
 80010ee:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	3301      	adds	r3, #1
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	7f3b      	ldrb	r3, [r7, #28]
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d3f0      	bcc.n	80010e0 <MFRC522_ToCard+0x164>
 80010fe:	e001      	b.n	8001104 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {   
			status = MI_ERR;  
 8001100:	2302      	movs	r3, #2
 8001102:	77fb      	strb	r3, [r7, #31]
    }
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE); 

    return status;
 8001104:	7ffb      	ldrb	r3, [r7, #31]
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	@ 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd90      	pop	{r4, r7, pc}

0800110e <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af02      	add	r7, sp, #8
 8001114:	4603      	mov	r3, r0
 8001116:	6039      	str	r1, [r7, #0]
 8001118:	71fb      	strb	r3, [r7, #7]
	uchar status;  
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 800111a:	2107      	movs	r1, #7
 800111c:	200d      	movs	r0, #13
 800111e:	f7ff fe63 	bl	8000de8 <Write_MFRC522>
	
	TagType[0] = reqMode;
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	79fa      	ldrb	r2, [r7, #7]
 8001126:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	2201      	movs	r2, #1
 8001132:	6839      	ldr	r1, [r7, #0]
 8001134:	200c      	movs	r0, #12
 8001136:	f7ff ff21 	bl	8000f7c <MFRC522_ToCard>
 800113a:	4603      	mov	r3, r0
 800113c:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 800113e:	7bfb      	ldrb	r3, [r7, #15]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <MFRC522_Request+0x3c>
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	2b10      	cmp	r3, #16
 8001148:	d001      	beq.n	800114e <MFRC522_Request+0x40>
	{    
		status = MI_ERR;
 800114a:	2302      	movs	r3, #2
 800114c:	73fb      	strb	r3, [r7, #15]
	}
   
	return status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001150:	4618      	mov	r0, r3
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af02      	add	r7, sp, #8
 800115e:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8001160:	2300      	movs	r3, #0
 8001162:	737b      	strb	r3, [r7, #13]
    uint unLen;
    
	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001164:	2100      	movs	r1, #0
 8001166:	200d      	movs	r0, #13
 8001168:	f7ff fe3e 	bl	8000de8 <Write_MFRC522>
 
    serNum[0] = PICC_ANTICOLL;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2293      	movs	r2, #147	@ 0x93
 8001170:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	3301      	adds	r3, #1
 8001176:	2220      	movs	r2, #32
 8001178:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2202      	movs	r2, #2
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	200c      	movs	r0, #12
 8001188:	f7ff fef8 	bl	8000f7c <MFRC522_ToCard>
 800118c:	4603      	mov	r3, r0
 800118e:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8001190:	7bfb      	ldrb	r3, [r7, #15]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d118      	bne.n	80011c8 <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8001196:	2300      	movs	r3, #0
 8001198:	73bb      	strb	r3, [r7, #14]
 800119a:	e009      	b.n	80011b0 <MFRC522_Anticoll+0x58>
		{   
		 	serNumCheck ^= serNum[i];
 800119c:	7bbb      	ldrb	r3, [r7, #14]
 800119e:	687a      	ldr	r2, [r7, #4]
 80011a0:	4413      	add	r3, r2
 80011a2:	781a      	ldrb	r2, [r3, #0]
 80011a4:	7b7b      	ldrb	r3, [r7, #13]
 80011a6:	4053      	eors	r3, r2
 80011a8:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	3301      	adds	r3, #1
 80011ae:	73bb      	strb	r3, [r7, #14]
 80011b0:	7bbb      	ldrb	r3, [r7, #14]
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	d9f2      	bls.n	800119c <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	4413      	add	r3, r2
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	7b7a      	ldrb	r2, [r7, #13]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d001      	beq.n	80011c8 <MFRC522_Anticoll+0x70>
		{   
			status = MI_ERR;    
 80011c4:	2302      	movs	r3, #2
 80011c6:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
} 
 80011ca:	4618      	mov	r0, r3
 80011cc:	3710      	adds	r7, #16
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E// change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af02      	add	r7, sp, #8
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	f023 030f 	bic.w	r3, r3, #15
 80011e4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	011b      	lsls	r3, r3, #4
 80011ea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	f043 030c 	orr.w	r3, r3, #12
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80011f6:	7bfb      	ldrb	r3, [r7, #15]
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001200:	7bbb      	ldrb	r3, [r7, #14]
 8001202:	f043 030c 	orr.w	r3, r3, #12
 8001206:	b2db      	uxtb	r3, r3
 8001208:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800120a:	7bbb      	ldrb	r3, [r7, #14]
 800120c:	f043 0308 	orr.w	r3, r3, #8
 8001210:	b2db      	uxtb	r3, r3
 8001212:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001214:	f107 0208 	add.w	r2, r7, #8
 8001218:	2364      	movs	r3, #100	@ 0x64
 800121a:	9300      	str	r3, [sp, #0]
 800121c:	2304      	movs	r3, #4
 800121e:	214e      	movs	r1, #78	@ 0x4e
 8001220:	4803      	ldr	r0, [pc, #12]	@ (8001230 <lcd_send_cmd+0x5c>)
 8001222:	f001 fe79 	bl	8002f18 <HAL_I2C_Master_Transmit>
}
 8001226:	bf00      	nop
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000084 	.word	0x20000084

08001234 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af02      	add	r7, sp, #8
 800123a:	4603      	mov	r3, r0
 800123c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800123e:	79fb      	ldrb	r3, [r7, #7]
 8001240:	f023 030f 	bic.w	r3, r3, #15
 8001244:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	011b      	lsls	r3, r3, #4
 800124a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800124c:	7bfb      	ldrb	r3, [r7, #15]
 800124e:	f043 030d 	orr.w	r3, r3, #13
 8001252:	b2db      	uxtb	r3, r3
 8001254:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001256:	7bfb      	ldrb	r3, [r7, #15]
 8001258:	f043 0309 	orr.w	r3, r3, #9
 800125c:	b2db      	uxtb	r3, r3
 800125e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	f043 030d 	orr.w	r3, r3, #13
 8001266:	b2db      	uxtb	r3, r3
 8001268:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800126a:	7bbb      	ldrb	r3, [r7, #14]
 800126c:	f043 0309 	orr.w	r3, r3, #9
 8001270:	b2db      	uxtb	r3, r3
 8001272:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001274:	f107 0208 	add.w	r2, r7, #8
 8001278:	2364      	movs	r3, #100	@ 0x64
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2304      	movs	r3, #4
 800127e:	214e      	movs	r1, #78	@ 0x4e
 8001280:	4803      	ldr	r0, [pc, #12]	@ (8001290 <lcd_send_data+0x5c>)
 8001282:	f001 fe49 	bl	8002f18 <HAL_I2C_Master_Transmit>
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000084 	.word	0x20000084

08001294 <lcd_clear>:

void lcd_clear (void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 800129a:	2080      	movs	r0, #128	@ 0x80
 800129c:	f7ff ff9a 	bl	80011d4 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80012a0:	2300      	movs	r3, #0
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	e005      	b.n	80012b2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80012a6:	2020      	movs	r0, #32
 80012a8:	f7ff ffc4 	bl	8001234 <lcd_send_data>
	for (int i=0; i<70; i++)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3301      	adds	r3, #1
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b45      	cmp	r3, #69	@ 0x45
 80012b6:	ddf6      	ble.n	80012a6 <lcd_clear+0x12>
	}
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
 80012ca:	6039      	str	r1, [r7, #0]
    switch (row)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <lcd_put_cur+0x18>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d005      	beq.n	80012e4 <lcd_put_cur+0x22>
 80012d8:	e009      	b.n	80012ee <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e0:	603b      	str	r3, [r7, #0]
            break;
 80012e2:	e004      	b.n	80012ee <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80012ea:	603b      	str	r3, [r7, #0]
            break;
 80012ec:	bf00      	nop
    }

    lcd_send_cmd (col);
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff ff6e 	bl	80011d4 <lcd_send_cmd>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <lcd_init>:


void lcd_init (void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001304:	2032      	movs	r0, #50	@ 0x32
 8001306:	f001 f92d 	bl	8002564 <HAL_Delay>
	lcd_send_cmd (0x30);
 800130a:	2030      	movs	r0, #48	@ 0x30
 800130c:	f7ff ff62 	bl	80011d4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8001310:	2005      	movs	r0, #5
 8001312:	f001 f927 	bl	8002564 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001316:	2030      	movs	r0, #48	@ 0x30
 8001318:	f7ff ff5c 	bl	80011d4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 800131c:	2001      	movs	r0, #1
 800131e:	f001 f921 	bl	8002564 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001322:	2030      	movs	r0, #48	@ 0x30
 8001324:	f7ff ff56 	bl	80011d4 <lcd_send_cmd>
	HAL_Delay(10);
 8001328:	200a      	movs	r0, #10
 800132a:	f001 f91b 	bl	8002564 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800132e:	2020      	movs	r0, #32
 8001330:	f7ff ff50 	bl	80011d4 <lcd_send_cmd>
	HAL_Delay(10);
 8001334:	200a      	movs	r0, #10
 8001336:	f001 f915 	bl	8002564 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800133a:	2028      	movs	r0, #40	@ 0x28
 800133c:	f7ff ff4a 	bl	80011d4 <lcd_send_cmd>
	HAL_Delay(1);
 8001340:	2001      	movs	r0, #1
 8001342:	f001 f90f 	bl	8002564 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001346:	2008      	movs	r0, #8
 8001348:	f7ff ff44 	bl	80011d4 <lcd_send_cmd>
	HAL_Delay(1);
 800134c:	2001      	movs	r0, #1
 800134e:	f001 f909 	bl	8002564 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001352:	2001      	movs	r0, #1
 8001354:	f7ff ff3e 	bl	80011d4 <lcd_send_cmd>
	HAL_Delay(1);
 8001358:	2001      	movs	r0, #1
 800135a:	f001 f903 	bl	8002564 <HAL_Delay>
	HAL_Delay(1);
 800135e:	2001      	movs	r0, #1
 8001360:	f001 f900 	bl	8002564 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001364:	2006      	movs	r0, #6
 8001366:	f7ff ff35 	bl	80011d4 <lcd_send_cmd>
	HAL_Delay(1);
 800136a:	2001      	movs	r0, #1
 800136c:	f001 f8fa 	bl	8002564 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001370:	200c      	movs	r0, #12
 8001372:	f7ff ff2f 	bl	80011d4 <lcd_send_cmd>
}
 8001376:	bf00      	nop
 8001378:	bd80      	pop	{r7, pc}

0800137a <lcd_send_string>:

void lcd_send_string (char *str)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
 8001380:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001382:	e006      	b.n	8001392 <lcd_send_string+0x18>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	1c5a      	adds	r2, r3, #1
 8001388:	607a      	str	r2, [r7, #4]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff51 	bl	8001234 <lcd_send_data>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d1f4      	bne.n	8001384 <lcd_send_string+0xa>
}
 800139a:	bf00      	nop
 800139c:	bf00      	nop
 800139e:	3708      	adds	r7, #8
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <lcd_send_char>:
void lcd_send_char(char c)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
    lcd_send_data(c);
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff ff3f 	bl	8001234 <lcd_send_data>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <microDelay>:
float tCelsius = 0;
float tFahrenheit = 0;
float RH = 0;

void microDelay (uint16_t delay)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	80fb      	strh	r3, [r7, #6]
  __HAL_TIM_SET_COUNTER(&htim1, 0);
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <microDelay+0x30>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2200      	movs	r2, #0
 80013d0:	625a      	str	r2, [r3, #36]	@ 0x24
  while (__HAL_TIM_GET_COUNTER(&htim1) < delay);
 80013d2:	bf00      	nop
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <microDelay+0x30>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d3f9      	bcc.n	80013d4 <microDelay+0x14>
}
 80013e0:	bf00      	nop
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000130 	.word	0x20000130

080013f4 <DHT11_Start>:

uint8_t DHT11_Start (void)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b086      	sub	sp, #24
 80013f8:	af00      	add	r7, sp, #0
  uint8_t Response = 0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	75fb      	strb	r3, [r7, #23]
  GPIO_InitTypeDef GPIO_InitStructPrivate = {0};
 80013fe:	463b      	mov	r3, r7
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
  GPIO_InitStructPrivate.Pin = DHT11_PIN;
 800140c:	2304      	movs	r3, #4
 800140e:	603b      	str	r3, [r7, #0]
  GPIO_InitStructPrivate.Mode = GPIO_MODE_OUTPUT_PP;
 8001410:	2301      	movs	r3, #1
 8001412:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Speed = GPIO_SPEED_FREQ_LOW;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  GPIO_InitStructPrivate.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as output
 800141c:	463b      	mov	r3, r7
 800141e:	4619      	mov	r1, r3
 8001420:	482a      	ldr	r0, [pc, #168]	@ (80014cc <DHT11_Start+0xd8>)
 8001422:	f001 fa67 	bl	80028f4 <HAL_GPIO_Init>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8001426:	2200      	movs	r2, #0
 8001428:	2104      	movs	r1, #4
 800142a:	4828      	ldr	r0, [pc, #160]	@ (80014cc <DHT11_Start+0xd8>)
 800142c:	f001 fbfe 	bl	8002c2c <HAL_GPIO_WritePin>
  HAL_Delay(20);   // wait for 20ms
 8001430:	2014      	movs	r0, #20
 8001432:	f001 f897 	bl	8002564 <HAL_Delay>
  HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8001436:	2201      	movs	r2, #1
 8001438:	2104      	movs	r1, #4
 800143a:	4824      	ldr	r0, [pc, #144]	@ (80014cc <DHT11_Start+0xd8>)
 800143c:	f001 fbf6 	bl	8002c2c <HAL_GPIO_WritePin>
  microDelay (30);   // wait for 30us
 8001440:	201e      	movs	r0, #30
 8001442:	f7ff ffbd 	bl	80013c0 <microDelay>
  GPIO_InitStructPrivate.Mode = GPIO_MODE_INPUT;
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
  GPIO_InitStructPrivate.Pull = GPIO_PULLUP;
 800144a:	2301      	movs	r3, #1
 800144c:	60bb      	str	r3, [r7, #8]
  HAL_GPIO_Init(DHT11_PORT, &GPIO_InitStructPrivate); // set the pin as input
 800144e:	463b      	mov	r3, r7
 8001450:	4619      	mov	r1, r3
 8001452:	481e      	ldr	r0, [pc, #120]	@ (80014cc <DHT11_Start+0xd8>)
 8001454:	f001 fa4e 	bl	80028f4 <HAL_GPIO_Init>
  microDelay (40);
 8001458:	2028      	movs	r0, #40	@ 0x28
 800145a:	f7ff ffb1 	bl	80013c0 <microDelay>
  if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 800145e:	2104      	movs	r1, #4
 8001460:	481a      	ldr	r0, [pc, #104]	@ (80014cc <DHT11_Start+0xd8>)
 8001462:	f001 fbcb 	bl	8002bfc <HAL_GPIO_ReadPin>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d10b      	bne.n	8001484 <DHT11_Start+0x90>
  {
    microDelay (80);
 800146c:	2050      	movs	r0, #80	@ 0x50
 800146e:	f7ff ffa7 	bl	80013c0 <microDelay>
    if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 8001472:	2104      	movs	r1, #4
 8001474:	4815      	ldr	r0, [pc, #84]	@ (80014cc <DHT11_Start+0xd8>)
 8001476:	f001 fbc1 	bl	8002bfc <HAL_GPIO_ReadPin>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <DHT11_Start+0x90>
 8001480:	2301      	movs	r3, #1
 8001482:	75fb      	strb	r3, [r7, #23]
  }
  pMillis = HAL_GetTick();
 8001484:	f001 f862 	bl	800254c <HAL_GetTick>
 8001488:	4603      	mov	r3, r0
 800148a:	4a11      	ldr	r2, [pc, #68]	@ (80014d0 <DHT11_Start+0xdc>)
 800148c:	6013      	str	r3, [r2, #0]
  cMillis = HAL_GetTick();
 800148e:	f001 f85d 	bl	800254c <HAL_GetTick>
 8001492:	4603      	mov	r3, r0
 8001494:	4a0f      	ldr	r2, [pc, #60]	@ (80014d4 <DHT11_Start+0xe0>)
 8001496:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001498:	e004      	b.n	80014a4 <DHT11_Start+0xb0>
  {
    cMillis = HAL_GetTick();
 800149a:	f001 f857 	bl	800254c <HAL_GetTick>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a0c      	ldr	r2, [pc, #48]	@ (80014d4 <DHT11_Start+0xe0>)
 80014a2:	6013      	str	r3, [r2, #0]
  while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80014a4:	2104      	movs	r1, #4
 80014a6:	4809      	ldr	r0, [pc, #36]	@ (80014cc <DHT11_Start+0xd8>)
 80014a8:	f001 fba8 	bl	8002bfc <HAL_GPIO_ReadPin>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d006      	beq.n	80014c0 <DHT11_Start+0xcc>
 80014b2:	4b07      	ldr	r3, [pc, #28]	@ (80014d0 <DHT11_Start+0xdc>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	1c9a      	adds	r2, r3, #2
 80014b8:	4b06      	ldr	r3, [pc, #24]	@ (80014d4 <DHT11_Start+0xe0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d8ec      	bhi.n	800149a <DHT11_Start+0xa6>
  }
  return Response;
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3718      	adds	r7, #24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40020800 	.word	0x40020800
 80014d0:	20000268 	.word	0x20000268
 80014d4:	2000026c 	.word	0x2000026c

080014d8 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
  uint8_t a,b;
  for (a=0;a<8;a++)
 80014de:	2300      	movs	r3, #0
 80014e0:	71fb      	strb	r3, [r7, #7]
 80014e2:	e063      	b.n	80015ac <DHT11_Read+0xd4>
  {
    pMillis = HAL_GetTick();
 80014e4:	f001 f832 	bl	800254c <HAL_GetTick>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a34      	ldr	r2, [pc, #208]	@ (80015bc <DHT11_Read+0xe4>)
 80014ec:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 80014ee:	f001 f82d 	bl	800254c <HAL_GetTick>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a32      	ldr	r2, [pc, #200]	@ (80015c0 <DHT11_Read+0xe8>)
 80014f6:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 80014f8:	e004      	b.n	8001504 <DHT11_Read+0x2c>
    {  // wait for the pin to go high
      cMillis = HAL_GetTick();
 80014fa:	f001 f827 	bl	800254c <HAL_GetTick>
 80014fe:	4603      	mov	r3, r0
 8001500:	4a2f      	ldr	r2, [pc, #188]	@ (80015c0 <DHT11_Read+0xe8>)
 8001502:	6013      	str	r3, [r2, #0]
    while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 8001504:	2104      	movs	r1, #4
 8001506:	482f      	ldr	r0, [pc, #188]	@ (80015c4 <DHT11_Read+0xec>)
 8001508:	f001 fb78 	bl	8002bfc <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d106      	bne.n	8001520 <DHT11_Read+0x48>
 8001512:	4b2a      	ldr	r3, [pc, #168]	@ (80015bc <DHT11_Read+0xe4>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	1c9a      	adds	r2, r3, #2
 8001518:	4b29      	ldr	r3, [pc, #164]	@ (80015c0 <DHT11_Read+0xe8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8ec      	bhi.n	80014fa <DHT11_Read+0x22>
    }
    microDelay (40);   // wait for 40 us
 8001520:	2028      	movs	r0, #40	@ 0x28
 8001522:	f7ff ff4d 	bl	80013c0 <microDelay>
    if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001526:	2104      	movs	r1, #4
 8001528:	4826      	ldr	r0, [pc, #152]	@ (80015c4 <DHT11_Read+0xec>)
 800152a:	f001 fb67 	bl	8002bfc <HAL_GPIO_ReadPin>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d10e      	bne.n	8001552 <DHT11_Read+0x7a>
      b&= ~(1<<(7-a));
 8001534:	79fb      	ldrb	r3, [r7, #7]
 8001536:	f1c3 0307 	rsb	r3, r3, #7
 800153a:	2201      	movs	r2, #1
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	b25b      	sxtb	r3, r3
 8001542:	43db      	mvns	r3, r3
 8001544:	b25a      	sxtb	r2, r3
 8001546:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800154a:	4013      	ands	r3, r2
 800154c:	b25b      	sxtb	r3, r3
 800154e:	71bb      	strb	r3, [r7, #6]
 8001550:	e00b      	b.n	800156a <DHT11_Read+0x92>
    else
      b|= (1<<(7-a));
 8001552:	79fb      	ldrb	r3, [r7, #7]
 8001554:	f1c3 0307 	rsb	r3, r3, #7
 8001558:	2201      	movs	r2, #1
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	b25a      	sxtb	r2, r3
 8001560:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001564:	4313      	orrs	r3, r2
 8001566:	b25b      	sxtb	r3, r3
 8001568:	71bb      	strb	r3, [r7, #6]
    pMillis = HAL_GetTick();
 800156a:	f000 ffef 	bl	800254c <HAL_GetTick>
 800156e:	4603      	mov	r3, r0
 8001570:	4a12      	ldr	r2, [pc, #72]	@ (80015bc <DHT11_Read+0xe4>)
 8001572:	6013      	str	r3, [r2, #0]
    cMillis = HAL_GetTick();
 8001574:	f000 ffea 	bl	800254c <HAL_GetTick>
 8001578:	4603      	mov	r3, r0
 800157a:	4a11      	ldr	r2, [pc, #68]	@ (80015c0 <DHT11_Read+0xe8>)
 800157c:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800157e:	e004      	b.n	800158a <DHT11_Read+0xb2>
    {  // wait for the pin to go low
      cMillis = HAL_GetTick();
 8001580:	f000 ffe4 	bl	800254c <HAL_GetTick>
 8001584:	4603      	mov	r3, r0
 8001586:	4a0e      	ldr	r2, [pc, #56]	@ (80015c0 <DHT11_Read+0xe8>)
 8001588:	6013      	str	r3, [r2, #0]
    while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)) && pMillis + 2 > cMillis)
 800158a:	2104      	movs	r1, #4
 800158c:	480d      	ldr	r0, [pc, #52]	@ (80015c4 <DHT11_Read+0xec>)
 800158e:	f001 fb35 	bl	8002bfc <HAL_GPIO_ReadPin>
 8001592:	4603      	mov	r3, r0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d006      	beq.n	80015a6 <DHT11_Read+0xce>
 8001598:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <DHT11_Read+0xe4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	1c9a      	adds	r2, r3, #2
 800159e:	4b08      	ldr	r3, [pc, #32]	@ (80015c0 <DHT11_Read+0xe8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d8ec      	bhi.n	8001580 <DHT11_Read+0xa8>
  for (a=0;a<8;a++)
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	3301      	adds	r3, #1
 80015aa:	71fb      	strb	r3, [r7, #7]
 80015ac:	79fb      	ldrb	r3, [r7, #7]
 80015ae:	2b07      	cmp	r3, #7
 80015b0:	d998      	bls.n	80014e4 <DHT11_Read+0xc>
    }
  }
  return b;
 80015b2:	79bb      	ldrb	r3, [r7, #6]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	20000268 	.word	0x20000268
 80015c0:	2000026c 	.word	0x2000026c
 80015c4:	40020800 	.word	0x40020800

080015c8 <HAL_GPIO_EXTI_Callback>:
int buttonPressed = 0;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b082      	sub	sp, #8
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13)  // Check if the interrupt comes from PC13 (the user button)
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80015d8:	d104      	bne.n	80015e4 <HAL_GPIO_EXTI_Callback+0x1c>
  {
      memset(str, 0, sizeof(str));  // Clear the UID array by setting all bytes to 0
 80015da:	2219      	movs	r2, #25
 80015dc:	2100      	movs	r1, #0
 80015de:	4803      	ldr	r0, [pc, #12]	@ (80015ec <HAL_GPIO_EXTI_Callback+0x24>)
 80015e0:	f004 fe54 	bl	800628c <memset>
  }
}
 80015e4:	bf00      	nop
 80015e6:	3708      	adds	r7, #8
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	2000020c 	.word	0x2000020c

080015f0 <Display_temp>:



void Display_temp(){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	ed2d 8b02 	vpush	{d8}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
	if (DHT11_Start())
 80015fa:	f7ff fefb 	bl	80013f4 <DHT11_Start>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 810a 	beq.w	800181a <Display_temp+0x22a>
		      {
		          RHI = DHT11_Read(); // Relative humidity integral
 8001606:	f7ff ff67 	bl	80014d8 <DHT11_Read>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	4b88      	ldr	r3, [pc, #544]	@ (8001830 <Display_temp+0x240>)
 8001610:	701a      	strb	r2, [r3, #0]
		          RHD = DHT11_Read(); // Relative humidity decimal
 8001612:	f7ff ff61 	bl	80014d8 <DHT11_Read>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	4b86      	ldr	r3, [pc, #536]	@ (8001834 <Display_temp+0x244>)
 800161c:	701a      	strb	r2, [r3, #0]
		          TCI = DHT11_Read(); // Celsius integral
 800161e:	f7ff ff5b 	bl	80014d8 <DHT11_Read>
 8001622:	4603      	mov	r3, r0
 8001624:	461a      	mov	r2, r3
 8001626:	4b84      	ldr	r3, [pc, #528]	@ (8001838 <Display_temp+0x248>)
 8001628:	701a      	strb	r2, [r3, #0]
		          TCD = DHT11_Read(); // Celsius decimal
 800162a:	f7ff ff55 	bl	80014d8 <DHT11_Read>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	4b82      	ldr	r3, [pc, #520]	@ (800183c <Display_temp+0x24c>)
 8001634:	701a      	strb	r2, [r3, #0]
		          SUM = DHT11_Read(); // Check sum
 8001636:	f7ff ff4f 	bl	80014d8 <DHT11_Read>
 800163a:	4603      	mov	r3, r0
 800163c:	461a      	mov	r2, r3
 800163e:	4b80      	ldr	r3, [pc, #512]	@ (8001840 <Display_temp+0x250>)
 8001640:	701a      	strb	r2, [r3, #0]

		          if (RHI + RHD + TCI + TCD == SUM)
 8001642:	4b7b      	ldr	r3, [pc, #492]	@ (8001830 <Display_temp+0x240>)
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	4b7a      	ldr	r3, [pc, #488]	@ (8001834 <Display_temp+0x244>)
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	4413      	add	r3, r2
 800164e:	4a7a      	ldr	r2, [pc, #488]	@ (8001838 <Display_temp+0x248>)
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4a79      	ldr	r2, [pc, #484]	@ (800183c <Display_temp+0x24c>)
 8001656:	7812      	ldrb	r2, [r2, #0]
 8001658:	4413      	add	r3, r2
 800165a:	4a79      	ldr	r2, [pc, #484]	@ (8001840 <Display_temp+0x250>)
 800165c:	7812      	ldrb	r2, [r2, #0]
 800165e:	4293      	cmp	r3, r2
 8001660:	f040 80d2 	bne.w	8001808 <Display_temp+0x218>
		          {

		              // Calculate temperature and humidity
		              tCelsius = (float)TCI + (float)(TCD / 10.0);
 8001664:	4b74      	ldr	r3, [pc, #464]	@ (8001838 <Display_temp+0x248>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	ee07 3a90 	vmov	s15, r3
 800166c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8001670:	4b72      	ldr	r3, [pc, #456]	@ (800183c <Display_temp+0x24c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f7fe ff5d 	bl	8000534 <__aeabi_i2d>
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	4b71      	ldr	r3, [pc, #452]	@ (8001844 <Display_temp+0x254>)
 8001680:	f7ff f8ec 	bl	800085c <__aeabi_ddiv>
 8001684:	4602      	mov	r2, r0
 8001686:	460b      	mov	r3, r1
 8001688:	4610      	mov	r0, r2
 800168a:	4619      	mov	r1, r3
 800168c:	f7ff f9ce 	bl	8000a2c <__aeabi_d2f>
 8001690:	ee07 0a90 	vmov	s15, r0
 8001694:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001698:	4b6b      	ldr	r3, [pc, #428]	@ (8001848 <Display_temp+0x258>)
 800169a:	edc3 7a00 	vstr	s15, [r3]
		              RH = (float)RHI + (float)(RHD / 10.0);
 800169e:	4b64      	ldr	r3, [pc, #400]	@ (8001830 <Display_temp+0x240>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	ee07 3a90 	vmov	s15, r3
 80016a6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80016aa:	4b62      	ldr	r3, [pc, #392]	@ (8001834 <Display_temp+0x244>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe ff40 	bl	8000534 <__aeabi_i2d>
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	4b62      	ldr	r3, [pc, #392]	@ (8001844 <Display_temp+0x254>)
 80016ba:	f7ff f8cf 	bl	800085c <__aeabi_ddiv>
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4610      	mov	r0, r2
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff f9b1 	bl	8000a2c <__aeabi_d2f>
 80016ca:	ee07 0a90 	vmov	s15, r0
 80016ce:	ee78 7a27 	vadd.f32	s15, s16, s15
 80016d2:	4b5e      	ldr	r3, [pc, #376]	@ (800184c <Display_temp+0x25c>)
 80016d4:	edc3 7a00 	vstr	s15, [r3]

		              // Display temperature on line 1
		              lcd_clear();
 80016d8:	f7ff fddc 	bl	8001294 <lcd_clear>
		              lcd_put_cur(0, 0); // Line 1, Column 0
 80016dc:	2100      	movs	r1, #0
 80016de:	2000      	movs	r0, #0
 80016e0:	f7ff fdef 	bl	80012c2 <lcd_put_cur>
		              lcd_send_string("Temp: ");
 80016e4:	485a      	ldr	r0, [pc, #360]	@ (8001850 <Display_temp+0x260>)
 80016e6:	f7ff fe48 	bl	800137a <lcd_send_string>

		              int temp_int_part = (int)tCelsius; // Integer part of temperature
 80016ea:	4b57      	ldr	r3, [pc, #348]	@ (8001848 <Display_temp+0x258>)
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f4:	ee17 3a90 	vmov	r3, s15
 80016f8:	60fb      	str	r3, [r7, #12]
		              int temp_frac_part = (int)((tCelsius - temp_int_part) * 10); // Fractional part of temperature
 80016fa:	4b53      	ldr	r3, [pc, #332]	@ (8001848 <Display_temp+0x258>)
 80016fc:	ed93 7a00 	vldr	s14, [r3]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	ee07 3a90 	vmov	s15, r3
 8001706:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800170e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001712:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800171a:	ee17 3a90 	vmov	r3, s15
 800171e:	60bb      	str	r3, [r7, #8]

		              lcd_send_char(temp_int_part / 10 + '0'); // Tens place
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	4a4c      	ldr	r2, [pc, #304]	@ (8001854 <Display_temp+0x264>)
 8001724:	fb82 1203 	smull	r1, r2, r2, r3
 8001728:	1092      	asrs	r2, r2, #2
 800172a:	17db      	asrs	r3, r3, #31
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	3330      	adds	r3, #48	@ 0x30
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff fe37 	bl	80013a4 <lcd_send_char>
		              lcd_send_char(temp_int_part % 10 + '0'); // Units place
 8001736:	68f9      	ldr	r1, [r7, #12]
 8001738:	4b46      	ldr	r3, [pc, #280]	@ (8001854 <Display_temp+0x264>)
 800173a:	fb83 2301 	smull	r2, r3, r3, r1
 800173e:	109a      	asrs	r2, r3, #2
 8001740:	17cb      	asrs	r3, r1, #31
 8001742:	1ad2      	subs	r2, r2, r3
 8001744:	4613      	mov	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	005b      	lsls	r3, r3, #1
 800174c:	1aca      	subs	r2, r1, r3
 800174e:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff fe26 	bl	80013a4 <lcd_send_char>
		              lcd_send_char('.');
 8001758:	202e      	movs	r0, #46	@ 0x2e
 800175a:	f7ff fe23 	bl	80013a4 <lcd_send_char>
		              lcd_send_char(temp_frac_part + '0'); // Fractional part
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	3330      	adds	r3, #48	@ 0x30
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fe1e 	bl	80013a4 <lcd_send_char>
		              lcd_send_char(223);
 8001768:	20df      	movs	r0, #223	@ 0xdf
 800176a:	f7ff fe1b 	bl	80013a4 <lcd_send_char>
		              lcd_send_string("C");
 800176e:	483a      	ldr	r0, [pc, #232]	@ (8001858 <Display_temp+0x268>)
 8001770:	f7ff fe03 	bl	800137a <lcd_send_string>


		              // Display humidity on line 2
		              lcd_put_cur(1, 0); // Line 2, Column 0
 8001774:	2100      	movs	r1, #0
 8001776:	2001      	movs	r0, #1
 8001778:	f7ff fda3 	bl	80012c2 <lcd_put_cur>
		              lcd_send_string("RH: ");
 800177c:	4837      	ldr	r0, [pc, #220]	@ (800185c <Display_temp+0x26c>)
 800177e:	f7ff fdfc 	bl	800137a <lcd_send_string>

		              int rh_int_part = (int)RH; // Integer part of humidity
 8001782:	4b32      	ldr	r3, [pc, #200]	@ (800184c <Display_temp+0x25c>)
 8001784:	edd3 7a00 	vldr	s15, [r3]
 8001788:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800178c:	ee17 3a90 	vmov	r3, s15
 8001790:	607b      	str	r3, [r7, #4]
		              int rh_frac_part = (int)((RH - rh_int_part) * 10); // Fractional part of humidity
 8001792:	4b2e      	ldr	r3, [pc, #184]	@ (800184c <Display_temp+0x25c>)
 8001794:	ed93 7a00 	vldr	s14, [r3]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017a6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80017aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017b2:	ee17 3a90 	vmov	r3, s15
 80017b6:	603b      	str	r3, [r7, #0]

		              lcd_send_char(rh_int_part / 10 + '0'); // Tens place
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	4a26      	ldr	r2, [pc, #152]	@ (8001854 <Display_temp+0x264>)
 80017bc:	fb82 1203 	smull	r1, r2, r2, r3
 80017c0:	1092      	asrs	r2, r2, #2
 80017c2:	17db      	asrs	r3, r3, #31
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	3330      	adds	r3, #48	@ 0x30
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7ff fdeb 	bl	80013a4 <lcd_send_char>
		              lcd_send_char(rh_int_part % 10 + '0'); // Units place
 80017ce:	6879      	ldr	r1, [r7, #4]
 80017d0:	4b20      	ldr	r3, [pc, #128]	@ (8001854 <Display_temp+0x264>)
 80017d2:	fb83 2301 	smull	r2, r3, r3, r1
 80017d6:	109a      	asrs	r2, r3, #2
 80017d8:	17cb      	asrs	r3, r1, #31
 80017da:	1ad2      	subs	r2, r2, r3
 80017dc:	4613      	mov	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	1aca      	subs	r2, r1, r3
 80017e6:	f102 0330 	add.w	r3, r2, #48	@ 0x30
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fdda 	bl	80013a4 <lcd_send_char>
		              lcd_send_char('.');
 80017f0:	202e      	movs	r0, #46	@ 0x2e
 80017f2:	f7ff fdd7 	bl	80013a4 <lcd_send_char>
		              lcd_send_char(rh_frac_part + '0'); // Fractional part
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	3330      	adds	r3, #48	@ 0x30
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7ff fdd2 	bl	80013a4 <lcd_send_char>
		              lcd_send_string(" %");
 8001800:	4817      	ldr	r0, [pc, #92]	@ (8001860 <Display_temp+0x270>)
 8001802:	f7ff fdba 	bl	800137a <lcd_send_string>
 8001806:	e008      	b.n	800181a <Display_temp+0x22a>
		          }
		          else
		          {
		              lcd_clear();
 8001808:	f7ff fd44 	bl	8001294 <lcd_clear>
		              lcd_put_cur(0, 0);
 800180c:	2100      	movs	r1, #0
 800180e:	2000      	movs	r0, #0
 8001810:	f7ff fd57 	bl	80012c2 <lcd_put_cur>
		              lcd_send_string("Checksum Err!");
 8001814:	4813      	ldr	r0, [pc, #76]	@ (8001864 <Display_temp+0x274>)
 8001816:	f7ff fdb0 	bl	800137a <lcd_send_string>
		          }
		      }
		  HAL_Delay(400);
 800181a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800181e:	f000 fea1 	bl	8002564 <HAL_Delay>
}
 8001822:	bf00      	nop
 8001824:	3710      	adds	r7, #16
 8001826:	46bd      	mov	sp, r7
 8001828:	ecbd 8b02 	vpop	{d8}
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	20000262 	.word	0x20000262
 8001834:	20000263 	.word	0x20000263
 8001838:	20000264 	.word	0x20000264
 800183c:	20000265 	.word	0x20000265
 8001840:	20000266 	.word	0x20000266
 8001844:	40240000 	.word	0x40240000
 8001848:	20000270 	.word	0x20000270
 800184c:	20000274 	.word	0x20000274
 8001850:	08006bdc 	.word	0x08006bdc
 8001854:	66666667 	.word	0x66666667
 8001858:	08006be4 	.word	0x08006be4
 800185c:	08006be8 	.word	0x08006be8
 8001860:	08006bf0 	.word	0x08006bf0
 8001864:	08006bf4 	.word	0x08006bf4

08001868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800186e:	f000 fe07 	bl	8002480 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001872:	f000 f959 	bl	8001b28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001876:	f000 fb15 	bl	8001ea4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800187a:	f000 fae9 	bl	8001e50 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800187e:	f000 fa71 	bl	8001d64 <MX_TIM2_Init>
  MX_SPI1_Init();
 8001882:	f000 f9e9 	bl	8001c58 <MX_SPI1_Init>
  MX_I2C2_Init();
 8001886:	f000 f9b9 	bl	8001bfc <MX_I2C2_Init>
  MX_TIM1_Init();
 800188a:	f000 fa1b 	bl	8001cc4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800188e:	2104      	movs	r1, #4
 8001890:	4893      	ldr	r0, [pc, #588]	@ (8001ae0 <main+0x278>)
 8001892:	f002 ff45 	bl	8004720 <HAL_TIM_PWM_Start>
  MFRC522_Init();
 8001896:	f7ff fb43 	bl	8000f20 <MFRC522_Init>
  HAL_TIM_Base_Start(&htim1);
 800189a:	4892      	ldr	r0, [pc, #584]	@ (8001ae4 <main+0x27c>)
 800189c:	f002 fe8c 	bl	80045b8 <HAL_TIM_Base_Start>
    lcd_init();
 80018a0:	f7ff fd2e 	bl	8001300 <lcd_init>
    lcd_clear();
 80018a4:	f7ff fcf6 	bl	8001294 <lcd_clear>
    lcd_put_cur(0, 0);
 80018a8:	2100      	movs	r1, #0
 80018aa:	2000      	movs	r0, #0
 80018ac:	f7ff fd09 	bl	80012c2 <lcd_put_cur>
    lcd_send_string("ON MODE");
 80018b0:	488d      	ldr	r0, [pc, #564]	@ (8001ae8 <main+0x280>)
 80018b2:	f7ff fd62 	bl	800137a <lcd_send_string>
    HAL_Delay(500);
 80018b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018ba:	f000 fe53 	bl	8002564 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // Scan the card ID
      status = MFRC522_Request(PICC_REQIDL, str);
 80018be:	498b      	ldr	r1, [pc, #556]	@ (8001aec <main+0x284>)
 80018c0:	2026      	movs	r0, #38	@ 0x26
 80018c2:	f7ff fc24 	bl	800110e <MFRC522_Request>
 80018c6:	4603      	mov	r3, r0
 80018c8:	461a      	mov	r2, r3
 80018ca:	4b89      	ldr	r3, [pc, #548]	@ (8001af0 <main+0x288>)
 80018cc:	701a      	strb	r2, [r3, #0]
      status = MFRC522_Anticoll(str);
 80018ce:	4887      	ldr	r0, [pc, #540]	@ (8001aec <main+0x284>)
 80018d0:	f7ff fc42 	bl	8001158 <MFRC522_Anticoll>
 80018d4:	4603      	mov	r3, r0
 80018d6:	461a      	mov	r2, r3
 80018d8:	4b85      	ldr	r3, [pc, #532]	@ (8001af0 <main+0x288>)
 80018da:	701a      	strb	r2, [r3, #0]
      memcpy(sNum, str, 5);
 80018dc:	4b85      	ldr	r3, [pc, #532]	@ (8001af4 <main+0x28c>)
 80018de:	4a83      	ldr	r2, [pc, #524]	@ (8001aec <main+0x284>)
 80018e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80018e4:	6018      	str	r0, [r3, #0]
 80018e6:	3304      	adds	r3, #4
 80018e8:	7019      	strb	r1, [r3, #0]
      HAL_Delay(200);
 80018ea:	20c8      	movs	r0, #200	@ 0xc8
 80018ec:	f000 fe3a 	bl	8002564 <HAL_Delay>

      Display_temp();
 80018f0:	f7ff fe7e 	bl	80015f0 <Display_temp>

      // Check if the UID matches the expected values.
      // Note: Compare numerically (without quotes) instead of as characters.
      if ((str[0] == 147) && (str[1] == 32) && (str[2] == 66) && (str[3] == 26)&& (str[4] == 0))
 80018f4:	4b7d      	ldr	r3, [pc, #500]	@ (8001aec <main+0x284>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
 80018f8:	2b93      	cmp	r3, #147	@ 0x93
 80018fa:	f040 8097 	bne.w	8001a2c <main+0x1c4>
 80018fe:	4b7b      	ldr	r3, [pc, #492]	@ (8001aec <main+0x284>)
 8001900:	785b      	ldrb	r3, [r3, #1]
 8001902:	2b20      	cmp	r3, #32
 8001904:	f040 8092 	bne.w	8001a2c <main+0x1c4>
 8001908:	4b78      	ldr	r3, [pc, #480]	@ (8001aec <main+0x284>)
 800190a:	789b      	ldrb	r3, [r3, #2]
 800190c:	2b42      	cmp	r3, #66	@ 0x42
 800190e:	f040 808d 	bne.w	8001a2c <main+0x1c4>
 8001912:	4b76      	ldr	r3, [pc, #472]	@ (8001aec <main+0x284>)
 8001914:	78db      	ldrb	r3, [r3, #3]
 8001916:	2b1a      	cmp	r3, #26
 8001918:	f040 8088 	bne.w	8001a2c <main+0x1c4>
 800191c:	4b73      	ldr	r3, [pc, #460]	@ (8001aec <main+0x284>)
 800191e:	791b      	ldrb	r3, [r3, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	f040 8083 	bne.w	8001a2c <main+0x1c4>
      {
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001926:	2200      	movs	r2, #0
 8001928:	2120      	movs	r1, #32
 800192a:	4873      	ldr	r0, [pc, #460]	@ (8001af8 <main+0x290>)
 800192c:	f001 f97e 	bl	8002c2c <HAL_GPIO_WritePin>
          // Set PWM compare value to rotate servo to 180°
          __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_2, 750);
 8001930:	4b6b      	ldr	r3, [pc, #428]	@ (8001ae0 <main+0x278>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8001938:	639a      	str	r2, [r3, #56]	@ 0x38
          // Informing the opening of the door
          HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 800193a:	4b70      	ldr	r3, [pc, #448]	@ (8001afc <main+0x294>)
 800193c:	681c      	ldr	r4, [r3, #0]
 800193e:	4b6f      	ldr	r3, [pc, #444]	@ (8001afc <main+0x294>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f7fe fc4c 	bl	80001e0 <strlen>
 8001948:	4603      	mov	r3, r0
 800194a:	b29a      	uxth	r2, r3
 800194c:	f04f 33ff 	mov.w	r3, #4294967295
 8001950:	4621      	mov	r1, r4
 8001952:	486b      	ldr	r0, [pc, #428]	@ (8001b00 <main+0x298>)
 8001954:	f003 fcb4 	bl	80052c0 <HAL_UART_Transmit>
          lcd_clear();
 8001958:	f7ff fc9c 	bl	8001294 <lcd_clear>
              lcd_put_cur(0, 0);
 800195c:	2100      	movs	r1, #0
 800195e:	2000      	movs	r0, #0
 8001960:	f7ff fcaf 	bl	80012c2 <lcd_put_cur>
              lcd_send_string("Open");
 8001964:	4867      	ldr	r0, [pc, #412]	@ (8001b04 <main+0x29c>)
 8001966:	f7ff fd08 	bl	800137a <lcd_send_string>
          HAL_Delay(500);
 800196a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800196e:	f000 fdf9 	bl	8002564 <HAL_Delay>

          for (uint8_t i = 5; i>0; i--){
 8001972:	2305      	movs	r3, #5
 8001974:	71fb      	strb	r3, [r7, #7]
 8001976:	e030      	b.n	80019da <main+0x172>
        	  snprintf(msg2, sizeof(msg2), "Closing door in: %d\n\r", i);
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	4a63      	ldr	r2, [pc, #396]	@ (8001b08 <main+0x2a0>)
 800197c:	2132      	movs	r1, #50	@ 0x32
 800197e:	4863      	ldr	r0, [pc, #396]	@ (8001b0c <main+0x2a4>)
 8001980:	f004 fc50 	bl	8006224 <sniprintf>
        	     HAL_UART_Transmit(&huart2, (uint8_t*)(msg2), strlen(msg2), HAL_MAX_DELAY);
 8001984:	4861      	ldr	r0, [pc, #388]	@ (8001b0c <main+0x2a4>)
 8001986:	f7fe fc2b 	bl	80001e0 <strlen>
 800198a:	4603      	mov	r3, r0
 800198c:	b29a      	uxth	r2, r3
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
 8001992:	495e      	ldr	r1, [pc, #376]	@ (8001b0c <main+0x2a4>)
 8001994:	485a      	ldr	r0, [pc, #360]	@ (8001b00 <main+0x298>)
 8001996:	f003 fc93 	bl	80052c0 <HAL_UART_Transmit>

        	     lcd_clear();
 800199a:	f7ff fc7b 	bl	8001294 <lcd_clear>
        	     lcd_put_cur(0, 2);
 800199e:	2102      	movs	r1, #2
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff fc8e 	bl	80012c2 <lcd_put_cur>
        	     lcd_send_string("Closing door ");
 80019a6:	485a      	ldr	r0, [pc, #360]	@ (8001b10 <main+0x2a8>)
 80019a8:	f7ff fce7 	bl	800137a <lcd_send_string>
        	     lcd_put_cur(1, 6);
 80019ac:	2106      	movs	r1, #6
 80019ae:	2001      	movs	r0, #1
 80019b0:	f7ff fc87 	bl	80012c2 <lcd_put_cur>
        	     lcd_send_string("in ");
 80019b4:	4857      	ldr	r0, [pc, #348]	@ (8001b14 <main+0x2ac>)
 80019b6:	f7ff fce0 	bl	800137a <lcd_send_string>
        	     lcd_put_cur(1, 10);
 80019ba:	210a      	movs	r1, #10
 80019bc:	2001      	movs	r0, #1
 80019be:	f7ff fc80 	bl	80012c2 <lcd_put_cur>
        	     lcd_send_char('0' + i);
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	3330      	adds	r3, #48	@ 0x30
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff fcec 	bl	80013a4 <lcd_send_char>

        	     HAL_Delay(1000);
 80019cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019d0:	f000 fdc8 	bl	8002564 <HAL_Delay>
          for (uint8_t i = 5; i>0; i--){
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	71fb      	strb	r3, [r7, #7]
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1cb      	bne.n	8001978 <main+0x110>
          }
          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 250);
 80019e0:	4b3f      	ldr	r3, [pc, #252]	@ (8001ae0 <main+0x278>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	22fa      	movs	r2, #250	@ 0xfa
 80019e6:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_UART_Transmit(&huart2, (uint8_t*)msg3, strlen(msg3), HAL_MAX_DELAY);
 80019e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001b18 <main+0x2b0>)
 80019ea:	681c      	ldr	r4, [r3, #0]
 80019ec:	4b4a      	ldr	r3, [pc, #296]	@ (8001b18 <main+0x2b0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f7fe fbf5 	bl	80001e0 <strlen>
 80019f6:	4603      	mov	r3, r0
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	f04f 33ff 	mov.w	r3, #4294967295
 80019fe:	4621      	mov	r1, r4
 8001a00:	483f      	ldr	r0, [pc, #252]	@ (8001b00 <main+0x298>)
 8001a02:	f003 fc5d 	bl	80052c0 <HAL_UART_Transmit>
          memset(str, 0, sizeof(str));
 8001a06:	2219      	movs	r2, #25
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4838      	ldr	r0, [pc, #224]	@ (8001aec <main+0x284>)
 8001a0c:	f004 fc3e 	bl	800628c <memset>
          lcd_clear();
 8001a10:	f7ff fc40 	bl	8001294 <lcd_clear>
          lcd_put_cur(0, 0);
 8001a14:	2100      	movs	r1, #0
 8001a16:	2000      	movs	r0, #0
 8001a18:	f7ff fc53 	bl	80012c2 <lcd_put_cur>
          lcd_send_string("Closed");
 8001a1c:	483f      	ldr	r0, [pc, #252]	@ (8001b1c <main+0x2b4>)
 8001a1e:	f7ff fcac 	bl	800137a <lcd_send_string>
          HAL_Delay(500);
 8001a22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001a26:	f000 fd9d 	bl	8002564 <HAL_Delay>
 8001a2a:	e057      	b.n	8001adc <main+0x274>

      }

      else
      {
    	  if (((str[0] == 147) && (str[1] == 32) && (str[2] == 0) && (str[3] == 0)&& (str[4] == 0))||((str[0] == 147) && (str[1] == 203) && (str[2] == 66) && (str[3] == 26)&& (str[4] == 0))){
 8001a2c:	4b2f      	ldr	r3, [pc, #188]	@ (8001aec <main+0x284>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b93      	cmp	r3, #147	@ 0x93
 8001a32:	d10f      	bne.n	8001a54 <main+0x1ec>
 8001a34:	4b2d      	ldr	r3, [pc, #180]	@ (8001aec <main+0x284>)
 8001a36:	785b      	ldrb	r3, [r3, #1]
 8001a38:	2b20      	cmp	r3, #32
 8001a3a:	d10b      	bne.n	8001a54 <main+0x1ec>
 8001a3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001aec <main+0x284>)
 8001a3e:	789b      	ldrb	r3, [r3, #2]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d107      	bne.n	8001a54 <main+0x1ec>
 8001a44:	4b29      	ldr	r3, [pc, #164]	@ (8001aec <main+0x284>)
 8001a46:	78db      	ldrb	r3, [r3, #3]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d103      	bne.n	8001a54 <main+0x1ec>
 8001a4c:	4b27      	ldr	r3, [pc, #156]	@ (8001aec <main+0x284>)
 8001a4e:	791b      	ldrb	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d013      	beq.n	8001a7c <main+0x214>
 8001a54:	4b25      	ldr	r3, [pc, #148]	@ (8001aec <main+0x284>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b93      	cmp	r3, #147	@ 0x93
 8001a5a:	d119      	bne.n	8001a90 <main+0x228>
 8001a5c:	4b23      	ldr	r3, [pc, #140]	@ (8001aec <main+0x284>)
 8001a5e:	785b      	ldrb	r3, [r3, #1]
 8001a60:	2bcb      	cmp	r3, #203	@ 0xcb
 8001a62:	d115      	bne.n	8001a90 <main+0x228>
 8001a64:	4b21      	ldr	r3, [pc, #132]	@ (8001aec <main+0x284>)
 8001a66:	789b      	ldrb	r3, [r3, #2]
 8001a68:	2b42      	cmp	r3, #66	@ 0x42
 8001a6a:	d111      	bne.n	8001a90 <main+0x228>
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <main+0x284>)
 8001a6e:	78db      	ldrb	r3, [r3, #3]
 8001a70:	2b1a      	cmp	r3, #26
 8001a72:	d10d      	bne.n	8001a90 <main+0x228>
 8001a74:	4b1d      	ldr	r3, [pc, #116]	@ (8001aec <main+0x284>)
 8001a76:	791b      	ldrb	r3, [r3, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d109      	bne.n	8001a90 <main+0x228>
    	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	2120      	movs	r1, #32
 8001a80:	481d      	ldr	r0, [pc, #116]	@ (8001af8 <main+0x290>)
 8001a82:	f001 f8d3 	bl	8002c2c <HAL_GPIO_WritePin>
          // Set PWM compare value for 0° position
          __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 250);
 8001a86:	4b16      	ldr	r3, [pc, #88]	@ (8001ae0 <main+0x278>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	22fa      	movs	r2, #250	@ 0xfa
 8001a8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8001a8e:	e025      	b.n	8001adc <main+0x274>


      }
      else{
    	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2120      	movs	r1, #32
 8001a94:	4818      	ldr	r0, [pc, #96]	@ (8001af8 <main+0x290>)
 8001a96:	f001 f8c9 	bl	8002c2c <HAL_GPIO_WritePin>
      // Informing the opening of the door
      HAL_UART_Transmit(&huart2, (uint8_t*)msg4, strlen(msg4), HAL_MAX_DELAY);
 8001a9a:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <main+0x2b8>)
 8001a9c:	681c      	ldr	r4, [r3, #0]
 8001a9e:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <main+0x2b8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fb9c 	bl	80001e0 <strlen>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	4813      	ldr	r0, [pc, #76]	@ (8001b00 <main+0x298>)
 8001ab4:	f003 fc04 	bl	80052c0 <HAL_UART_Transmit>
      lcd_clear();
 8001ab8:	f7ff fbec 	bl	8001294 <lcd_clear>
          lcd_put_cur(0, 0);
 8001abc:	2100      	movs	r1, #0
 8001abe:	2000      	movs	r0, #0
 8001ac0:	f7ff fbff 	bl	80012c2 <lcd_put_cur>
          lcd_send_string("Access denied!");
 8001ac4:	4817      	ldr	r0, [pc, #92]	@ (8001b24 <main+0x2bc>)
 8001ac6:	f7ff fc58 	bl	800137a <lcd_send_string>
      HAL_Delay(2000);
 8001aca:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001ace:	f000 fd49 	bl	8002564 <HAL_Delay>
      memset(str, 0, sizeof(str));
 8001ad2:	2219      	movs	r2, #25
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4805      	ldr	r0, [pc, #20]	@ (8001aec <main+0x284>)
 8001ad8:	f004 fbd8 	bl	800628c <memset>
      status = MFRC522_Request(PICC_REQIDL, str);
 8001adc:	e6ef      	b.n	80018be <main+0x56>
 8001ade:	bf00      	nop
 8001ae0:	20000178 	.word	0x20000178
 8001ae4:	20000130 	.word	0x20000130
 8001ae8:	08006c04 	.word	0x08006c04
 8001aec:	2000020c 	.word	0x2000020c
 8001af0:	20000208 	.word	0x20000208
 8001af4:	20000228 	.word	0x20000228
 8001af8:	40020000 	.word	0x40020000
 8001afc:	20000000 	.word	0x20000000
 8001b00:	200001c0 	.word	0x200001c0
 8001b04:	08006c0c 	.word	0x08006c0c
 8001b08:	08006c14 	.word	0x08006c14
 8001b0c:	20000230 	.word	0x20000230
 8001b10:	08006c2c 	.word	0x08006c2c
 8001b14:	08006c3c 	.word	0x08006c3c
 8001b18:	20000004 	.word	0x20000004
 8001b1c:	08006c40 	.word	0x08006c40
 8001b20:	20000008 	.word	0x20000008
 8001b24:	08006c48 	.word	0x08006c48

08001b28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b094      	sub	sp, #80	@ 0x50
 8001b2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b2e:	f107 0320 	add.w	r3, r7, #32
 8001b32:	2230      	movs	r2, #48	@ 0x30
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f004 fba8 	bl	800628c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	4b28      	ldr	r3, [pc, #160]	@ (8001bf4 <SystemClock_Config+0xcc>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b54:	4a27      	ldr	r2, [pc, #156]	@ (8001bf4 <SystemClock_Config+0xcc>)
 8001b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b5a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b5c:	4b25      	ldr	r3, [pc, #148]	@ (8001bf4 <SystemClock_Config+0xcc>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <SystemClock_Config+0xd0>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a21      	ldr	r2, [pc, #132]	@ (8001bf8 <SystemClock_Config+0xd0>)
 8001b72:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b76:	6013      	str	r3, [r2, #0]
 8001b78:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf8 <SystemClock_Config+0xd0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001b80:	607b      	str	r3, [r7, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b84:	2302      	movs	r3, #2
 8001b86:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b8c:	2310      	movs	r3, #16
 8001b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b90:	2302      	movs	r3, #2
 8001b92:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b94:	2300      	movs	r3, #0
 8001b96:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001b98:	2310      	movs	r3, #16
 8001b9a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001b9c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001ba0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001ba2:	2304      	movs	r3, #4
 8001ba4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ba6:	2304      	movs	r3, #4
 8001ba8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001baa:	f107 0320 	add.w	r3, r7, #32
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f001 fd0c 	bl	80035cc <HAL_RCC_OscConfig>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001bba:	f000 f9ff 	bl	8001fbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bbe:	230f      	movs	r3, #15
 8001bc0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001bca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001bd4:	f107 030c 	add.w	r3, r7, #12
 8001bd8:	2102      	movs	r1, #2
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 ff6e 	bl	8003abc <HAL_RCC_ClockConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001be6:	f000 f9e9 	bl	8001fbc <Error_Handler>
  }
}
 8001bea:	bf00      	nop
 8001bec:	3750      	adds	r7, #80	@ 0x50
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40007000 	.word	0x40007000

08001bfc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c00:	4b12      	ldr	r3, [pc, #72]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c02:	4a13      	ldr	r2, [pc, #76]	@ (8001c50 <MX_I2C2_Init+0x54>)
 8001c04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001c06:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c08:	4a12      	ldr	r2, [pc, #72]	@ (8001c54 <MX_I2C2_Init+0x58>)
 8001c0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c1a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c1e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c20:	4b0a      	ldr	r3, [pc, #40]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001c26:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c2c:	4b07      	ldr	r3, [pc, #28]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c32:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001c38:	4804      	ldr	r0, [pc, #16]	@ (8001c4c <MX_I2C2_Init+0x50>)
 8001c3a:	f001 f829 	bl	8002c90 <HAL_I2C_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001c44:	f000 f9ba 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001c48:	bf00      	nop
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000084 	.word	0x20000084
 8001c50:	40005800 	.word	0x40005800
 8001c54:	000186a0 	.word	0x000186a0

08001c58 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001c5c:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c5e:	4a18      	ldr	r2, [pc, #96]	@ (8001cc0 <MX_SPI1_Init+0x68>)
 8001c60:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c62:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c68:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c70:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c88:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c8c:	2210      	movs	r2, #16
 8001c8e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c96:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001ca4:	220a      	movs	r2, #10
 8001ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ca8:	4804      	ldr	r0, [pc, #16]	@ (8001cbc <MX_SPI1_Init+0x64>)
 8001caa:	f002 f927 	bl	8003efc <HAL_SPI_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001cb4:	f000 f982 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200000d8 	.word	0x200000d8
 8001cc0:	40013000 	.word	0x40013000

08001cc4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cca:	f107 0308 	add.w	r3, r7, #8
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd8:	463b      	mov	r3, r7
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d5c <MX_TIM1_Init+0x98>)
 8001ce2:	4a1f      	ldr	r2, [pc, #124]	@ (8001d60 <MX_TIM1_Init+0x9c>)
 8001ce4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001ce6:	4b1d      	ldr	r3, [pc, #116]	@ (8001d5c <MX_TIM1_Init+0x98>)
 8001ce8:	2247      	movs	r2, #71	@ 0x47
 8001cea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	4b1b      	ldr	r3, [pc, #108]	@ (8001d5c <MX_TIM1_Init+0x98>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	@ (8001d5c <MX_TIM1_Init+0x98>)
 8001cf4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cf8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cfa:	4b18      	ldr	r3, [pc, #96]	@ (8001d5c <MX_TIM1_Init+0x98>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d00:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <MX_TIM1_Init+0x98>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d06:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <MX_TIM1_Init+0x98>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d0c:	4813      	ldr	r0, [pc, #76]	@ (8001d5c <MX_TIM1_Init+0x98>)
 8001d0e:	f002 fc03 	bl	8004518 <HAL_TIM_Base_Init>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d18:	f000 f950 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d1c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d22:	f107 0308 	add.w	r3, r7, #8
 8001d26:	4619      	mov	r1, r3
 8001d28:	480c      	ldr	r0, [pc, #48]	@ (8001d5c <MX_TIM1_Init+0x98>)
 8001d2a:	f002 fe6b 	bl	8004a04 <HAL_TIM_ConfigClockSource>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d34:	f000 f942 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d40:	463b      	mov	r3, r7
 8001d42:	4619      	mov	r1, r3
 8001d44:	4805      	ldr	r0, [pc, #20]	@ (8001d5c <MX_TIM1_Init+0x98>)
 8001d46:	f003 f9fd 	bl	8005144 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d50:	f000 f934 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d54:	bf00      	nop
 8001d56:	3718      	adds	r7, #24
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000130 	.word	0x20000130
 8001d60:	40010000 	.word	0x40010000

08001d64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08e      	sub	sp, #56	@ 0x38
 8001d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d6e:	2200      	movs	r2, #0
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	605a      	str	r2, [r3, #4]
 8001d74:	609a      	str	r2, [r3, #8]
 8001d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d78:	f107 0320 	add.w	r3, r7, #32
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
 8001d90:	615a      	str	r2, [r3, #20]
 8001d92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d94:	4b2d      	ldr	r3, [pc, #180]	@ (8001e4c <MX_TIM2_Init+0xe8>)
 8001d96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001d9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e4c <MX_TIM2_Init+0xe8>)
 8001d9e:	22b3      	movs	r2, #179	@ 0xb3
 8001da0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001da2:	4b2a      	ldr	r3, [pc, #168]	@ (8001e4c <MX_TIM2_Init+0xe8>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001da8:	4b28      	ldr	r3, [pc, #160]	@ (8001e4c <MX_TIM2_Init+0xe8>)
 8001daa:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001dae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001db0:	4b26      	ldr	r3, [pc, #152]	@ (8001e4c <MX_TIM2_Init+0xe8>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db6:	4b25      	ldr	r3, [pc, #148]	@ (8001e4c <MX_TIM2_Init+0xe8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001dbc:	4823      	ldr	r0, [pc, #140]	@ (8001e4c <MX_TIM2_Init+0xe8>)
 8001dbe:	f002 fbab 	bl	8004518 <HAL_TIM_Base_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001dc8:	f000 f8f8 	bl	8001fbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dcc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001dd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	481c      	ldr	r0, [pc, #112]	@ (8001e4c <MX_TIM2_Init+0xe8>)
 8001dda:	f002 fe13 	bl	8004a04 <HAL_TIM_ConfigClockSource>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001de4:	f000 f8ea 	bl	8001fbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001de8:	4818      	ldr	r0, [pc, #96]	@ (8001e4c <MX_TIM2_Init+0xe8>)
 8001dea:	f002 fc3f 	bl	800466c <HAL_TIM_PWM_Init>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001df4:	f000 f8e2 	bl	8001fbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e00:	f107 0320 	add.w	r3, r7, #32
 8001e04:	4619      	mov	r1, r3
 8001e06:	4811      	ldr	r0, [pc, #68]	@ (8001e4c <MX_TIM2_Init+0xe8>)
 8001e08:	f003 f99c 	bl	8005144 <HAL_TIMEx_MasterConfigSynchronization>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001e12:	f000 f8d3 	bl	8001fbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e16:	2360      	movs	r3, #96	@ 0x60
 8001e18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e26:	1d3b      	adds	r3, r7, #4
 8001e28:	2204      	movs	r2, #4
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4807      	ldr	r0, [pc, #28]	@ (8001e4c <MX_TIM2_Init+0xe8>)
 8001e2e:	f002 fd27 	bl	8004880 <HAL_TIM_PWM_ConfigChannel>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d001      	beq.n	8001e3c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001e38:	f000 f8c0 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001e3c:	4803      	ldr	r0, [pc, #12]	@ (8001e4c <MX_TIM2_Init+0xe8>)
 8001e3e:	f000 f9e3 	bl	8002208 <HAL_TIM_MspPostInit>

}
 8001e42:	bf00      	nop
 8001e44:	3738      	adds	r7, #56	@ 0x38
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000178 	.word	0x20000178

08001e50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e54:	4b11      	ldr	r3, [pc, #68]	@ (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e56:	4a12      	ldr	r2, [pc, #72]	@ (8001ea0 <MX_USART2_UART_Init+0x50>)
 8001e58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e5a:	4b10      	ldr	r3, [pc, #64]	@ (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e62:	4b0e      	ldr	r3, [pc, #56]	@ (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e68:	4b0c      	ldr	r3, [pc, #48]	@ (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e74:	4b09      	ldr	r3, [pc, #36]	@ (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e76:	220c      	movs	r2, #12
 8001e78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e7a:	4b08      	ldr	r3, [pc, #32]	@ (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e80:	4b06      	ldr	r3, [pc, #24]	@ (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e86:	4805      	ldr	r0, [pc, #20]	@ (8001e9c <MX_USART2_UART_Init+0x4c>)
 8001e88:	f003 f9ca 	bl	8005220 <HAL_UART_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d001      	beq.n	8001e96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e92:	f000 f893 	bl	8001fbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	200001c0 	.word	0x200001c0
 8001ea0:	40004400 	.word	0x40004400

08001ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08a      	sub	sp, #40	@ 0x28
 8001ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eaa:	f107 0314 	add.w	r3, r7, #20
 8001eae:	2200      	movs	r2, #0
 8001eb0:	601a      	str	r2, [r3, #0]
 8001eb2:	605a      	str	r2, [r3, #4]
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	60da      	str	r2, [r3, #12]
 8001eb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	613b      	str	r3, [r7, #16]
 8001ebe:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb0 <MX_GPIO_Init+0x10c>)
 8001ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec2:	4a3b      	ldr	r2, [pc, #236]	@ (8001fb0 <MX_GPIO_Init+0x10c>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eca:	4b39      	ldr	r3, [pc, #228]	@ (8001fb0 <MX_GPIO_Init+0x10c>)
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	613b      	str	r3, [r7, #16]
 8001ed4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	4b35      	ldr	r3, [pc, #212]	@ (8001fb0 <MX_GPIO_Init+0x10c>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ede:	4a34      	ldr	r2, [pc, #208]	@ (8001fb0 <MX_GPIO_Init+0x10c>)
 8001ee0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ee4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ee6:	4b32      	ldr	r3, [pc, #200]	@ (8001fb0 <MX_GPIO_Init+0x10c>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	4b2e      	ldr	r3, [pc, #184]	@ (8001fb0 <MX_GPIO_Init+0x10c>)
 8001ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efa:	4a2d      	ldr	r2, [pc, #180]	@ (8001fb0 <MX_GPIO_Init+0x10c>)
 8001efc:	f043 0301 	orr.w	r3, r3, #1
 8001f00:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f02:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb0 <MX_GPIO_Init+0x10c>)
 8001f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f06:	f003 0301 	and.w	r3, r3, #1
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	607b      	str	r3, [r7, #4]
 8001f12:	4b27      	ldr	r3, [pc, #156]	@ (8001fb0 <MX_GPIO_Init+0x10c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a26      	ldr	r2, [pc, #152]	@ (8001fb0 <MX_GPIO_Init+0x10c>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b24      	ldr	r3, [pc, #144]	@ (8001fb0 <MX_GPIO_Init+0x10c>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2104      	movs	r1, #4
 8001f2e:	4821      	ldr	r0, [pc, #132]	@ (8001fb4 <MX_GPIO_Init+0x110>)
 8001f30:	f000 fe7c 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8001f34:	2200      	movs	r2, #0
 8001f36:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8001f3a:	481f      	ldr	r0, [pc, #124]	@ (8001fb8 <MX_GPIO_Init+0x114>)
 8001f3c:	f000 fe76 	bl	8002c2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f40:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f46:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001f4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	4619      	mov	r1, r3
 8001f56:	4817      	ldr	r0, [pc, #92]	@ (8001fb4 <MX_GPIO_Init+0x110>)
 8001f58:	f000 fccc 	bl	80028f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f60:	2301      	movs	r3, #1
 8001f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f6c:	f107 0314 	add.w	r3, r7, #20
 8001f70:	4619      	mov	r1, r3
 8001f72:	4810      	ldr	r0, [pc, #64]	@ (8001fb4 <MX_GPIO_Init+0x110>)
 8001f74:	f000 fcbe 	bl	80028f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 8001f78:	f44f 7398 	mov.w	r3, #304	@ 0x130
 8001f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4809      	ldr	r0, [pc, #36]	@ (8001fb8 <MX_GPIO_Init+0x114>)
 8001f92:	f000 fcaf 	bl	80028f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	2028      	movs	r0, #40	@ 0x28
 8001f9c:	f000 fbe1 	bl	8002762 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fa0:	2028      	movs	r0, #40	@ 0x28
 8001fa2:	f000 fbfa 	bl	800279a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001fa6:	bf00      	nop
 8001fa8:	3728      	adds	r7, #40	@ 0x28
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	40020800 	.word	0x40020800
 8001fb8:	40020000 	.word	0x40020000

08001fbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc0:	b672      	cpsid	i
}
 8001fc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <Error_Handler+0x8>

08001fc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <HAL_MspInit+0x4c>)
 8001fd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fd6:	4a0f      	ldr	r2, [pc, #60]	@ (8002014 <HAL_MspInit+0x4c>)
 8001fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fde:	4b0d      	ldr	r3, [pc, #52]	@ (8002014 <HAL_MspInit+0x4c>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fe2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	603b      	str	r3, [r7, #0]
 8001fee:	4b09      	ldr	r3, [pc, #36]	@ (8002014 <HAL_MspInit+0x4c>)
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff2:	4a08      	ldr	r2, [pc, #32]	@ (8002014 <HAL_MspInit+0x4c>)
 8001ff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ffa:	4b06      	ldr	r3, [pc, #24]	@ (8002014 <HAL_MspInit+0x4c>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002006:	2007      	movs	r0, #7
 8002008:	f000 fba0 	bl	800274c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800

08002018 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b08a      	sub	sp, #40	@ 0x28
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a22      	ldr	r2, [pc, #136]	@ (80020c0 <HAL_I2C_MspInit+0xa8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d13d      	bne.n	80020b6 <HAL_I2C_MspInit+0x9e>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	613b      	str	r3, [r7, #16]
 800203e:	4b21      	ldr	r3, [pc, #132]	@ (80020c4 <HAL_I2C_MspInit+0xac>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	4a20      	ldr	r2, [pc, #128]	@ (80020c4 <HAL_I2C_MspInit+0xac>)
 8002044:	f043 0302 	orr.w	r3, r3, #2
 8002048:	6313      	str	r3, [r2, #48]	@ 0x30
 800204a:	4b1e      	ldr	r3, [pc, #120]	@ (80020c4 <HAL_I2C_MspInit+0xac>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	613b      	str	r3, [r7, #16]
 8002054:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB9     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002056:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800205c:	2312      	movs	r3, #18
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002060:	2301      	movs	r3, #1
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002064:	2303      	movs	r3, #3
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002068:	2304      	movs	r3, #4
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4815      	ldr	r0, [pc, #84]	@ (80020c8 <HAL_I2C_MspInit+0xb0>)
 8002074:	f000 fc3e 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002078:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800207c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800207e:	2312      	movs	r3, #18
 8002080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002082:	2301      	movs	r3, #1
 8002084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002086:	2303      	movs	r3, #3
 8002088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 800208a:	2309      	movs	r3, #9
 800208c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800208e:	f107 0314 	add.w	r3, r7, #20
 8002092:	4619      	mov	r1, r3
 8002094:	480c      	ldr	r0, [pc, #48]	@ (80020c8 <HAL_I2C_MspInit+0xb0>)
 8002096:	f000 fc2d 	bl	80028f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b09      	ldr	r3, [pc, #36]	@ (80020c4 <HAL_I2C_MspInit+0xac>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a2:	4a08      	ldr	r2, [pc, #32]	@ (80020c4 <HAL_I2C_MspInit+0xac>)
 80020a4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80020a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80020aa:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <HAL_I2C_MspInit+0xac>)
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 80020b6:	bf00      	nop
 80020b8:	3728      	adds	r7, #40	@ 0x28
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	40005800 	.word	0x40005800
 80020c4:	40023800 	.word	0x40023800
 80020c8:	40020400 	.word	0x40020400

080020cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	@ 0x28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 0314 	add.w	r3, r7, #20
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a28      	ldr	r2, [pc, #160]	@ (800218c <HAL_SPI_MspInit+0xc0>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d149      	bne.n	8002182 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	4b27      	ldr	r3, [pc, #156]	@ (8002190 <HAL_SPI_MspInit+0xc4>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	4a26      	ldr	r2, [pc, #152]	@ (8002190 <HAL_SPI_MspInit+0xc4>)
 80020f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020fe:	4b24      	ldr	r3, [pc, #144]	@ (8002190 <HAL_SPI_MspInit+0xc4>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b20      	ldr	r3, [pc, #128]	@ (8002190 <HAL_SPI_MspInit+0xc4>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002112:	4a1f      	ldr	r2, [pc, #124]	@ (8002190 <HAL_SPI_MspInit+0xc4>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	6313      	str	r3, [r2, #48]	@ 0x30
 800211a:	4b1d      	ldr	r3, [pc, #116]	@ (8002190 <HAL_SPI_MspInit+0xc4>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60bb      	str	r3, [r7, #8]
 800212a:	4b19      	ldr	r3, [pc, #100]	@ (8002190 <HAL_SPI_MspInit+0xc4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212e:	4a18      	ldr	r2, [pc, #96]	@ (8002190 <HAL_SPI_MspInit+0xc4>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	@ 0x30
 8002136:	4b16      	ldr	r3, [pc, #88]	@ (8002190 <HAL_SPI_MspInit+0xc4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	60bb      	str	r3, [r7, #8]
 8002140:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002142:	23c0      	movs	r3, #192	@ 0xc0
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002152:	2305      	movs	r3, #5
 8002154:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	480d      	ldr	r0, [pc, #52]	@ (8002194 <HAL_SPI_MspInit+0xc8>)
 800215e:	f000 fbc9 	bl	80028f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002162:	2308      	movs	r3, #8
 8002164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002172:	2305      	movs	r3, #5
 8002174:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	4619      	mov	r1, r3
 800217c:	4806      	ldr	r0, [pc, #24]	@ (8002198 <HAL_SPI_MspInit+0xcc>)
 800217e:	f000 fbb9 	bl	80028f4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002182:	bf00      	nop
 8002184:	3728      	adds	r7, #40	@ 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40013000 	.word	0x40013000
 8002190:	40023800 	.word	0x40023800
 8002194:	40020000 	.word	0x40020000
 8002198:	40020400 	.word	0x40020400

0800219c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a15      	ldr	r2, [pc, #84]	@ (8002200 <HAL_TIM_Base_MspInit+0x64>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d10e      	bne.n	80021cc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <HAL_TIM_Base_MspInit+0x68>)
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	4a13      	ldr	r2, [pc, #76]	@ (8002204 <HAL_TIM_Base_MspInit+0x68>)
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021be:	4b11      	ldr	r3, [pc, #68]	@ (8002204 <HAL_TIM_Base_MspInit+0x68>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	f003 0301 	and.w	r3, r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021ca:	e012      	b.n	80021f2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021d4:	d10d      	bne.n	80021f2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60bb      	str	r3, [r7, #8]
 80021da:	4b0a      	ldr	r3, [pc, #40]	@ (8002204 <HAL_TIM_Base_MspInit+0x68>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	4a09      	ldr	r2, [pc, #36]	@ (8002204 <HAL_TIM_Base_MspInit+0x68>)
 80021e0:	f043 0301 	orr.w	r3, r3, #1
 80021e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e6:	4b07      	ldr	r3, [pc, #28]	@ (8002204 <HAL_TIM_Base_MspInit+0x68>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40010000 	.word	0x40010000
 8002204:	40023800 	.word	0x40023800

08002208 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 030c 	add.w	r3, r7, #12
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002228:	d11d      	bne.n	8002266 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
 800222e:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <HAL_TIM_MspPostInit+0x68>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	4a0f      	ldr	r2, [pc, #60]	@ (8002270 <HAL_TIM_MspPostInit+0x68>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6313      	str	r3, [r2, #48]	@ 0x30
 800223a:	4b0d      	ldr	r3, [pc, #52]	@ (8002270 <HAL_TIM_MspPostInit+0x68>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002246:	2302      	movs	r3, #2
 8002248:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800224a:	2302      	movs	r3, #2
 800224c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224e:	2300      	movs	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002252:	2303      	movs	r3, #3
 8002254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002256:	2301      	movs	r3, #1
 8002258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800225a:	f107 030c 	add.w	r3, r7, #12
 800225e:	4619      	mov	r1, r3
 8002260:	4804      	ldr	r0, [pc, #16]	@ (8002274 <HAL_TIM_MspPostInit+0x6c>)
 8002262:	f000 fb47 	bl	80028f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002266:	bf00      	nop
 8002268:	3720      	adds	r7, #32
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40023800 	.word	0x40023800
 8002274:	40020000 	.word	0x40020000

08002278 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	@ 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a1d      	ldr	r2, [pc, #116]	@ (800230c <HAL_UART_MspInit+0x94>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d133      	bne.n	8002302 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	4b1c      	ldr	r3, [pc, #112]	@ (8002310 <HAL_UART_MspInit+0x98>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	4a1b      	ldr	r2, [pc, #108]	@ (8002310 <HAL_UART_MspInit+0x98>)
 80022a4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80022aa:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <HAL_UART_MspInit+0x98>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	4b15      	ldr	r3, [pc, #84]	@ (8002310 <HAL_UART_MspInit+0x98>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022be:	4a14      	ldr	r2, [pc, #80]	@ (8002310 <HAL_UART_MspInit+0x98>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022c6:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <HAL_UART_MspInit+0x98>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022d2:	230c      	movs	r3, #12
 80022d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022de:	2303      	movs	r3, #3
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022e2:	2307      	movs	r3, #7
 80022e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	4809      	ldr	r0, [pc, #36]	@ (8002314 <HAL_UART_MspInit+0x9c>)
 80022ee:	f000 fb01 	bl	80028f4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	2026      	movs	r0, #38	@ 0x26
 80022f8:	f000 fa33 	bl	8002762 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022fc:	2026      	movs	r0, #38	@ 0x26
 80022fe:	f000 fa4c 	bl	800279a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8002302:	bf00      	nop
 8002304:	3728      	adds	r7, #40	@ 0x28
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40004400 	.word	0x40004400
 8002310:	40023800 	.word	0x40023800
 8002314:	40020000 	.word	0x40020000

08002318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800231c:	bf00      	nop
 800231e:	e7fd      	b.n	800231c <NMI_Handler+0x4>

08002320 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002324:	bf00      	nop
 8002326:	e7fd      	b.n	8002324 <HardFault_Handler+0x4>

08002328 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800232c:	bf00      	nop
 800232e:	e7fd      	b.n	800232c <MemManage_Handler+0x4>

08002330 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002334:	bf00      	nop
 8002336:	e7fd      	b.n	8002334 <BusFault_Handler+0x4>

08002338 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800233c:	bf00      	nop
 800233e:	e7fd      	b.n	800233c <UsageFault_Handler+0x4>

08002340 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800236e:	f000 f8d9 	bl	8002524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002372:	bf00      	nop
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800237c:	4802      	ldr	r0, [pc, #8]	@ (8002388 <USART2_IRQHandler+0x10>)
 800237e:	f003 f82b 	bl	80053d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	200001c0 	.word	0x200001c0

0800238c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002390:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002394:	f000 fc64 	bl	8002c60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	bd80      	pop	{r7, pc}

0800239c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b086      	sub	sp, #24
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023a4:	4a14      	ldr	r2, [pc, #80]	@ (80023f8 <_sbrk+0x5c>)
 80023a6:	4b15      	ldr	r3, [pc, #84]	@ (80023fc <_sbrk+0x60>)
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023b0:	4b13      	ldr	r3, [pc, #76]	@ (8002400 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d102      	bne.n	80023be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023b8:	4b11      	ldr	r3, [pc, #68]	@ (8002400 <_sbrk+0x64>)
 80023ba:	4a12      	ldr	r2, [pc, #72]	@ (8002404 <_sbrk+0x68>)
 80023bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023be:	4b10      	ldr	r3, [pc, #64]	@ (8002400 <_sbrk+0x64>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4413      	add	r3, r2
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d207      	bcs.n	80023dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023cc:	f003 ff66 	bl	800629c <__errno>
 80023d0:	4603      	mov	r3, r0
 80023d2:	220c      	movs	r2, #12
 80023d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023d6:	f04f 33ff 	mov.w	r3, #4294967295
 80023da:	e009      	b.n	80023f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <_sbrk+0x64>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023e2:	4b07      	ldr	r3, [pc, #28]	@ (8002400 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	4a05      	ldr	r2, [pc, #20]	@ (8002400 <_sbrk+0x64>)
 80023ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ee:	68fb      	ldr	r3, [r7, #12]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	20020000 	.word	0x20020000
 80023fc:	00000400 	.word	0x00000400
 8002400:	20000278 	.word	0x20000278
 8002404:	200003c8 	.word	0x200003c8

08002408 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800240c:	4b06      	ldr	r3, [pc, #24]	@ (8002428 <SystemInit+0x20>)
 800240e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002412:	4a05      	ldr	r2, [pc, #20]	@ (8002428 <SystemInit+0x20>)
 8002414:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002418:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800241c:	bf00      	nop
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000ed00 	.word	0xe000ed00

0800242c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800242c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002464 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002430:	f7ff ffea 	bl	8002408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002434:	480c      	ldr	r0, [pc, #48]	@ (8002468 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002436:	490d      	ldr	r1, [pc, #52]	@ (800246c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002438:	4a0d      	ldr	r2, [pc, #52]	@ (8002470 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800243c:	e002      	b.n	8002444 <LoopCopyDataInit>

0800243e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800243e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002440:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002442:	3304      	adds	r3, #4

08002444 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002444:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002446:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002448:	d3f9      	bcc.n	800243e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244a:	4a0a      	ldr	r2, [pc, #40]	@ (8002474 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800244c:	4c0a      	ldr	r4, [pc, #40]	@ (8002478 <LoopFillZerobss+0x22>)
  movs r3, #0
 800244e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002450:	e001      	b.n	8002456 <LoopFillZerobss>

08002452 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002452:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002454:	3204      	adds	r2, #4

08002456 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002456:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002458:	d3fb      	bcc.n	8002452 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800245a:	f003 ff25 	bl	80062a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800245e:	f7ff fa03 	bl	8001868 <main>
  bx  lr    
 8002462:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002464:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002468:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800246c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002470:	08006cb4 	.word	0x08006cb4
  ldr r2, =_sbss
 8002474:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002478:	200003c8 	.word	0x200003c8

0800247c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800247c:	e7fe      	b.n	800247c <ADC_IRQHandler>
	...

08002480 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002484:	4b0e      	ldr	r3, [pc, #56]	@ (80024c0 <HAL_Init+0x40>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a0d      	ldr	r2, [pc, #52]	@ (80024c0 <HAL_Init+0x40>)
 800248a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800248e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002490:	4b0b      	ldr	r3, [pc, #44]	@ (80024c0 <HAL_Init+0x40>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a0a      	ldr	r2, [pc, #40]	@ (80024c0 <HAL_Init+0x40>)
 8002496:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800249a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800249c:	4b08      	ldr	r3, [pc, #32]	@ (80024c0 <HAL_Init+0x40>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a07      	ldr	r2, [pc, #28]	@ (80024c0 <HAL_Init+0x40>)
 80024a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024a8:	2003      	movs	r0, #3
 80024aa:	f000 f94f 	bl	800274c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ae:	2000      	movs	r0, #0
 80024b0:	f000 f808 	bl	80024c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024b4:	f7ff fd88 	bl	8001fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	40023c00 	.word	0x40023c00

080024c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024cc:	4b12      	ldr	r3, [pc, #72]	@ (8002518 <HAL_InitTick+0x54>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	4b12      	ldr	r3, [pc, #72]	@ (800251c <HAL_InitTick+0x58>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	4619      	mov	r1, r3
 80024d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024da:	fbb3 f3f1 	udiv	r3, r3, r1
 80024de:	fbb2 f3f3 	udiv	r3, r2, r3
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 f967 	bl	80027b6 <HAL_SYSTICK_Config>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e00e      	b.n	8002510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2b0f      	cmp	r3, #15
 80024f6:	d80a      	bhi.n	800250e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024f8:	2200      	movs	r2, #0
 80024fa:	6879      	ldr	r1, [r7, #4]
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002500:	f000 f92f 	bl	8002762 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002504:	4a06      	ldr	r2, [pc, #24]	@ (8002520 <HAL_InitTick+0x5c>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800250a:	2300      	movs	r3, #0
 800250c:	e000      	b.n	8002510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
}
 8002510:	4618      	mov	r0, r3
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	2000000c 	.word	0x2000000c
 800251c:	20000014 	.word	0x20000014
 8002520:	20000010 	.word	0x20000010

08002524 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002528:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <HAL_IncTick+0x20>)
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	461a      	mov	r2, r3
 800252e:	4b06      	ldr	r3, [pc, #24]	@ (8002548 <HAL_IncTick+0x24>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4413      	add	r3, r2
 8002534:	4a04      	ldr	r2, [pc, #16]	@ (8002548 <HAL_IncTick+0x24>)
 8002536:	6013      	str	r3, [r2, #0]
}
 8002538:	bf00      	nop
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	20000014 	.word	0x20000014
 8002548:	2000027c 	.word	0x2000027c

0800254c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  return uwTick;
 8002550:	4b03      	ldr	r3, [pc, #12]	@ (8002560 <HAL_GetTick+0x14>)
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	2000027c 	.word	0x2000027c

08002564 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800256c:	f7ff ffee 	bl	800254c <HAL_GetTick>
 8002570:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800257c:	d005      	beq.n	800258a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800257e:	4b0a      	ldr	r3, [pc, #40]	@ (80025a8 <HAL_Delay+0x44>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	461a      	mov	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	4413      	add	r3, r2
 8002588:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800258a:	bf00      	nop
 800258c:	f7ff ffde 	bl	800254c <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	68fa      	ldr	r2, [r7, #12]
 8002598:	429a      	cmp	r2, r3
 800259a:	d8f7      	bhi.n	800258c <HAL_Delay+0x28>
  {
  }
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	20000014 	.word	0x20000014

080025ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025bc:	4b0c      	ldr	r3, [pc, #48]	@ (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025c2:	68ba      	ldr	r2, [r7, #8]
 80025c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025c8:	4013      	ands	r3, r2
 80025ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025de:	4a04      	ldr	r2, [pc, #16]	@ (80025f0 <__NVIC_SetPriorityGrouping+0x44>)
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	60d3      	str	r3, [r2, #12]
}
 80025e4:	bf00      	nop
 80025e6:	3714      	adds	r7, #20
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025f8:	4b04      	ldr	r3, [pc, #16]	@ (800260c <__NVIC_GetPriorityGrouping+0x18>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	f003 0307 	and.w	r3, r3, #7
}
 8002602:	4618      	mov	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800261e:	2b00      	cmp	r3, #0
 8002620:	db0b      	blt.n	800263a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	f003 021f 	and.w	r2, r3, #31
 8002628:	4907      	ldr	r1, [pc, #28]	@ (8002648 <__NVIC_EnableIRQ+0x38>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	095b      	lsrs	r3, r3, #5
 8002630:	2001      	movs	r0, #1
 8002632:	fa00 f202 	lsl.w	r2, r0, r2
 8002636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	e000e100 	.word	0xe000e100

0800264c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	6039      	str	r1, [r7, #0]
 8002656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	2b00      	cmp	r3, #0
 800265e:	db0a      	blt.n	8002676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	b2da      	uxtb	r2, r3
 8002664:	490c      	ldr	r1, [pc, #48]	@ (8002698 <__NVIC_SetPriority+0x4c>)
 8002666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266a:	0112      	lsls	r2, r2, #4
 800266c:	b2d2      	uxtb	r2, r2
 800266e:	440b      	add	r3, r1
 8002670:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002674:	e00a      	b.n	800268c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	b2da      	uxtb	r2, r3
 800267a:	4908      	ldr	r1, [pc, #32]	@ (800269c <__NVIC_SetPriority+0x50>)
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	3b04      	subs	r3, #4
 8002684:	0112      	lsls	r2, r2, #4
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	440b      	add	r3, r1
 800268a:	761a      	strb	r2, [r3, #24]
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	e000e100 	.word	0xe000e100
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b089      	sub	sp, #36	@ 0x24
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 0307 	and.w	r3, r3, #7
 80026b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	f1c3 0307 	rsb	r3, r3, #7
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	bf28      	it	cs
 80026be:	2304      	movcs	r3, #4
 80026c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	3304      	adds	r3, #4
 80026c6:	2b06      	cmp	r3, #6
 80026c8:	d902      	bls.n	80026d0 <NVIC_EncodePriority+0x30>
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	3b03      	subs	r3, #3
 80026ce:	e000      	b.n	80026d2 <NVIC_EncodePriority+0x32>
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	f04f 32ff 	mov.w	r2, #4294967295
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43da      	mvns	r2, r3
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	401a      	ands	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026e8:	f04f 31ff 	mov.w	r1, #4294967295
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	43d9      	mvns	r1, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026f8:	4313      	orrs	r3, r2
         );
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3724      	adds	r7, #36	@ 0x24
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
	...

08002708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3b01      	subs	r3, #1
 8002714:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002718:	d301      	bcc.n	800271e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800271a:	2301      	movs	r3, #1
 800271c:	e00f      	b.n	800273e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800271e:	4a0a      	ldr	r2, [pc, #40]	@ (8002748 <SysTick_Config+0x40>)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3b01      	subs	r3, #1
 8002724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002726:	210f      	movs	r1, #15
 8002728:	f04f 30ff 	mov.w	r0, #4294967295
 800272c:	f7ff ff8e 	bl	800264c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002730:	4b05      	ldr	r3, [pc, #20]	@ (8002748 <SysTick_Config+0x40>)
 8002732:	2200      	movs	r2, #0
 8002734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002736:	4b04      	ldr	r3, [pc, #16]	@ (8002748 <SysTick_Config+0x40>)
 8002738:	2207      	movs	r2, #7
 800273a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	e000e010 	.word	0xe000e010

0800274c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f7ff ff29 	bl	80025ac <__NVIC_SetPriorityGrouping>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002762:	b580      	push	{r7, lr}
 8002764:	b086      	sub	sp, #24
 8002766:	af00      	add	r7, sp, #0
 8002768:	4603      	mov	r3, r0
 800276a:	60b9      	str	r1, [r7, #8]
 800276c:	607a      	str	r2, [r7, #4]
 800276e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002774:	f7ff ff3e 	bl	80025f4 <__NVIC_GetPriorityGrouping>
 8002778:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	68b9      	ldr	r1, [r7, #8]
 800277e:	6978      	ldr	r0, [r7, #20]
 8002780:	f7ff ff8e 	bl	80026a0 <NVIC_EncodePriority>
 8002784:	4602      	mov	r2, r0
 8002786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f7ff ff5d 	bl	800264c <__NVIC_SetPriority>
}
 8002792:	bf00      	nop
 8002794:	3718      	adds	r7, #24
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	4603      	mov	r3, r0
 80027a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff ff31 	bl	8002610 <__NVIC_EnableIRQ>
}
 80027ae:	bf00      	nop
 80027b0:	3708      	adds	r7, #8
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027b6:	b580      	push	{r7, lr}
 80027b8:	b082      	sub	sp, #8
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7ff ffa2 	bl	8002708 <SysTick_Config>
 80027c4:	4603      	mov	r3, r0
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b084      	sub	sp, #16
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027dc:	f7ff feb6 	bl	800254c <HAL_GetTick>
 80027e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d008      	beq.n	8002800 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2280      	movs	r2, #128	@ 0x80
 80027f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e052      	b.n	80028a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f022 0216 	bic.w	r2, r2, #22
 800280e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	695a      	ldr	r2, [r3, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800281e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002824:	2b00      	cmp	r3, #0
 8002826:	d103      	bne.n	8002830 <HAL_DMA_Abort+0x62>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0208 	bic.w	r2, r2, #8
 800283e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002850:	e013      	b.n	800287a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002852:	f7ff fe7b 	bl	800254c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b05      	cmp	r3, #5
 800285e:	d90c      	bls.n	800287a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2220      	movs	r2, #32
 8002864:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2203      	movs	r2, #3
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	e015      	b.n	80028a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1e4      	bne.n	8002852 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800288c:	223f      	movs	r2, #63	@ 0x3f
 800288e:	409a      	lsls	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028ae:	b480      	push	{r7}
 80028b0:	b083      	sub	sp, #12
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d004      	beq.n	80028cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2280      	movs	r2, #128	@ 0x80
 80028c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e00c      	b.n	80028e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2205      	movs	r2, #5
 80028d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0201 	bic.w	r2, r2, #1
 80028e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b089      	sub	sp, #36	@ 0x24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028fe:	2300      	movs	r3, #0
 8002900:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002902:	2300      	movs	r3, #0
 8002904:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002906:	2300      	movs	r3, #0
 8002908:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	e159      	b.n	8002bc4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002910:	2201      	movs	r2, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	4013      	ands	r3, r2
 8002922:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	429a      	cmp	r2, r3
 800292a:	f040 8148 	bne.w	8002bbe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f003 0303 	and.w	r3, r3, #3
 8002936:	2b01      	cmp	r3, #1
 8002938:	d005      	beq.n	8002946 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002942:	2b02      	cmp	r3, #2
 8002944:	d130      	bne.n	80029a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	2203      	movs	r2, #3
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	005b      	lsls	r3, r3, #1
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800297c:	2201      	movs	r2, #1
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	fa02 f303 	lsl.w	r3, r2, r3
 8002984:	43db      	mvns	r3, r3
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4013      	ands	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 0201 	and.w	r2, r3, #1
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	69ba      	ldr	r2, [r7, #24]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f003 0303 	and.w	r3, r3, #3
 80029b0:	2b03      	cmp	r3, #3
 80029b2:	d017      	beq.n	80029e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	69ba      	ldr	r2, [r7, #24]
 80029e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d123      	bne.n	8002a38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	08da      	lsrs	r2, r3, #3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	3208      	adds	r2, #8
 80029f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	f003 0307 	and.w	r3, r3, #7
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	220f      	movs	r2, #15
 8002a08:	fa02 f303 	lsl.w	r3, r2, r3
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	691a      	ldr	r2, [r3, #16]
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	08da      	lsrs	r2, r3, #3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3208      	adds	r2, #8
 8002a32:	69b9      	ldr	r1, [r7, #24]
 8002a34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	2203      	movs	r2, #3
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0203 	and.w	r2, r3, #3
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 80a2 	beq.w	8002bbe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60fb      	str	r3, [r7, #12]
 8002a7e:	4b57      	ldr	r3, [pc, #348]	@ (8002bdc <HAL_GPIO_Init+0x2e8>)
 8002a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a82:	4a56      	ldr	r2, [pc, #344]	@ (8002bdc <HAL_GPIO_Init+0x2e8>)
 8002a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a8a:	4b54      	ldr	r3, [pc, #336]	@ (8002bdc <HAL_GPIO_Init+0x2e8>)
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a96:	4a52      	ldr	r2, [pc, #328]	@ (8002be0 <HAL_GPIO_Init+0x2ec>)
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	089b      	lsrs	r3, r3, #2
 8002a9c:	3302      	adds	r3, #2
 8002a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	220f      	movs	r2, #15
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a49      	ldr	r2, [pc, #292]	@ (8002be4 <HAL_GPIO_Init+0x2f0>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d019      	beq.n	8002af6 <HAL_GPIO_Init+0x202>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a48      	ldr	r2, [pc, #288]	@ (8002be8 <HAL_GPIO_Init+0x2f4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d013      	beq.n	8002af2 <HAL_GPIO_Init+0x1fe>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a47      	ldr	r2, [pc, #284]	@ (8002bec <HAL_GPIO_Init+0x2f8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00d      	beq.n	8002aee <HAL_GPIO_Init+0x1fa>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a46      	ldr	r2, [pc, #280]	@ (8002bf0 <HAL_GPIO_Init+0x2fc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d007      	beq.n	8002aea <HAL_GPIO_Init+0x1f6>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a45      	ldr	r2, [pc, #276]	@ (8002bf4 <HAL_GPIO_Init+0x300>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d101      	bne.n	8002ae6 <HAL_GPIO_Init+0x1f2>
 8002ae2:	2304      	movs	r3, #4
 8002ae4:	e008      	b.n	8002af8 <HAL_GPIO_Init+0x204>
 8002ae6:	2307      	movs	r3, #7
 8002ae8:	e006      	b.n	8002af8 <HAL_GPIO_Init+0x204>
 8002aea:	2303      	movs	r3, #3
 8002aec:	e004      	b.n	8002af8 <HAL_GPIO_Init+0x204>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e002      	b.n	8002af8 <HAL_GPIO_Init+0x204>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <HAL_GPIO_Init+0x204>
 8002af6:	2300      	movs	r3, #0
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	f002 0203 	and.w	r2, r2, #3
 8002afe:	0092      	lsls	r2, r2, #2
 8002b00:	4093      	lsls	r3, r2
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b08:	4935      	ldr	r1, [pc, #212]	@ (8002be0 <HAL_GPIO_Init+0x2ec>)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	089b      	lsrs	r3, r3, #2
 8002b0e:	3302      	adds	r3, #2
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b16:	4b38      	ldr	r3, [pc, #224]	@ (8002bf8 <HAL_GPIO_Init+0x304>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8002bf8 <HAL_GPIO_Init+0x304>)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b40:	4b2d      	ldr	r3, [pc, #180]	@ (8002bf8 <HAL_GPIO_Init+0x304>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b64:	4a24      	ldr	r2, [pc, #144]	@ (8002bf8 <HAL_GPIO_Init+0x304>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b6a:	4b23      	ldr	r3, [pc, #140]	@ (8002bf8 <HAL_GPIO_Init+0x304>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8002bf8 <HAL_GPIO_Init+0x304>)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b94:	4b18      	ldr	r3, [pc, #96]	@ (8002bf8 <HAL_GPIO_Init+0x304>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bb8:	4a0f      	ldr	r2, [pc, #60]	@ (8002bf8 <HAL_GPIO_Init+0x304>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b0f      	cmp	r3, #15
 8002bc8:	f67f aea2 	bls.w	8002910 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	3724      	adds	r7, #36	@ 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40013800 	.word	0x40013800
 8002be4:	40020000 	.word	0x40020000
 8002be8:	40020400 	.word	0x40020400
 8002bec:	40020800 	.word	0x40020800
 8002bf0:	40020c00 	.word	0x40020c00
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40013c00 	.word	0x40013c00

08002bfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	460b      	mov	r3, r1
 8002c06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	691a      	ldr	r2, [r3, #16]
 8002c0c:	887b      	ldrh	r3, [r7, #2]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d002      	beq.n	8002c1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
 8002c18:	e001      	b.n	8002c1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3714      	adds	r7, #20
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	460b      	mov	r3, r1
 8002c36:	807b      	strh	r3, [r7, #2]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c3c:	787b      	ldrb	r3, [r7, #1]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c42:	887a      	ldrh	r2, [r7, #2]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c48:	e003      	b.n	8002c52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c4a:	887b      	ldrh	r3, [r7, #2]
 8002c4c:	041a      	lsls	r2, r3, #16
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	619a      	str	r2, [r3, #24]
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c6a:	4b08      	ldr	r3, [pc, #32]	@ (8002c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c6c:	695a      	ldr	r2, [r3, #20]
 8002c6e:	88fb      	ldrh	r3, [r7, #6]
 8002c70:	4013      	ands	r3, r2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d006      	beq.n	8002c84 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c76:	4a05      	ldr	r2, [pc, #20]	@ (8002c8c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c78:	88fb      	ldrh	r3, [r7, #6]
 8002c7a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fe fca2 	bl	80015c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c84:	bf00      	nop
 8002c86:	3708      	adds	r7, #8
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40013c00 	.word	0x40013c00

08002c90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e12b      	b.n	8002efa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d106      	bne.n	8002cbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7ff f9ae 	bl	8002018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2224      	movs	r2, #36	@ 0x24
 8002cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 0201 	bic.w	r2, r2, #1
 8002cd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ce2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002cf2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002cf4:	f001 f8da 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 8002cf8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	4a81      	ldr	r2, [pc, #516]	@ (8002f04 <HAL_I2C_Init+0x274>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d807      	bhi.n	8002d14 <HAL_I2C_Init+0x84>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	4a80      	ldr	r2, [pc, #512]	@ (8002f08 <HAL_I2C_Init+0x278>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	bf94      	ite	ls
 8002d0c:	2301      	movls	r3, #1
 8002d0e:	2300      	movhi	r3, #0
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	e006      	b.n	8002d22 <HAL_I2C_Init+0x92>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4a7d      	ldr	r2, [pc, #500]	@ (8002f0c <HAL_I2C_Init+0x27c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	bf94      	ite	ls
 8002d1c:	2301      	movls	r3, #1
 8002d1e:	2300      	movhi	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e0e7      	b.n	8002efa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4a78      	ldr	r2, [pc, #480]	@ (8002f10 <HAL_I2C_Init+0x280>)
 8002d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d32:	0c9b      	lsrs	r3, r3, #18
 8002d34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6a1b      	ldr	r3, [r3, #32]
 8002d50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	4a6a      	ldr	r2, [pc, #424]	@ (8002f04 <HAL_I2C_Init+0x274>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d802      	bhi.n	8002d64 <HAL_I2C_Init+0xd4>
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	3301      	adds	r3, #1
 8002d62:	e009      	b.n	8002d78 <HAL_I2C_Init+0xe8>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002d6a:	fb02 f303 	mul.w	r3, r2, r3
 8002d6e:	4a69      	ldr	r2, [pc, #420]	@ (8002f14 <HAL_I2C_Init+0x284>)
 8002d70:	fba2 2303 	umull	r2, r3, r2, r3
 8002d74:	099b      	lsrs	r3, r3, #6
 8002d76:	3301      	adds	r3, #1
 8002d78:	687a      	ldr	r2, [r7, #4]
 8002d7a:	6812      	ldr	r2, [r2, #0]
 8002d7c:	430b      	orrs	r3, r1
 8002d7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002d8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	495c      	ldr	r1, [pc, #368]	@ (8002f04 <HAL_I2C_Init+0x274>)
 8002d94:	428b      	cmp	r3, r1
 8002d96:	d819      	bhi.n	8002dcc <HAL_I2C_Init+0x13c>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e59      	subs	r1, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002da6:	1c59      	adds	r1, r3, #1
 8002da8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002dac:	400b      	ands	r3, r1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00a      	beq.n	8002dc8 <HAL_I2C_Init+0x138>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1e59      	subs	r1, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	005b      	lsls	r3, r3, #1
 8002dbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dc6:	e051      	b.n	8002e6c <HAL_I2C_Init+0x1dc>
 8002dc8:	2304      	movs	r3, #4
 8002dca:	e04f      	b.n	8002e6c <HAL_I2C_Init+0x1dc>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d111      	bne.n	8002df8 <HAL_I2C_Init+0x168>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	1e58      	subs	r0, r3, #1
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6859      	ldr	r1, [r3, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	440b      	add	r3, r1
 8002de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	bf0c      	ite	eq
 8002df0:	2301      	moveq	r3, #1
 8002df2:	2300      	movne	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e012      	b.n	8002e1e <HAL_I2C_Init+0x18e>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	1e58      	subs	r0, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6859      	ldr	r1, [r3, #4]
 8002e00:	460b      	mov	r3, r1
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	440b      	add	r3, r1
 8002e06:	0099      	lsls	r1, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e0e:	3301      	adds	r3, #1
 8002e10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	bf0c      	ite	eq
 8002e18:	2301      	moveq	r3, #1
 8002e1a:	2300      	movne	r3, #0
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <HAL_I2C_Init+0x196>
 8002e22:	2301      	movs	r3, #1
 8002e24:	e022      	b.n	8002e6c <HAL_I2C_Init+0x1dc>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d10e      	bne.n	8002e4c <HAL_I2C_Init+0x1bc>
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	1e58      	subs	r0, r3, #1
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	460b      	mov	r3, r1
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	440b      	add	r3, r1
 8002e3c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e40:	3301      	adds	r3, #1
 8002e42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002e4a:	e00f      	b.n	8002e6c <HAL_I2C_Init+0x1dc>
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	1e58      	subs	r0, r3, #1
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	0099      	lsls	r1, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e62:	3301      	adds	r3, #1
 8002e64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e68:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002e6c:	6879      	ldr	r1, [r7, #4]
 8002e6e:	6809      	ldr	r1, [r1, #0]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69da      	ldr	r2, [r3, #28]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a1b      	ldr	r3, [r3, #32]
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	430a      	orrs	r2, r1
 8002e8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002e9a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6911      	ldr	r1, [r2, #16]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	68d2      	ldr	r2, [r2, #12]
 8002ea6:	4311      	orrs	r1, r2
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6812      	ldr	r2, [r2, #0]
 8002eac:	430b      	orrs	r3, r1
 8002eae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695a      	ldr	r2, [r3, #20]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	000186a0 	.word	0x000186a0
 8002f08:	001e847f 	.word	0x001e847f
 8002f0c:	003d08ff 	.word	0x003d08ff
 8002f10:	431bde83 	.word	0x431bde83
 8002f14:	10624dd3 	.word	0x10624dd3

08002f18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b088      	sub	sp, #32
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	607a      	str	r2, [r7, #4]
 8002f22:	461a      	mov	r2, r3
 8002f24:	460b      	mov	r3, r1
 8002f26:	817b      	strh	r3, [r7, #10]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f2c:	f7ff fb0e 	bl	800254c <HAL_GetTick>
 8002f30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	2b20      	cmp	r3, #32
 8002f3c:	f040 80e0 	bne.w	8003100 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	2319      	movs	r3, #25
 8002f46:	2201      	movs	r2, #1
 8002f48:	4970      	ldr	r1, [pc, #448]	@ (800310c <HAL_I2C_Master_Transmit+0x1f4>)
 8002f4a:	68f8      	ldr	r0, [r7, #12]
 8002f4c:	f000 f964 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
 8002f58:	e0d3      	b.n	8003102 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d101      	bne.n	8002f68 <HAL_I2C_Master_Transmit+0x50>
 8002f64:	2302      	movs	r3, #2
 8002f66:	e0cc      	b.n	8003102 <HAL_I2C_Master_Transmit+0x1ea>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0301 	and.w	r3, r3, #1
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d007      	beq.n	8002f8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f042 0201 	orr.w	r2, r2, #1
 8002f8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	2221      	movs	r2, #33	@ 0x21
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	2210      	movs	r2, #16
 8002faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	893a      	ldrh	r2, [r7, #8]
 8002fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4a50      	ldr	r2, [pc, #320]	@ (8003110 <HAL_I2C_Master_Transmit+0x1f8>)
 8002fce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002fd0:	8979      	ldrh	r1, [r7, #10]
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	6a3a      	ldr	r2, [r7, #32]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f000 f89c 	bl	8003114 <I2C_MasterRequestWrite>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e08d      	b.n	8003102 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	613b      	str	r3, [r7, #16]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695b      	ldr	r3, [r3, #20]
 8002ff0:	613b      	str	r3, [r7, #16]
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	613b      	str	r3, [r7, #16]
 8002ffa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002ffc:	e066      	b.n	80030cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	6a39      	ldr	r1, [r7, #32]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f000 fa22 	bl	800344c <I2C_WaitOnTXEFlagUntilTimeout>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00d      	beq.n	800302a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003012:	2b04      	cmp	r3, #4
 8003014:	d107      	bne.n	8003026 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003024:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e06b      	b.n	8003102 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003052:	3b01      	subs	r3, #1
 8003054:	b29a      	uxth	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b04      	cmp	r3, #4
 8003066:	d11b      	bne.n	80030a0 <HAL_I2C_Master_Transmit+0x188>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800306c:	2b00      	cmp	r3, #0
 800306e:	d017      	beq.n	80030a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003074:	781a      	ldrb	r2, [r3, #0]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308a:	b29b      	uxth	r3, r3
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	6a39      	ldr	r1, [r7, #32]
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 fa19 	bl	80034dc <I2C_WaitOnBTFFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d00d      	beq.n	80030cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d107      	bne.n	80030c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e01a      	b.n	8003102 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d194      	bne.n	8002ffe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80030e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80030fc:	2300      	movs	r3, #0
 80030fe:	e000      	b.n	8003102 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003100:	2302      	movs	r3, #2
  }
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	00100002 	.word	0x00100002
 8003110:	ffff0000 	.word	0xffff0000

08003114 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	607a      	str	r2, [r7, #4]
 800311e:	603b      	str	r3, [r7, #0]
 8003120:	460b      	mov	r3, r1
 8003122:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003128:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	2b08      	cmp	r3, #8
 800312e:	d006      	beq.n	800313e <I2C_MasterRequestWrite+0x2a>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d003      	beq.n	800313e <I2C_MasterRequestWrite+0x2a>
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800313c:	d108      	bne.n	8003150 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e00b      	b.n	8003168 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003154:	2b12      	cmp	r3, #18
 8003156:	d107      	bne.n	8003168 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003166:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f84f 	bl	8003218 <I2C_WaitOnFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00d      	beq.n	800319c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800318a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800318e:	d103      	bne.n	8003198 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003196:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e035      	b.n	8003208 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031a4:	d108      	bne.n	80031b8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80031a6:	897b      	ldrh	r3, [r7, #10]
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80031b4:	611a      	str	r2, [r3, #16]
 80031b6:	e01b      	b.n	80031f0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80031b8:	897b      	ldrh	r3, [r7, #10]
 80031ba:	11db      	asrs	r3, r3, #7
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f003 0306 	and.w	r3, r3, #6
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f063 030f 	orn	r3, r3, #15
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	490e      	ldr	r1, [pc, #56]	@ (8003210 <I2C_MasterRequestWrite+0xfc>)
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 f898 	bl	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e010      	b.n	8003208 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80031e6:	897b      	ldrh	r3, [r7, #10]
 80031e8:	b2da      	uxtb	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4907      	ldr	r1, [pc, #28]	@ (8003214 <I2C_MasterRequestWrite+0x100>)
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f888 	bl	800330c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003206:	2300      	movs	r3, #0
}
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	00010008 	.word	0x00010008
 8003214:	00010002 	.word	0x00010002

08003218 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	60f8      	str	r0, [r7, #12]
 8003220:	60b9      	str	r1, [r7, #8]
 8003222:	603b      	str	r3, [r7, #0]
 8003224:	4613      	mov	r3, r2
 8003226:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003228:	e048      	b.n	80032bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003230:	d044      	beq.n	80032bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003232:	f7ff f98b 	bl	800254c <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d302      	bcc.n	8003248 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d139      	bne.n	80032bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	0c1b      	lsrs	r3, r3, #16
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d10d      	bne.n	800326e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	43da      	mvns	r2, r3
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	4013      	ands	r3, r2
 800325e:	b29b      	uxth	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	bf0c      	ite	eq
 8003264:	2301      	moveq	r3, #1
 8003266:	2300      	movne	r3, #0
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	e00c      	b.n	8003288 <I2C_WaitOnFlagUntilTimeout+0x70>
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	699b      	ldr	r3, [r3, #24]
 8003274:	43da      	mvns	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	4013      	ands	r3, r2
 800327a:	b29b      	uxth	r3, r3
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf0c      	ite	eq
 8003280:	2301      	moveq	r3, #1
 8003282:	2300      	movne	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	429a      	cmp	r2, r3
 800328c:	d116      	bne.n	80032bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2200      	movs	r2, #0
 8003292:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a8:	f043 0220 	orr.w	r2, r3, #32
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e023      	b.n	8003304 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	0c1b      	lsrs	r3, r3, #16
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d10d      	bne.n	80032e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	43da      	mvns	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4013      	ands	r3, r2
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	bf0c      	ite	eq
 80032d8:	2301      	moveq	r3, #1
 80032da:	2300      	movne	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	461a      	mov	r2, r3
 80032e0:	e00c      	b.n	80032fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	43da      	mvns	r2, r3
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	4013      	ands	r3, r2
 80032ee:	b29b      	uxth	r3, r3
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	bf0c      	ite	eq
 80032f4:	2301      	moveq	r3, #1
 80032f6:	2300      	movne	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	461a      	mov	r2, r3
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d093      	beq.n	800322a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800331a:	e071      	b.n	8003400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003326:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800332a:	d123      	bne.n	8003374 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800333a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003344:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2220      	movs	r2, #32
 8003350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003360:	f043 0204 	orr.w	r2, r3, #4
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e067      	b.n	8003444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800337a:	d041      	beq.n	8003400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337c:	f7ff f8e6 	bl	800254c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	429a      	cmp	r2, r3
 800338a:	d302      	bcc.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d136      	bne.n	8003400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	0c1b      	lsrs	r3, r3, #16
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b01      	cmp	r3, #1
 800339a:	d10c      	bne.n	80033b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	43da      	mvns	r2, r3
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	4013      	ands	r3, r2
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf14      	ite	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	2300      	moveq	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	e00b      	b.n	80033ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	43da      	mvns	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf14      	ite	ne
 80033c8:	2301      	movne	r3, #1
 80033ca:	2300      	moveq	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d016      	beq.n	8003400 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2220      	movs	r2, #32
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	f043 0220 	orr.w	r2, r3, #32
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e021      	b.n	8003444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	0c1b      	lsrs	r3, r3, #16
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b01      	cmp	r3, #1
 8003408:	d10c      	bne.n	8003424 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	43da      	mvns	r2, r3
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	4013      	ands	r3, r2
 8003416:	b29b      	uxth	r3, r3
 8003418:	2b00      	cmp	r3, #0
 800341a:	bf14      	ite	ne
 800341c:	2301      	movne	r3, #1
 800341e:	2300      	moveq	r3, #0
 8003420:	b2db      	uxtb	r3, r3
 8003422:	e00b      	b.n	800343c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	43da      	mvns	r2, r3
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	4013      	ands	r3, r2
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	bf14      	ite	ne
 8003436:	2301      	movne	r3, #1
 8003438:	2300      	moveq	r3, #0
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	f47f af6d 	bne.w	800331c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003458:	e034      	b.n	80034c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f000 f886 	bl	800356c <I2C_IsAcknowledgeFailed>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e034      	b.n	80034d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003470:	d028      	beq.n	80034c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003472:	f7ff f86b 	bl	800254c <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	429a      	cmp	r2, r3
 8003480:	d302      	bcc.n	8003488 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d11d      	bne.n	80034c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003492:	2b80      	cmp	r3, #128	@ 0x80
 8003494:	d016      	beq.n	80034c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2220      	movs	r2, #32
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	f043 0220 	orr.w	r2, r3, #32
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e007      	b.n	80034d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ce:	2b80      	cmp	r3, #128	@ 0x80
 80034d0:	d1c3      	bne.n	800345a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	bd80      	pop	{r7, pc}

080034dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b084      	sub	sp, #16
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80034e8:	e034      	b.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 f83e 	bl	800356c <I2C_IsAcknowledgeFailed>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e034      	b.n	8003564 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003500:	d028      	beq.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003502:	f7ff f823 	bl	800254c <HAL_GetTick>
 8003506:	4602      	mov	r2, r0
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	1ad3      	subs	r3, r2, r3
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	d302      	bcc.n	8003518 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d11d      	bne.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	695b      	ldr	r3, [r3, #20]
 800351e:	f003 0304 	and.w	r3, r3, #4
 8003522:	2b04      	cmp	r3, #4
 8003524:	d016      	beq.n	8003554 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003540:	f043 0220 	orr.w	r2, r3, #32
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e007      	b.n	8003564 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	f003 0304 	and.w	r3, r3, #4
 800355e:	2b04      	cmp	r3, #4
 8003560:	d1c3      	bne.n	80034ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800357e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003582:	d11b      	bne.n	80035bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800358c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2220      	movs	r2, #32
 8003598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	f043 0204 	orr.w	r2, r3, #4
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2200      	movs	r2, #0
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e000      	b.n	80035be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
	...

080035cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d101      	bne.n	80035de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e267      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d075      	beq.n	80036d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035ea:	4b88      	ldr	r3, [pc, #544]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f003 030c 	and.w	r3, r3, #12
 80035f2:	2b04      	cmp	r3, #4
 80035f4:	d00c      	beq.n	8003610 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f6:	4b85      	ldr	r3, [pc, #532]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d112      	bne.n	8003628 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003602:	4b82      	ldr	r3, [pc, #520]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800360a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800360e:	d10b      	bne.n	8003628 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003610:	4b7e      	ldr	r3, [pc, #504]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d05b      	beq.n	80036d4 <HAL_RCC_OscConfig+0x108>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d157      	bne.n	80036d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e242      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003630:	d106      	bne.n	8003640 <HAL_RCC_OscConfig+0x74>
 8003632:	4b76      	ldr	r3, [pc, #472]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a75      	ldr	r2, [pc, #468]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e01d      	b.n	800367c <HAL_RCC_OscConfig+0xb0>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003648:	d10c      	bne.n	8003664 <HAL_RCC_OscConfig+0x98>
 800364a:	4b70      	ldr	r3, [pc, #448]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a6f      	ldr	r2, [pc, #444]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	4b6d      	ldr	r3, [pc, #436]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a6c      	ldr	r2, [pc, #432]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 800365c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	e00b      	b.n	800367c <HAL_RCC_OscConfig+0xb0>
 8003664:	4b69      	ldr	r3, [pc, #420]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a68      	ldr	r2, [pc, #416]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 800366a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800366e:	6013      	str	r3, [r2, #0]
 8003670:	4b66      	ldr	r3, [pc, #408]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a65      	ldr	r2, [pc, #404]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800367a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d013      	beq.n	80036ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003684:	f7fe ff62 	bl	800254c <HAL_GetTick>
 8003688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368a:	e008      	b.n	800369e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800368c:	f7fe ff5e 	bl	800254c <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	2b64      	cmp	r3, #100	@ 0x64
 8003698:	d901      	bls.n	800369e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e207      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	4b5b      	ldr	r3, [pc, #364]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d0f0      	beq.n	800368c <HAL_RCC_OscConfig+0xc0>
 80036aa:	e014      	b.n	80036d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ac:	f7fe ff4e 	bl	800254c <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80036b4:	f7fe ff4a 	bl	800254c <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b64      	cmp	r3, #100	@ 0x64
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e1f3      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c6:	4b51      	ldr	r3, [pc, #324]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0xe8>
 80036d2:	e000      	b.n	80036d6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d063      	beq.n	80037aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036e2:	4b4a      	ldr	r3, [pc, #296]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00b      	beq.n	8003706 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ee:	4b47      	ldr	r3, [pc, #284]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d11c      	bne.n	8003734 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036fa:	4b44      	ldr	r3, [pc, #272]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d116      	bne.n	8003734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003706:	4b41      	ldr	r3, [pc, #260]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_RCC_OscConfig+0x152>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d001      	beq.n	800371e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e1c7      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371e:	4b3b      	ldr	r3, [pc, #236]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	00db      	lsls	r3, r3, #3
 800372c:	4937      	ldr	r1, [pc, #220]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 800372e:	4313      	orrs	r3, r2
 8003730:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003732:	e03a      	b.n	80037aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d020      	beq.n	800377e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800373c:	4b34      	ldr	r3, [pc, #208]	@ (8003810 <HAL_RCC_OscConfig+0x244>)
 800373e:	2201      	movs	r2, #1
 8003740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003742:	f7fe ff03 	bl	800254c <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800374a:	f7fe feff 	bl	800254c <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e1a8      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375c:	4b2b      	ldr	r3, [pc, #172]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0302 	and.w	r3, r3, #2
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003768:	4b28      	ldr	r3, [pc, #160]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	00db      	lsls	r3, r3, #3
 8003776:	4925      	ldr	r1, [pc, #148]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 8003778:	4313      	orrs	r3, r2
 800377a:	600b      	str	r3, [r1, #0]
 800377c:	e015      	b.n	80037aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800377e:	4b24      	ldr	r3, [pc, #144]	@ (8003810 <HAL_RCC_OscConfig+0x244>)
 8003780:	2200      	movs	r2, #0
 8003782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003784:	f7fe fee2 	bl	800254c <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800378c:	f7fe fede 	bl	800254c <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e187      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379e:	4b1b      	ldr	r3, [pc, #108]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d1f0      	bne.n	800378c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0308 	and.w	r3, r3, #8
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d036      	beq.n	8003824 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d016      	beq.n	80037ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037be:	4b15      	ldr	r3, [pc, #84]	@ (8003814 <HAL_RCC_OscConfig+0x248>)
 80037c0:	2201      	movs	r2, #1
 80037c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c4:	f7fe fec2 	bl	800254c <HAL_GetTick>
 80037c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ca:	e008      	b.n	80037de <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037cc:	f7fe febe 	bl	800254c <HAL_GetTick>
 80037d0:	4602      	mov	r2, r0
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	2b02      	cmp	r3, #2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e167      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037de:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <HAL_RCC_OscConfig+0x240>)
 80037e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0f0      	beq.n	80037cc <HAL_RCC_OscConfig+0x200>
 80037ea:	e01b      	b.n	8003824 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037ec:	4b09      	ldr	r3, [pc, #36]	@ (8003814 <HAL_RCC_OscConfig+0x248>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f2:	f7fe feab 	bl	800254c <HAL_GetTick>
 80037f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037f8:	e00e      	b.n	8003818 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037fa:	f7fe fea7 	bl	800254c <HAL_GetTick>
 80037fe:	4602      	mov	r2, r0
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d907      	bls.n	8003818 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e150      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
 800380c:	40023800 	.word	0x40023800
 8003810:	42470000 	.word	0x42470000
 8003814:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003818:	4b88      	ldr	r3, [pc, #544]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 800381a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1ea      	bne.n	80037fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 8097 	beq.w	8003960 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003832:	2300      	movs	r3, #0
 8003834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003836:	4b81      	ldr	r3, [pc, #516]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10f      	bne.n	8003862 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003842:	2300      	movs	r3, #0
 8003844:	60bb      	str	r3, [r7, #8]
 8003846:	4b7d      	ldr	r3, [pc, #500]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 800384c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003850:	6413      	str	r3, [r2, #64]	@ 0x40
 8003852:	4b7a      	ldr	r3, [pc, #488]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003856:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800385a:	60bb      	str	r3, [r7, #8]
 800385c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800385e:	2301      	movs	r3, #1
 8003860:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003862:	4b77      	ldr	r3, [pc, #476]	@ (8003a40 <HAL_RCC_OscConfig+0x474>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386a:	2b00      	cmp	r3, #0
 800386c:	d118      	bne.n	80038a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800386e:	4b74      	ldr	r3, [pc, #464]	@ (8003a40 <HAL_RCC_OscConfig+0x474>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a73      	ldr	r2, [pc, #460]	@ (8003a40 <HAL_RCC_OscConfig+0x474>)
 8003874:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387a:	f7fe fe67 	bl	800254c <HAL_GetTick>
 800387e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003880:	e008      	b.n	8003894 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003882:	f7fe fe63 	bl	800254c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e10c      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003894:	4b6a      	ldr	r3, [pc, #424]	@ (8003a40 <HAL_RCC_OscConfig+0x474>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800389c:	2b00      	cmp	r3, #0
 800389e:	d0f0      	beq.n	8003882 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d106      	bne.n	80038b6 <HAL_RCC_OscConfig+0x2ea>
 80038a8:	4b64      	ldr	r3, [pc, #400]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ac:	4a63      	ldr	r2, [pc, #396]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038ae:	f043 0301 	orr.w	r3, r3, #1
 80038b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b4:	e01c      	b.n	80038f0 <HAL_RCC_OscConfig+0x324>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b05      	cmp	r3, #5
 80038bc:	d10c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x30c>
 80038be:	4b5f      	ldr	r3, [pc, #380]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038c2:	4a5e      	ldr	r2, [pc, #376]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038c4:	f043 0304 	orr.w	r3, r3, #4
 80038c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ca:	4b5c      	ldr	r3, [pc, #368]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ce:	4a5b      	ldr	r2, [pc, #364]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038d0:	f043 0301 	orr.w	r3, r3, #1
 80038d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038d6:	e00b      	b.n	80038f0 <HAL_RCC_OscConfig+0x324>
 80038d8:	4b58      	ldr	r3, [pc, #352]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038dc:	4a57      	ldr	r2, [pc, #348]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038de:	f023 0301 	bic.w	r3, r3, #1
 80038e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038e4:	4b55      	ldr	r3, [pc, #340]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e8:	4a54      	ldr	r2, [pc, #336]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80038ea:	f023 0304 	bic.w	r3, r3, #4
 80038ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d015      	beq.n	8003924 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fe fe28 	bl	800254c <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003900:	f7fe fe24 	bl	800254c <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e0cb      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003916:	4b49      	ldr	r3, [pc, #292]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0ee      	beq.n	8003900 <HAL_RCC_OscConfig+0x334>
 8003922:	e014      	b.n	800394e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003924:	f7fe fe12 	bl	800254c <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392a:	e00a      	b.n	8003942 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392c:	f7fe fe0e 	bl	800254c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e0b5      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003942:	4b3e      	ldr	r3, [pc, #248]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 8003944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1ee      	bne.n	800392c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800394e:	7dfb      	ldrb	r3, [r7, #23]
 8003950:	2b01      	cmp	r3, #1
 8003952:	d105      	bne.n	8003960 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003954:	4b39      	ldr	r3, [pc, #228]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 8003956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003958:	4a38      	ldr	r2, [pc, #224]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 800395a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800395e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 80a1 	beq.w	8003aac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800396a:	4b34      	ldr	r3, [pc, #208]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b08      	cmp	r3, #8
 8003974:	d05c      	beq.n	8003a30 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699b      	ldr	r3, [r3, #24]
 800397a:	2b02      	cmp	r3, #2
 800397c:	d141      	bne.n	8003a02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397e:	4b31      	ldr	r3, [pc, #196]	@ (8003a44 <HAL_RCC_OscConfig+0x478>)
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003984:	f7fe fde2 	bl	800254c <HAL_GetTick>
 8003988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398a:	e008      	b.n	800399e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398c:	f7fe fdde 	bl	800254c <HAL_GetTick>
 8003990:	4602      	mov	r2, r0
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	1ad3      	subs	r3, r2, r3
 8003996:	2b02      	cmp	r3, #2
 8003998:	d901      	bls.n	800399e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e087      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	4b27      	ldr	r3, [pc, #156]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1f0      	bne.n	800398c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b8:	019b      	lsls	r3, r3, #6
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	3b01      	subs	r3, #1
 80039c4:	041b      	lsls	r3, r3, #16
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039cc:	061b      	lsls	r3, r3, #24
 80039ce:	491b      	ldr	r1, [pc, #108]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a44 <HAL_RCC_OscConfig+0x478>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039da:	f7fe fdb7 	bl	800254c <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e0:	e008      	b.n	80039f4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e2:	f7fe fdb3 	bl	800254c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d901      	bls.n	80039f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	e05c      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f4:	4b11      	ldr	r3, [pc, #68]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0f0      	beq.n	80039e2 <HAL_RCC_OscConfig+0x416>
 8003a00:	e054      	b.n	8003aac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a02:	4b10      	ldr	r3, [pc, #64]	@ (8003a44 <HAL_RCC_OscConfig+0x478>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a08:	f7fe fda0 	bl	800254c <HAL_GetTick>
 8003a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0e:	e008      	b.n	8003a22 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a10:	f7fe fd9c 	bl	800254c <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d901      	bls.n	8003a22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a1e:	2303      	movs	r3, #3
 8003a20:	e045      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a22:	4b06      	ldr	r3, [pc, #24]	@ (8003a3c <HAL_RCC_OscConfig+0x470>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d1f0      	bne.n	8003a10 <HAL_RCC_OscConfig+0x444>
 8003a2e:	e03d      	b.n	8003aac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d107      	bne.n	8003a48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e038      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40007000 	.word	0x40007000
 8003a44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a48:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab8 <HAL_RCC_OscConfig+0x4ec>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d028      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d121      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d11a      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a78:	4013      	ands	r3, r2
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d111      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8e:	085b      	lsrs	r3, r3, #1
 8003a90:	3b01      	subs	r3, #1
 8003a92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d107      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40023800 	.word	0x40023800

08003abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0cc      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b68      	ldr	r3, [pc, #416]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d90c      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b65      	ldr	r3, [pc, #404]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b63      	ldr	r3, [pc, #396]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0b8      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b10:	4b59      	ldr	r3, [pc, #356]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4a58      	ldr	r2, [pc, #352]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b28:	4b53      	ldr	r3, [pc, #332]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4a52      	ldr	r2, [pc, #328]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b34:	4b50      	ldr	r3, [pc, #320]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	494d      	ldr	r1, [pc, #308]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d044      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d107      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b47      	ldr	r3, [pc, #284]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d119      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e07f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d003      	beq.n	8003b7a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d107      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e06f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e067      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9a:	4b37      	ldr	r3, [pc, #220]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f023 0203 	bic.w	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4934      	ldr	r1, [pc, #208]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bac:	f7fe fcce 	bl	800254c <HAL_GetTick>
 8003bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb2:	e00a      	b.n	8003bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb4:	f7fe fcca 	bl	800254c <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e04f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bca:	4b2b      	ldr	r3, [pc, #172]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 020c 	and.w	r2, r3, #12
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d1eb      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bdc:	4b25      	ldr	r3, [pc, #148]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d20c      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bea:	4b22      	ldr	r3, [pc, #136]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b20      	ldr	r3, [pc, #128]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e032      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c10:	4b19      	ldr	r3, [pc, #100]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4916      	ldr	r1, [pc, #88]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c2e:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	490e      	ldr	r1, [pc, #56]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c42:	f000 f821 	bl	8003c88 <HAL_RCC_GetSysClockFreq>
 8003c46:	4602      	mov	r2, r0
 8003c48:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	490a      	ldr	r1, [pc, #40]	@ (8003c7c <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	5ccb      	ldrb	r3, [r1, r3]
 8003c56:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5a:	4a09      	ldr	r2, [pc, #36]	@ (8003c80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c5e:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe fc2e 	bl	80024c4 <HAL_InitTick>

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40023c00 	.word	0x40023c00
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	08006c58 	.word	0x08006c58
 8003c80:	2000000c 	.word	0x2000000c
 8003c84:	20000010 	.word	0x20000010

08003c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c8c:	b094      	sub	sp, #80	@ 0x50
 8003c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c90:	2300      	movs	r3, #0
 8003c92:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003c98:	2300      	movs	r3, #0
 8003c9a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ca0:	4b79      	ldr	r3, [pc, #484]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f003 030c 	and.w	r3, r3, #12
 8003ca8:	2b08      	cmp	r3, #8
 8003caa:	d00d      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	f200 80e1 	bhi.w	8003e74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d002      	beq.n	8003cbc <HAL_RCC_GetSysClockFreq+0x34>
 8003cb6:	2b04      	cmp	r3, #4
 8003cb8:	d003      	beq.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cba:	e0db      	b.n	8003e74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cbc:	4b73      	ldr	r3, [pc, #460]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003cbe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cc0:	e0db      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cc2:	4b73      	ldr	r3, [pc, #460]	@ (8003e90 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cc4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cc6:	e0d8      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc8:	4b6f      	ldr	r3, [pc, #444]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cd0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cd2:	4b6d      	ldr	r3, [pc, #436]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d063      	beq.n	8003da6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cde:	4b6a      	ldr	r3, [pc, #424]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	099b      	lsrs	r3, r3, #6
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003ce8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cf6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003cfa:	4622      	mov	r2, r4
 8003cfc:	462b      	mov	r3, r5
 8003cfe:	f04f 0000 	mov.w	r0, #0
 8003d02:	f04f 0100 	mov.w	r1, #0
 8003d06:	0159      	lsls	r1, r3, #5
 8003d08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d0c:	0150      	lsls	r0, r2, #5
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4621      	mov	r1, r4
 8003d14:	1a51      	subs	r1, r2, r1
 8003d16:	6139      	str	r1, [r7, #16]
 8003d18:	4629      	mov	r1, r5
 8003d1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	f04f 0300 	mov.w	r3, #0
 8003d28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d2c:	4659      	mov	r1, fp
 8003d2e:	018b      	lsls	r3, r1, #6
 8003d30:	4651      	mov	r1, sl
 8003d32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d36:	4651      	mov	r1, sl
 8003d38:	018a      	lsls	r2, r1, #6
 8003d3a:	4651      	mov	r1, sl
 8003d3c:	ebb2 0801 	subs.w	r8, r2, r1
 8003d40:	4659      	mov	r1, fp
 8003d42:	eb63 0901 	sbc.w	r9, r3, r1
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d5a:	4690      	mov	r8, r2
 8003d5c:	4699      	mov	r9, r3
 8003d5e:	4623      	mov	r3, r4
 8003d60:	eb18 0303 	adds.w	r3, r8, r3
 8003d64:	60bb      	str	r3, [r7, #8]
 8003d66:	462b      	mov	r3, r5
 8003d68:	eb49 0303 	adc.w	r3, r9, r3
 8003d6c:	60fb      	str	r3, [r7, #12]
 8003d6e:	f04f 0200 	mov.w	r2, #0
 8003d72:	f04f 0300 	mov.w	r3, #0
 8003d76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	024b      	lsls	r3, r1, #9
 8003d7e:	4621      	mov	r1, r4
 8003d80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d84:	4621      	mov	r1, r4
 8003d86:	024a      	lsls	r2, r1, #9
 8003d88:	4610      	mov	r0, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d8e:	2200      	movs	r2, #0
 8003d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d92:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d98:	f7fc fe98 	bl	8000acc <__aeabi_uldivmod>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4613      	mov	r3, r2
 8003da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003da4:	e058      	b.n	8003e58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da6:	4b38      	ldr	r3, [pc, #224]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	099b      	lsrs	r3, r3, #6
 8003dac:	2200      	movs	r2, #0
 8003dae:	4618      	mov	r0, r3
 8003db0:	4611      	mov	r1, r2
 8003db2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003db6:	623b      	str	r3, [r7, #32]
 8003db8:	2300      	movs	r3, #0
 8003dba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dc0:	4642      	mov	r2, r8
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	f04f 0000 	mov.w	r0, #0
 8003dc8:	f04f 0100 	mov.w	r1, #0
 8003dcc:	0159      	lsls	r1, r3, #5
 8003dce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dd2:	0150      	lsls	r0, r2, #5
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4641      	mov	r1, r8
 8003dda:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dde:	4649      	mov	r1, r9
 8003de0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003de4:	f04f 0200 	mov.w	r2, #0
 8003de8:	f04f 0300 	mov.w	r3, #0
 8003dec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003df0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003df4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003df8:	ebb2 040a 	subs.w	r4, r2, sl
 8003dfc:	eb63 050b 	sbc.w	r5, r3, fp
 8003e00:	f04f 0200 	mov.w	r2, #0
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	00eb      	lsls	r3, r5, #3
 8003e0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e0e:	00e2      	lsls	r2, r4, #3
 8003e10:	4614      	mov	r4, r2
 8003e12:	461d      	mov	r5, r3
 8003e14:	4643      	mov	r3, r8
 8003e16:	18e3      	adds	r3, r4, r3
 8003e18:	603b      	str	r3, [r7, #0]
 8003e1a:	464b      	mov	r3, r9
 8003e1c:	eb45 0303 	adc.w	r3, r5, r3
 8003e20:	607b      	str	r3, [r7, #4]
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e2e:	4629      	mov	r1, r5
 8003e30:	028b      	lsls	r3, r1, #10
 8003e32:	4621      	mov	r1, r4
 8003e34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e38:	4621      	mov	r1, r4
 8003e3a:	028a      	lsls	r2, r1, #10
 8003e3c:	4610      	mov	r0, r2
 8003e3e:	4619      	mov	r1, r3
 8003e40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e42:	2200      	movs	r2, #0
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	61fa      	str	r2, [r7, #28]
 8003e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e4c:	f7fc fe3e 	bl	8000acc <__aeabi_uldivmod>
 8003e50:	4602      	mov	r2, r0
 8003e52:	460b      	mov	r3, r1
 8003e54:	4613      	mov	r3, r2
 8003e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e58:	4b0b      	ldr	r3, [pc, #44]	@ (8003e88 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	0c1b      	lsrs	r3, r3, #16
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	3301      	adds	r3, #1
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003e68:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e70:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e72:	e002      	b.n	8003e7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e74:	4b05      	ldr	r3, [pc, #20]	@ (8003e8c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3750      	adds	r7, #80	@ 0x50
 8003e80:	46bd      	mov	sp, r7
 8003e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e86:	bf00      	nop
 8003e88:	40023800 	.word	0x40023800
 8003e8c:	00f42400 	.word	0x00f42400
 8003e90:	007a1200 	.word	0x007a1200

08003e94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e98:	4b03      	ldr	r3, [pc, #12]	@ (8003ea8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr
 8003ea6:	bf00      	nop
 8003ea8:	2000000c 	.word	0x2000000c

08003eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003eb0:	f7ff fff0 	bl	8003e94 <HAL_RCC_GetHCLKFreq>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	4b05      	ldr	r3, [pc, #20]	@ (8003ecc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	0a9b      	lsrs	r3, r3, #10
 8003ebc:	f003 0307 	and.w	r3, r3, #7
 8003ec0:	4903      	ldr	r1, [pc, #12]	@ (8003ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ec2:	5ccb      	ldrb	r3, [r1, r3]
 8003ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	40023800 	.word	0x40023800
 8003ed0:	08006c68 	.word	0x08006c68

08003ed4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ed8:	f7ff ffdc 	bl	8003e94 <HAL_RCC_GetHCLKFreq>
 8003edc:	4602      	mov	r2, r0
 8003ede:	4b05      	ldr	r3, [pc, #20]	@ (8003ef4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	0b5b      	lsrs	r3, r3, #13
 8003ee4:	f003 0307 	and.w	r3, r3, #7
 8003ee8:	4903      	ldr	r1, [pc, #12]	@ (8003ef8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eea:	5ccb      	ldrb	r3, [r1, r3]
 8003eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	40023800 	.word	0x40023800
 8003ef8:	08006c68 	.word	0x08006c68

08003efc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e07b      	b.n	8004006 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d108      	bne.n	8003f28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f1e:	d009      	beq.n	8003f34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	61da      	str	r2, [r3, #28]
 8003f26:	e005      	b.n	8003f34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fe f8bc 	bl	80020cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003f86:	431a      	orrs	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	691b      	ldr	r3, [r3, #16]
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	431a      	orrs	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	431a      	orrs	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fa4:	431a      	orrs	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fb8:	ea42 0103 	orr.w	r1, r2, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	699b      	ldr	r3, [r3, #24]
 8003fd0:	0c1b      	lsrs	r3, r3, #16
 8003fd2:	f003 0104 	and.w	r1, r3, #4
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fda:	f003 0210 	and.w	r2, r3, #16
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	430a      	orrs	r2, r1
 8003fe4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69da      	ldr	r2, [r3, #28]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ff4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}

0800400e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b08a      	sub	sp, #40	@ 0x28
 8004012:	af00      	add	r7, sp, #0
 8004014:	60f8      	str	r0, [r7, #12]
 8004016:	60b9      	str	r1, [r7, #8]
 8004018:	607a      	str	r2, [r7, #4]
 800401a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800401c:	2301      	movs	r3, #1
 800401e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004020:	f7fe fa94 	bl	800254c <HAL_GetTick>
 8004024:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800402c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8004034:	887b      	ldrh	r3, [r7, #2]
 8004036:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004038:	7ffb      	ldrb	r3, [r7, #31]
 800403a:	2b01      	cmp	r3, #1
 800403c:	d00c      	beq.n	8004058 <HAL_SPI_TransmitReceive+0x4a>
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004044:	d106      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d102      	bne.n	8004054 <HAL_SPI_TransmitReceive+0x46>
 800404e:	7ffb      	ldrb	r3, [r7, #31]
 8004050:	2b04      	cmp	r3, #4
 8004052:	d001      	beq.n	8004058 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8004054:	2302      	movs	r3, #2
 8004056:	e17f      	b.n	8004358 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_SPI_TransmitReceive+0x5c>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d002      	beq.n	800406a <HAL_SPI_TransmitReceive+0x5c>
 8004064:	887b      	ldrh	r3, [r7, #2]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d101      	bne.n	800406e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e174      	b.n	8004358 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004074:	2b01      	cmp	r3, #1
 8004076:	d101      	bne.n	800407c <HAL_SPI_TransmitReceive+0x6e>
 8004078:	2302      	movs	r3, #2
 800407a:	e16d      	b.n	8004358 <HAL_SPI_TransmitReceive+0x34a>
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2201      	movs	r2, #1
 8004080:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800408a:	b2db      	uxtb	r3, r3
 800408c:	2b04      	cmp	r3, #4
 800408e:	d003      	beq.n	8004098 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2205      	movs	r2, #5
 8004094:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	887a      	ldrh	r2, [r7, #2]
 80040a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	887a      	ldrh	r2, [r7, #2]
 80040ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	887a      	ldrh	r2, [r7, #2]
 80040ba:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	887a      	ldrh	r2, [r7, #2]
 80040c0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d8:	2b40      	cmp	r3, #64	@ 0x40
 80040da:	d007      	beq.n	80040ec <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f4:	d17e      	bne.n	80041f4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d002      	beq.n	8004104 <HAL_SPI_TransmitReceive+0xf6>
 80040fe:	8afb      	ldrh	r3, [r7, #22]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d16c      	bne.n	80041de <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	881a      	ldrh	r2, [r3, #0]
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004114:	1c9a      	adds	r2, r3, #2
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800411e:	b29b      	uxth	r3, r3
 8004120:	3b01      	subs	r3, #1
 8004122:	b29a      	uxth	r2, r3
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004128:	e059      	b.n	80041de <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	f003 0302 	and.w	r3, r3, #2
 8004134:	2b02      	cmp	r3, #2
 8004136:	d11b      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x162>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800413c:	b29b      	uxth	r3, r3
 800413e:	2b00      	cmp	r3, #0
 8004140:	d016      	beq.n	8004170 <HAL_SPI_TransmitReceive+0x162>
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	2b01      	cmp	r3, #1
 8004146:	d113      	bne.n	8004170 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414c:	881a      	ldrh	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004158:	1c9a      	adds	r2, r3, #2
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004162:	b29b      	uxth	r3, r3
 8004164:	3b01      	subs	r3, #1
 8004166:	b29a      	uxth	r2, r3
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800416c:	2300      	movs	r3, #0
 800416e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b01      	cmp	r3, #1
 800417c:	d119      	bne.n	80041b2 <HAL_SPI_TransmitReceive+0x1a4>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d014      	beq.n	80041b2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68da      	ldr	r2, [r3, #12]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004192:	b292      	uxth	r2, r2
 8004194:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419a:	1c9a      	adds	r2, r3, #2
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041ae:	2301      	movs	r3, #1
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041b2:	f7fe f9cb 	bl	800254c <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041be:	429a      	cmp	r2, r3
 80041c0:	d80d      	bhi.n	80041de <HAL_SPI_TransmitReceive+0x1d0>
 80041c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d009      	beq.n	80041de <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2201      	movs	r2, #1
 80041ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e0bc      	b.n	8004358 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1a0      	bne.n	800412a <HAL_SPI_TransmitReceive+0x11c>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d19b      	bne.n	800412a <HAL_SPI_TransmitReceive+0x11c>
 80041f2:	e082      	b.n	80042fa <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d002      	beq.n	8004202 <HAL_SPI_TransmitReceive+0x1f4>
 80041fc:	8afb      	ldrh	r3, [r7, #22]
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d171      	bne.n	80042e6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	330c      	adds	r3, #12
 800420c:	7812      	ldrb	r2, [r2, #0]
 800420e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004214:	1c5a      	adds	r2, r3, #1
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800421e:	b29b      	uxth	r3, r3
 8004220:	3b01      	subs	r3, #1
 8004222:	b29a      	uxth	r2, r3
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004228:	e05d      	b.n	80042e6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 0302 	and.w	r3, r3, #2
 8004234:	2b02      	cmp	r3, #2
 8004236:	d11c      	bne.n	8004272 <HAL_SPI_TransmitReceive+0x264>
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800423c:	b29b      	uxth	r3, r3
 800423e:	2b00      	cmp	r3, #0
 8004240:	d017      	beq.n	8004272 <HAL_SPI_TransmitReceive+0x264>
 8004242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004244:	2b01      	cmp	r3, #1
 8004246:	d114      	bne.n	8004272 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	330c      	adds	r3, #12
 8004252:	7812      	ldrb	r2, [r2, #0]
 8004254:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425a:	1c5a      	adds	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800426e:	2300      	movs	r3, #0
 8004270:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b01      	cmp	r3, #1
 800427e:	d119      	bne.n	80042b4 <HAL_SPI_TransmitReceive+0x2a6>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d014      	beq.n	80042b4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042a6:	b29b      	uxth	r3, r3
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042b0:	2301      	movs	r3, #1
 80042b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042b4:	f7fe f94a 	bl	800254c <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	6a3b      	ldr	r3, [r7, #32]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d803      	bhi.n	80042cc <HAL_SPI_TransmitReceive+0x2be>
 80042c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ca:	d102      	bne.n	80042d2 <HAL_SPI_TransmitReceive+0x2c4>
 80042cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d109      	bne.n	80042e6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e038      	b.n	8004358 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d19c      	bne.n	800422a <HAL_SPI_TransmitReceive+0x21c>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d197      	bne.n	800422a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042fa:	6a3a      	ldr	r2, [r7, #32]
 80042fc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f8b6 	bl	8004470 <SPI_EndRxTxTransaction>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d008      	beq.n	800431c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e01d      	b.n	8004358 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10a      	bne.n	800433a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004324:	2300      	movs	r3, #0
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	613b      	str	r3, [r7, #16]
 8004338:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2201      	movs	r2, #1
 800433e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2200      	movs	r2, #0
 8004346:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004356:	2300      	movs	r3, #0
  }
}
 8004358:	4618      	mov	r0, r3
 800435a:	3728      	adds	r7, #40	@ 0x28
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	603b      	str	r3, [r7, #0]
 800436c:	4613      	mov	r3, r2
 800436e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004370:	f7fe f8ec 	bl	800254c <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	683a      	ldr	r2, [r7, #0]
 800437c:	4413      	add	r3, r2
 800437e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004380:	f7fe f8e4 	bl	800254c <HAL_GetTick>
 8004384:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004386:	4b39      	ldr	r3, [pc, #228]	@ (800446c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	015b      	lsls	r3, r3, #5
 800438c:	0d1b      	lsrs	r3, r3, #20
 800438e:	69fa      	ldr	r2, [r7, #28]
 8004390:	fb02 f303 	mul.w	r3, r2, r3
 8004394:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004396:	e054      	b.n	8004442 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439e:	d050      	beq.n	8004442 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043a0:	f7fe f8d4 	bl	800254c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d902      	bls.n	80043b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d13d      	bne.n	8004432 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80043c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043ce:	d111      	bne.n	80043f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043d8:	d004      	beq.n	80043e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043e2:	d107      	bne.n	80043f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043fc:	d10f      	bne.n	800441e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800440c:	601a      	str	r2, [r3, #0]
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681a      	ldr	r2, [r3, #0]
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800441c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e017      	b.n	8004462 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004438:	2300      	movs	r3, #0
 800443a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	3b01      	subs	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	4013      	ands	r3, r2
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	429a      	cmp	r2, r3
 8004450:	bf0c      	ite	eq
 8004452:	2301      	moveq	r3, #1
 8004454:	2300      	movne	r3, #0
 8004456:	b2db      	uxtb	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	79fb      	ldrb	r3, [r7, #7]
 800445c:	429a      	cmp	r2, r3
 800445e:	d19b      	bne.n	8004398 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3720      	adds	r7, #32
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	2000000c 	.word	0x2000000c

08004470 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b088      	sub	sp, #32
 8004474:	af02      	add	r7, sp, #8
 8004476:	60f8      	str	r0, [r7, #12]
 8004478:	60b9      	str	r1, [r7, #8]
 800447a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2201      	movs	r2, #1
 8004484:	2102      	movs	r1, #2
 8004486:	68f8      	ldr	r0, [r7, #12]
 8004488:	f7ff ff6a 	bl	8004360 <SPI_WaitFlagStateUntilTimeout>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d007      	beq.n	80044a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004496:	f043 0220 	orr.w	r2, r3, #32
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e032      	b.n	8004508 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004510 <SPI_EndRxTxTransaction+0xa0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a1b      	ldr	r2, [pc, #108]	@ (8004514 <SPI_EndRxTxTransaction+0xa4>)
 80044a8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ac:	0d5b      	lsrs	r3, r3, #21
 80044ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80044b2:	fb02 f303 	mul.w	r3, r2, r3
 80044b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80044c0:	d112      	bne.n	80044e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	2200      	movs	r2, #0
 80044ca:	2180      	movs	r1, #128	@ 0x80
 80044cc:	68f8      	ldr	r0, [r7, #12]
 80044ce:	f7ff ff47 	bl	8004360 <SPI_WaitFlagStateUntilTimeout>
 80044d2:	4603      	mov	r3, r0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d016      	beq.n	8004506 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044dc:	f043 0220 	orr.w	r2, r3, #32
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e00f      	b.n	8004508 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	3b01      	subs	r3, #1
 80044f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044fe:	2b80      	cmp	r3, #128	@ 0x80
 8004500:	d0f2      	beq.n	80044e8 <SPI_EndRxTxTransaction+0x78>
 8004502:	e000      	b.n	8004506 <SPI_EndRxTxTransaction+0x96>
        break;
 8004504:	bf00      	nop
  }

  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}
 8004510:	2000000c 	.word	0x2000000c
 8004514:	165e9f81 	.word	0x165e9f81

08004518 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b082      	sub	sp, #8
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e041      	b.n	80045ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f7fd fe2c 	bl	800219c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2202      	movs	r2, #2
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3304      	adds	r3, #4
 8004554:	4619      	mov	r1, r3
 8004556:	4610      	mov	r0, r2
 8004558:	f000 fb1c 	bl	8004b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2201      	movs	r2, #1
 8004590:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2201      	movs	r2, #1
 80045a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3708      	adds	r7, #8
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d001      	beq.n	80045d0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e03c      	b.n	800464a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004658 <HAL_TIM_Base_Start+0xa0>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d018      	beq.n	8004614 <HAL_TIM_Base_Start+0x5c>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045ea:	d013      	beq.n	8004614 <HAL_TIM_Base_Start+0x5c>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1a      	ldr	r2, [pc, #104]	@ (800465c <HAL_TIM_Base_Start+0xa4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d00e      	beq.n	8004614 <HAL_TIM_Base_Start+0x5c>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a19      	ldr	r2, [pc, #100]	@ (8004660 <HAL_TIM_Base_Start+0xa8>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d009      	beq.n	8004614 <HAL_TIM_Base_Start+0x5c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a17      	ldr	r2, [pc, #92]	@ (8004664 <HAL_TIM_Base_Start+0xac>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d004      	beq.n	8004614 <HAL_TIM_Base_Start+0x5c>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a16      	ldr	r2, [pc, #88]	@ (8004668 <HAL_TIM_Base_Start+0xb0>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d111      	bne.n	8004638 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0307 	and.w	r3, r3, #7
 800461e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b06      	cmp	r3, #6
 8004624:	d010      	beq.n	8004648 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f042 0201 	orr.w	r2, r2, #1
 8004634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004636:	e007      	b.n	8004648 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3714      	adds	r7, #20
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40010000 	.word	0x40010000
 800465c:	40000400 	.word	0x40000400
 8004660:	40000800 	.word	0x40000800
 8004664:	40000c00 	.word	0x40000c00
 8004668:	40014000 	.word	0x40014000

0800466c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d101      	bne.n	800467e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e041      	b.n	8004702 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	d106      	bne.n	8004698 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f839 	bl	800470a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3304      	adds	r3, #4
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f000 fa72 	bl	8004b94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3708      	adds	r7, #8
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr
	...

08004720 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <HAL_TIM_PWM_Start+0x24>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	bf14      	ite	ne
 800473c:	2301      	movne	r3, #1
 800473e:	2300      	moveq	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e022      	b.n	800478a <HAL_TIM_PWM_Start+0x6a>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b04      	cmp	r3, #4
 8004748:	d109      	bne.n	800475e <HAL_TIM_PWM_Start+0x3e>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	bf14      	ite	ne
 8004756:	2301      	movne	r3, #1
 8004758:	2300      	moveq	r3, #0
 800475a:	b2db      	uxtb	r3, r3
 800475c:	e015      	b.n	800478a <HAL_TIM_PWM_Start+0x6a>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b08      	cmp	r3, #8
 8004762:	d109      	bne.n	8004778 <HAL_TIM_PWM_Start+0x58>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	bf14      	ite	ne
 8004770:	2301      	movne	r3, #1
 8004772:	2300      	moveq	r3, #0
 8004774:	b2db      	uxtb	r3, r3
 8004776:	e008      	b.n	800478a <HAL_TIM_PWM_Start+0x6a>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b01      	cmp	r3, #1
 8004782:	bf14      	ite	ne
 8004784:	2301      	movne	r3, #1
 8004786:	2300      	moveq	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e068      	b.n	8004864 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Start+0x82>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047a0:	e013      	b.n	80047ca <HAL_TIM_PWM_Start+0xaa>
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	2b04      	cmp	r3, #4
 80047a6:	d104      	bne.n	80047b2 <HAL_TIM_PWM_Start+0x92>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047b0:	e00b      	b.n	80047ca <HAL_TIM_PWM_Start+0xaa>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d104      	bne.n	80047c2 <HAL_TIM_PWM_Start+0xa2>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047c0:	e003      	b.n	80047ca <HAL_TIM_PWM_Start+0xaa>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2201      	movs	r2, #1
 80047d0:	6839      	ldr	r1, [r7, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f000 fc90 	bl	80050f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a23      	ldr	r2, [pc, #140]	@ (800486c <HAL_TIM_PWM_Start+0x14c>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d107      	bne.n	80047f2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a1d      	ldr	r2, [pc, #116]	@ (800486c <HAL_TIM_PWM_Start+0x14c>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d018      	beq.n	800482e <HAL_TIM_PWM_Start+0x10e>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004804:	d013      	beq.n	800482e <HAL_TIM_PWM_Start+0x10e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a19      	ldr	r2, [pc, #100]	@ (8004870 <HAL_TIM_PWM_Start+0x150>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d00e      	beq.n	800482e <HAL_TIM_PWM_Start+0x10e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a17      	ldr	r2, [pc, #92]	@ (8004874 <HAL_TIM_PWM_Start+0x154>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d009      	beq.n	800482e <HAL_TIM_PWM_Start+0x10e>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a16      	ldr	r2, [pc, #88]	@ (8004878 <HAL_TIM_PWM_Start+0x158>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d004      	beq.n	800482e <HAL_TIM_PWM_Start+0x10e>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a14      	ldr	r2, [pc, #80]	@ (800487c <HAL_TIM_PWM_Start+0x15c>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d111      	bne.n	8004852 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2b06      	cmp	r3, #6
 800483e:	d010      	beq.n	8004862 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f042 0201 	orr.w	r2, r2, #1
 800484e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004850:	e007      	b.n	8004862 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3710      	adds	r7, #16
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40010000 	.word	0x40010000
 8004870:	40000400 	.word	0x40000400
 8004874:	40000800 	.word	0x40000800
 8004878:	40000c00 	.word	0x40000c00
 800487c:	40014000 	.word	0x40014000

08004880 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800488c:	2300      	movs	r3, #0
 800488e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004896:	2b01      	cmp	r3, #1
 8004898:	d101      	bne.n	800489e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800489a:	2302      	movs	r3, #2
 800489c:	e0ae      	b.n	80049fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b0c      	cmp	r3, #12
 80048aa:	f200 809f 	bhi.w	80049ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80048ae:	a201      	add	r2, pc, #4	@ (adr r2, 80048b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80048b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b4:	080048e9 	.word	0x080048e9
 80048b8:	080049ed 	.word	0x080049ed
 80048bc:	080049ed 	.word	0x080049ed
 80048c0:	080049ed 	.word	0x080049ed
 80048c4:	08004929 	.word	0x08004929
 80048c8:	080049ed 	.word	0x080049ed
 80048cc:	080049ed 	.word	0x080049ed
 80048d0:	080049ed 	.word	0x080049ed
 80048d4:	0800496b 	.word	0x0800496b
 80048d8:	080049ed 	.word	0x080049ed
 80048dc:	080049ed 	.word	0x080049ed
 80048e0:	080049ed 	.word	0x080049ed
 80048e4:	080049ab 	.word	0x080049ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68b9      	ldr	r1, [r7, #8]
 80048ee:	4618      	mov	r0, r3
 80048f0:	f000 f9dc 	bl	8004cac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699a      	ldr	r2, [r3, #24]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0208 	orr.w	r2, r2, #8
 8004902:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	699a      	ldr	r2, [r3, #24]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f022 0204 	bic.w	r2, r2, #4
 8004912:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6999      	ldr	r1, [r3, #24]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	691a      	ldr	r2, [r3, #16]
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	619a      	str	r2, [r3, #24]
      break;
 8004926:	e064      	b.n	80049f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68b9      	ldr	r1, [r7, #8]
 800492e:	4618      	mov	r0, r3
 8004930:	f000 fa22 	bl	8004d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	699a      	ldr	r2, [r3, #24]
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004942:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004952:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6999      	ldr	r1, [r3, #24]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	021a      	lsls	r2, r3, #8
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	619a      	str	r2, [r3, #24]
      break;
 8004968:	e043      	b.n	80049f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68b9      	ldr	r1, [r7, #8]
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fa6d 	bl	8004e50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69da      	ldr	r2, [r3, #28]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0208 	orr.w	r2, r2, #8
 8004984:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	69da      	ldr	r2, [r3, #28]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0204 	bic.w	r2, r2, #4
 8004994:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	69d9      	ldr	r1, [r3, #28]
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	691a      	ldr	r2, [r3, #16]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	430a      	orrs	r2, r1
 80049a6:	61da      	str	r2, [r3, #28]
      break;
 80049a8:	e023      	b.n	80049f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fab7 	bl	8004f24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	69da      	ldr	r2, [r3, #28]
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80049c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	69da      	ldr	r2, [r3, #28]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80049d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	69d9      	ldr	r1, [r3, #28]
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	021a      	lsls	r2, r3, #8
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	61da      	str	r2, [r3, #28]
      break;
 80049ea:	e002      	b.n	80049f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	75fb      	strb	r3, [r7, #23]
      break;
 80049f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80049fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIM_ConfigClockSource+0x1c>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e0b4      	b.n	8004b8a <HAL_TIM_ConfigClockSource+0x186>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004a3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004a46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a58:	d03e      	beq.n	8004ad8 <HAL_TIM_ConfigClockSource+0xd4>
 8004a5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a5e:	f200 8087 	bhi.w	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a66:	f000 8086 	beq.w	8004b76 <HAL_TIM_ConfigClockSource+0x172>
 8004a6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a6e:	d87f      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a70:	2b70      	cmp	r3, #112	@ 0x70
 8004a72:	d01a      	beq.n	8004aaa <HAL_TIM_ConfigClockSource+0xa6>
 8004a74:	2b70      	cmp	r3, #112	@ 0x70
 8004a76:	d87b      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a78:	2b60      	cmp	r3, #96	@ 0x60
 8004a7a:	d050      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0x11a>
 8004a7c:	2b60      	cmp	r3, #96	@ 0x60
 8004a7e:	d877      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a80:	2b50      	cmp	r3, #80	@ 0x50
 8004a82:	d03c      	beq.n	8004afe <HAL_TIM_ConfigClockSource+0xfa>
 8004a84:	2b50      	cmp	r3, #80	@ 0x50
 8004a86:	d873      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a88:	2b40      	cmp	r3, #64	@ 0x40
 8004a8a:	d058      	beq.n	8004b3e <HAL_TIM_ConfigClockSource+0x13a>
 8004a8c:	2b40      	cmp	r3, #64	@ 0x40
 8004a8e:	d86f      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a90:	2b30      	cmp	r3, #48	@ 0x30
 8004a92:	d064      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15a>
 8004a94:	2b30      	cmp	r3, #48	@ 0x30
 8004a96:	d86b      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004a98:	2b20      	cmp	r3, #32
 8004a9a:	d060      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15a>
 8004a9c:	2b20      	cmp	r3, #32
 8004a9e:	d867      	bhi.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d05c      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15a>
 8004aa4:	2b10      	cmp	r3, #16
 8004aa6:	d05a      	beq.n	8004b5e <HAL_TIM_ConfigClockSource+0x15a>
 8004aa8:	e062      	b.n	8004b70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004aba:	f000 fafd 	bl	80050b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ac6:	68bb      	ldr	r3, [r7, #8]
 8004ac8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004acc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68ba      	ldr	r2, [r7, #8]
 8004ad4:	609a      	str	r2, [r3, #8]
      break;
 8004ad6:	e04f      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ae8:	f000 fae6 	bl	80050b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689a      	ldr	r2, [r3, #8]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004afa:	609a      	str	r2, [r3, #8]
      break;
 8004afc:	e03c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	f000 fa5a 	bl	8004fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2150      	movs	r1, #80	@ 0x50
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fab3 	bl	8005082 <TIM_ITRx_SetConfig>
      break;
 8004b1c:	e02c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f000 fa79 	bl	8005022 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2160      	movs	r1, #96	@ 0x60
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 faa3 	bl	8005082 <TIM_ITRx_SetConfig>
      break;
 8004b3c:	e01c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	f000 fa3a 	bl	8004fc4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2140      	movs	r1, #64	@ 0x40
 8004b56:	4618      	mov	r0, r3
 8004b58:	f000 fa93 	bl	8005082 <TIM_ITRx_SetConfig>
      break;
 8004b5c:	e00c      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4619      	mov	r1, r3
 8004b68:	4610      	mov	r0, r2
 8004b6a:	f000 fa8a 	bl	8005082 <TIM_ITRx_SetConfig>
      break;
 8004b6e:	e003      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
      break;
 8004b74:	e000      	b.n	8004b78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b085      	sub	sp, #20
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a3a      	ldr	r2, [pc, #232]	@ (8004c90 <TIM_Base_SetConfig+0xfc>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d00f      	beq.n	8004bcc <TIM_Base_SetConfig+0x38>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bb2:	d00b      	beq.n	8004bcc <TIM_Base_SetConfig+0x38>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	4a37      	ldr	r2, [pc, #220]	@ (8004c94 <TIM_Base_SetConfig+0x100>)
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d007      	beq.n	8004bcc <TIM_Base_SetConfig+0x38>
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	4a36      	ldr	r2, [pc, #216]	@ (8004c98 <TIM_Base_SetConfig+0x104>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d003      	beq.n	8004bcc <TIM_Base_SetConfig+0x38>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	4a35      	ldr	r2, [pc, #212]	@ (8004c9c <TIM_Base_SetConfig+0x108>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d108      	bne.n	8004bde <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004bd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	68fa      	ldr	r2, [r7, #12]
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a2b      	ldr	r2, [pc, #172]	@ (8004c90 <TIM_Base_SetConfig+0xfc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d01b      	beq.n	8004c1e <TIM_Base_SetConfig+0x8a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bec:	d017      	beq.n	8004c1e <TIM_Base_SetConfig+0x8a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a28      	ldr	r2, [pc, #160]	@ (8004c94 <TIM_Base_SetConfig+0x100>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d013      	beq.n	8004c1e <TIM_Base_SetConfig+0x8a>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a27      	ldr	r2, [pc, #156]	@ (8004c98 <TIM_Base_SetConfig+0x104>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00f      	beq.n	8004c1e <TIM_Base_SetConfig+0x8a>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a26      	ldr	r2, [pc, #152]	@ (8004c9c <TIM_Base_SetConfig+0x108>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00b      	beq.n	8004c1e <TIM_Base_SetConfig+0x8a>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a25      	ldr	r2, [pc, #148]	@ (8004ca0 <TIM_Base_SetConfig+0x10c>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d007      	beq.n	8004c1e <TIM_Base_SetConfig+0x8a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a24      	ldr	r2, [pc, #144]	@ (8004ca4 <TIM_Base_SetConfig+0x110>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d003      	beq.n	8004c1e <TIM_Base_SetConfig+0x8a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a23      	ldr	r2, [pc, #140]	@ (8004ca8 <TIM_Base_SetConfig+0x114>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d108      	bne.n	8004c30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	695b      	ldr	r3, [r3, #20]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a0e      	ldr	r2, [pc, #56]	@ (8004c90 <TIM_Base_SetConfig+0xfc>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d103      	bne.n	8004c64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	691a      	ldr	r2, [r3, #16]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d105      	bne.n	8004c82 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	f023 0201 	bic.w	r2, r3, #1
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	611a      	str	r2, [r3, #16]
  }
}
 8004c82:	bf00      	nop
 8004c84:	3714      	adds	r7, #20
 8004c86:	46bd      	mov	sp, r7
 8004c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8c:	4770      	bx	lr
 8004c8e:	bf00      	nop
 8004c90:	40010000 	.word	0x40010000
 8004c94:	40000400 	.word	0x40000400
 8004c98:	40000800 	.word	0x40000800
 8004c9c:	40000c00 	.word	0x40000c00
 8004ca0:	40014000 	.word	0x40014000
 8004ca4:	40014400 	.word	0x40014400
 8004ca8:	40014800 	.word	0x40014800

08004cac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b087      	sub	sp, #28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6a1b      	ldr	r3, [r3, #32]
 8004cba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	f023 0201 	bic.w	r2, r3, #1
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0303 	bic.w	r3, r3, #3
 8004ce2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68fa      	ldr	r2, [r7, #12]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	f023 0302 	bic.w	r3, r3, #2
 8004cf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a1c      	ldr	r2, [pc, #112]	@ (8004d74 <TIM_OC1_SetConfig+0xc8>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d10c      	bne.n	8004d22 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f023 0308 	bic.w	r3, r3, #8
 8004d0e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	697a      	ldr	r2, [r7, #20]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f023 0304 	bic.w	r3, r3, #4
 8004d20:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a13      	ldr	r2, [pc, #76]	@ (8004d74 <TIM_OC1_SetConfig+0xc8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d111      	bne.n	8004d4e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	693a      	ldr	r2, [r7, #16]
 8004d52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	621a      	str	r2, [r3, #32]
}
 8004d68:	bf00      	nop
 8004d6a:	371c      	adds	r7, #28
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	40010000 	.word	0x40010000

08004d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b087      	sub	sp, #28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	f023 0210 	bic.w	r2, r3, #16
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004da6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	021b      	lsls	r3, r3, #8
 8004db6:	68fa      	ldr	r2, [r7, #12]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f023 0320 	bic.w	r3, r3, #32
 8004dc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689b      	ldr	r3, [r3, #8]
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e4c <TIM_OC2_SetConfig+0xd4>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d10d      	bne.n	8004df4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004df2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a15      	ldr	r2, [pc, #84]	@ (8004e4c <TIM_OC2_SetConfig+0xd4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d113      	bne.n	8004e24 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004e02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004e0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	695b      	ldr	r3, [r3, #20]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	685a      	ldr	r2, [r3, #4]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	621a      	str	r2, [r3, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	371c      	adds	r7, #28
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	40010000 	.word	0x40010000

08004e50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b087      	sub	sp, #28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a1b      	ldr	r3, [r3, #32]
 8004e64:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f023 0303 	bic.w	r3, r3, #3
 8004e86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	021b      	lsls	r3, r3, #8
 8004ea0:	697a      	ldr	r2, [r7, #20]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f20 <TIM_OC3_SetConfig+0xd0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d10d      	bne.n	8004eca <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004eb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	021b      	lsls	r3, r3, #8
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ec8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a14      	ldr	r2, [pc, #80]	@ (8004f20 <TIM_OC3_SetConfig+0xd0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d113      	bne.n	8004efa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	621a      	str	r2, [r3, #32]
}
 8004f14:	bf00      	nop
 8004f16:	371c      	adds	r7, #28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	40010000 	.word	0x40010000

08004f24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6a1b      	ldr	r3, [r3, #32]
 8004f38:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	021b      	lsls	r3, r3, #8
 8004f62:	68fa      	ldr	r2, [r7, #12]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	031b      	lsls	r3, r3, #12
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a10      	ldr	r2, [pc, #64]	@ (8004fc0 <TIM_OC4_SetConfig+0x9c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d109      	bne.n	8004f98 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	019b      	lsls	r3, r3, #6
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	697a      	ldr	r2, [r7, #20]
 8004f9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	68fa      	ldr	r2, [r7, #12]
 8004fa2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	685a      	ldr	r2, [r3, #4]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	621a      	str	r2, [r3, #32]
}
 8004fb2:	bf00      	nop
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	40010000 	.word	0x40010000

08004fc4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	f023 0201 	bic.w	r2, r3, #1
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	699b      	ldr	r3, [r3, #24]
 8004fe6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004fee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f023 030a 	bic.w	r3, r3, #10
 8005000:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4313      	orrs	r3, r2
 8005008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	697a      	ldr	r2, [r7, #20]
 8005014:	621a      	str	r2, [r3, #32]
}
 8005016:	bf00      	nop
 8005018:	371c      	adds	r7, #28
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005022:	b480      	push	{r7}
 8005024:	b087      	sub	sp, #28
 8005026:	af00      	add	r7, sp, #0
 8005028:	60f8      	str	r0, [r7, #12]
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	f023 0210 	bic.w	r2, r3, #16
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800504c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	031b      	lsls	r3, r3, #12
 8005052:	693a      	ldr	r2, [r7, #16]
 8005054:	4313      	orrs	r3, r2
 8005056:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800505e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005082:	b480      	push	{r7}
 8005084:	b085      	sub	sp, #20
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
 800508a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005098:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800509a:	683a      	ldr	r2, [r7, #0]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	4313      	orrs	r3, r2
 80050a0:	f043 0307 	orr.w	r3, r3, #7
 80050a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	609a      	str	r2, [r3, #8]
}
 80050ac:	bf00      	nop
 80050ae:	3714      	adds	r7, #20
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]
 80050c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80050d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	021a      	lsls	r2, r3, #8
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	431a      	orrs	r2, r3
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4313      	orrs	r3, r2
 80050e0:	697a      	ldr	r2, [r7, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	609a      	str	r2, [r3, #8]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b087      	sub	sp, #28
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	f003 031f 	and.w	r3, r3, #31
 800510a:	2201      	movs	r2, #1
 800510c:	fa02 f303 	lsl.w	r3, r2, r3
 8005110:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6a1a      	ldr	r2, [r3, #32]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	43db      	mvns	r3, r3
 800511a:	401a      	ands	r2, r3
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6a1a      	ldr	r2, [r3, #32]
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	f003 031f 	and.w	r3, r3, #31
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	fa01 f303 	lsl.w	r3, r1, r3
 8005130:	431a      	orrs	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	621a      	str	r2, [r3, #32]
}
 8005136:	bf00      	nop
 8005138:	371c      	adds	r7, #28
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
	...

08005144 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005154:	2b01      	cmp	r3, #1
 8005156:	d101      	bne.n	800515c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005158:	2302      	movs	r3, #2
 800515a:	e050      	b.n	80051fe <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005182:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a1c      	ldr	r2, [pc, #112]	@ (800520c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d018      	beq.n	80051d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a8:	d013      	beq.n	80051d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a18      	ldr	r2, [pc, #96]	@ (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d00e      	beq.n	80051d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a16      	ldr	r2, [pc, #88]	@ (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d009      	beq.n	80051d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a15      	ldr	r2, [pc, #84]	@ (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d004      	beq.n	80051d2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a13      	ldr	r2, [pc, #76]	@ (800521c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d10c      	bne.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	68ba      	ldr	r2, [r7, #8]
 80051e0:	4313      	orrs	r3, r2
 80051e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68ba      	ldr	r2, [r7, #8]
 80051ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40010000 	.word	0x40010000
 8005210:	40000400 	.word	0x40000400
 8005214:	40000800 	.word	0x40000800
 8005218:	40000c00 	.word	0x40000c00
 800521c:	40014000 	.word	0x40014000

08005220 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e042      	b.n	80052b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005238:	b2db      	uxtb	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d106      	bne.n	800524c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f7fd f816 	bl	8002278 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2224      	movs	r2, #36	@ 0x24
 8005250:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68da      	ldr	r2, [r3, #12]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005262:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 fd69 	bl	8005d3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005278:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695a      	ldr	r2, [r3, #20]
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005288:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005298:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3708      	adds	r7, #8
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08a      	sub	sp, #40	@ 0x28
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	603b      	str	r3, [r7, #0]
 80052cc:	4613      	mov	r3, r2
 80052ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80052d0:	2300      	movs	r3, #0
 80052d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d175      	bne.n	80053cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_UART_Transmit+0x2c>
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e06e      	b.n	80053ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2221      	movs	r2, #33	@ 0x21
 80052fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052fe:	f7fd f925 	bl	800254c <HAL_GetTick>
 8005302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	88fa      	ldrh	r2, [r7, #6]
 8005308:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	88fa      	ldrh	r2, [r7, #6]
 800530e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005318:	d108      	bne.n	800532c <HAL_UART_Transmit+0x6c>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	691b      	ldr	r3, [r3, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d104      	bne.n	800532c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005322:	2300      	movs	r3, #0
 8005324:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	e003      	b.n	8005334 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005330:	2300      	movs	r3, #0
 8005332:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005334:	e02e      	b.n	8005394 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	2200      	movs	r2, #0
 800533e:	2180      	movs	r1, #128	@ 0x80
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 fb05 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	d005      	beq.n	8005358 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2220      	movs	r2, #32
 8005350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005354:	2303      	movs	r3, #3
 8005356:	e03a      	b.n	80053ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d10b      	bne.n	8005376 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	881b      	ldrh	r3, [r3, #0]
 8005362:	461a      	mov	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800536c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800536e:	69bb      	ldr	r3, [r7, #24]
 8005370:	3302      	adds	r3, #2
 8005372:	61bb      	str	r3, [r7, #24]
 8005374:	e007      	b.n	8005386 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	781a      	ldrb	r2, [r3, #0]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	3301      	adds	r3, #1
 8005384:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b29a      	uxth	r2, r3
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005398:	b29b      	uxth	r3, r3
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1cb      	bne.n	8005336 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2200      	movs	r2, #0
 80053a6:	2140      	movs	r1, #64	@ 0x40
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 fad1 	bl	8005950 <UART_WaitOnFlagUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2220      	movs	r2, #32
 80053b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e006      	b.n	80053ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80053c8:	2300      	movs	r3, #0
 80053ca:	e000      	b.n	80053ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80053cc:	2302      	movs	r3, #2
  }
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3720      	adds	r7, #32
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
	...

080053d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b0ba      	sub	sp, #232	@ 0xe8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	695b      	ldr	r3, [r3, #20]
 80053fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053fe:	2300      	movs	r3, #0
 8005400:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005404:	2300      	movs	r3, #0
 8005406:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800540a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540e:	f003 030f 	and.w	r3, r3, #15
 8005412:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005416:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800541a:	2b00      	cmp	r3, #0
 800541c:	d10f      	bne.n	800543e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800541e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005422:	f003 0320 	and.w	r3, r3, #32
 8005426:	2b00      	cmp	r3, #0
 8005428:	d009      	beq.n	800543e <HAL_UART_IRQHandler+0x66>
 800542a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fbc2 	bl	8005bc0 <UART_Receive_IT>
      return;
 800543c:	e25b      	b.n	80058f6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800543e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 80de 	beq.w	8005604 <HAL_UART_IRQHandler+0x22c>
 8005448:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d106      	bne.n	8005462 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005454:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005458:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 80d1 	beq.w	8005604 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005462:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005466:	f003 0301 	and.w	r3, r3, #1
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00b      	beq.n	8005486 <HAL_UART_IRQHandler+0xae>
 800546e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005472:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005476:	2b00      	cmp	r3, #0
 8005478:	d005      	beq.n	8005486 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800547e:	f043 0201 	orr.w	r2, r3, #1
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800548a:	f003 0304 	and.w	r3, r3, #4
 800548e:	2b00      	cmp	r3, #0
 8005490:	d00b      	beq.n	80054aa <HAL_UART_IRQHandler+0xd2>
 8005492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d005      	beq.n	80054aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a2:	f043 0202 	orr.w	r2, r3, #2
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054ae:	f003 0302 	and.w	r3, r3, #2
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d00b      	beq.n	80054ce <HAL_UART_IRQHandler+0xf6>
 80054b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d005      	beq.n	80054ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c6:	f043 0204 	orr.w	r2, r3, #4
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80054ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054d2:	f003 0308 	and.w	r3, r3, #8
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d011      	beq.n	80054fe <HAL_UART_IRQHandler+0x126>
 80054da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054de:	f003 0320 	and.w	r3, r3, #32
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d105      	bne.n	80054f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054f6:	f043 0208 	orr.w	r2, r3, #8
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 81f2 	beq.w	80058ec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550c:	f003 0320 	and.w	r3, r3, #32
 8005510:	2b00      	cmp	r3, #0
 8005512:	d008      	beq.n	8005526 <HAL_UART_IRQHandler+0x14e>
 8005514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005518:	f003 0320 	and.w	r3, r3, #32
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f000 fb4d 	bl	8005bc0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695b      	ldr	r3, [r3, #20]
 800552c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005530:	2b40      	cmp	r3, #64	@ 0x40
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d103      	bne.n	8005552 <HAL_UART_IRQHandler+0x17a>
 800554a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800554e:	2b00      	cmp	r3, #0
 8005550:	d04f      	beq.n	80055f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f000 fa55 	bl	8005a02 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005562:	2b40      	cmp	r3, #64	@ 0x40
 8005564:	d141      	bne.n	80055ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	3314      	adds	r3, #20
 800556c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005574:	e853 3f00 	ldrex	r3, [r3]
 8005578:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800557c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005580:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3314      	adds	r3, #20
 800558e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005592:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005596:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800559a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800559e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80055a2:	e841 2300 	strex	r3, r2, [r1]
 80055a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80055aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1d9      	bne.n	8005566 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d013      	beq.n	80055e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055be:	4a7e      	ldr	r2, [pc, #504]	@ (80057b8 <HAL_UART_IRQHandler+0x3e0>)
 80055c0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7fd f971 	bl	80028ae <HAL_DMA_Abort_IT>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d016      	beq.n	8005600 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80055dc:	4610      	mov	r0, r2
 80055de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e0:	e00e      	b.n	8005600 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 f99e 	bl	8005924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e8:	e00a      	b.n	8005600 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 f99a 	bl	8005924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f0:	e006      	b.n	8005600 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	f000 f996 	bl	8005924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055fe:	e175      	b.n	80058ec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005600:	bf00      	nop
    return;
 8005602:	e173      	b.n	80058ec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005608:	2b01      	cmp	r3, #1
 800560a:	f040 814f 	bne.w	80058ac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800560e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005612:	f003 0310 	and.w	r3, r3, #16
 8005616:	2b00      	cmp	r3, #0
 8005618:	f000 8148 	beq.w	80058ac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800561c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005620:	f003 0310 	and.w	r3, r3, #16
 8005624:	2b00      	cmp	r3, #0
 8005626:	f000 8141 	beq.w	80058ac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800562a:	2300      	movs	r3, #0
 800562c:	60bb      	str	r3, [r7, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	60bb      	str	r3, [r7, #8]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695b      	ldr	r3, [r3, #20]
 8005646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800564a:	2b40      	cmp	r3, #64	@ 0x40
 800564c:	f040 80b6 	bne.w	80057bc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800565c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8145 	beq.w	80058f0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800566a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800566e:	429a      	cmp	r2, r3
 8005670:	f080 813e 	bcs.w	80058f0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800567a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005686:	f000 8088 	beq.w	800579a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	330c      	adds	r3, #12
 8005690:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005694:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005698:	e853 3f00 	ldrex	r3, [r3]
 800569c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80056a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80056a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80056a8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	330c      	adds	r3, #12
 80056b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80056b6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80056ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056be:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1d9      	bne.n	800568a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3314      	adds	r3, #20
 80056dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056e0:	e853 3f00 	ldrex	r3, [r3]
 80056e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056e8:	f023 0301 	bic.w	r3, r3, #1
 80056ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	3314      	adds	r3, #20
 80056f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056fa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056fe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005700:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005702:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800570c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e1      	bne.n	80056d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	3314      	adds	r3, #20
 8005718:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800571a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800571c:	e853 3f00 	ldrex	r3, [r3]
 8005720:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005724:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005728:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3314      	adds	r3, #20
 8005732:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005736:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005738:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800573a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800573c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800573e:	e841 2300 	strex	r3, r2, [r1]
 8005742:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005744:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005746:	2b00      	cmp	r3, #0
 8005748:	d1e3      	bne.n	8005712 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2220      	movs	r2, #32
 800574e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	330c      	adds	r3, #12
 800575e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005768:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800576a:	f023 0310 	bic.w	r3, r3, #16
 800576e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	330c      	adds	r3, #12
 8005778:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800577c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800577e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005780:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005782:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005784:	e841 2300 	strex	r3, r2, [r1]
 8005788:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800578a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1e3      	bne.n	8005758 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005794:	4618      	mov	r0, r3
 8005796:	f7fd f81a 	bl	80027ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2202      	movs	r2, #2
 800579e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	1ad3      	subs	r3, r2, r3
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	4619      	mov	r1, r3
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f8c1 	bl	8005938 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057b6:	e09b      	b.n	80058f0 <HAL_UART_IRQHandler+0x518>
 80057b8:	08005ac9 	.word	0x08005ac9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057d0:	b29b      	uxth	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 808e 	beq.w	80058f4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80057d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 8089 	beq.w	80058f4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	330c      	adds	r3, #12
 80057e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057f8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	330c      	adds	r3, #12
 8005802:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005806:	647a      	str	r2, [r7, #68]	@ 0x44
 8005808:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800580c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e3      	bne.n	80057e2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3314      	adds	r3, #20
 8005820:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	623b      	str	r3, [r7, #32]
   return(result);
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	f023 0301 	bic.w	r3, r3, #1
 8005830:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3314      	adds	r3, #20
 800583a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800583e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005840:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005842:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005844:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005846:	e841 2300 	strex	r3, r2, [r1]
 800584a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800584c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1e3      	bne.n	800581a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2220      	movs	r2, #32
 8005856:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	330c      	adds	r3, #12
 8005866:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	e853 3f00 	ldrex	r3, [r3]
 800586e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f023 0310 	bic.w	r3, r3, #16
 8005876:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	330c      	adds	r3, #12
 8005880:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005884:	61fa      	str	r2, [r7, #28]
 8005886:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005888:	69b9      	ldr	r1, [r7, #24]
 800588a:	69fa      	ldr	r2, [r7, #28]
 800588c:	e841 2300 	strex	r3, r2, [r1]
 8005890:	617b      	str	r3, [r7, #20]
   return(result);
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1e3      	bne.n	8005860 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2202      	movs	r2, #2
 800589c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800589e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058a2:	4619      	mov	r1, r3
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 f847 	bl	8005938 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058aa:	e023      	b.n	80058f4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d009      	beq.n	80058cc <HAL_UART_IRQHandler+0x4f4>
 80058b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d003      	beq.n	80058cc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f913 	bl	8005af0 <UART_Transmit_IT>
    return;
 80058ca:	e014      	b.n	80058f6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00e      	beq.n	80058f6 <HAL_UART_IRQHandler+0x51e>
 80058d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d008      	beq.n	80058f6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f000 f953 	bl	8005b90 <UART_EndTransmit_IT>
    return;
 80058ea:	e004      	b.n	80058f6 <HAL_UART_IRQHandler+0x51e>
    return;
 80058ec:	bf00      	nop
 80058ee:	e002      	b.n	80058f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80058f0:	bf00      	nop
 80058f2:	e000      	b.n	80058f6 <HAL_UART_IRQHandler+0x51e>
      return;
 80058f4:	bf00      	nop
  }
}
 80058f6:	37e8      	adds	r7, #232	@ 0xe8
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005910:	b480      	push	{r7}
 8005912:	b083      	sub	sp, #12
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	460b      	mov	r3, r1
 8005942:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005944:	bf00      	nop
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	603b      	str	r3, [r7, #0]
 800595c:	4613      	mov	r3, r2
 800595e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005960:	e03b      	b.n	80059da <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005962:	6a3b      	ldr	r3, [r7, #32]
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005968:	d037      	beq.n	80059da <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800596a:	f7fc fdef 	bl	800254c <HAL_GetTick>
 800596e:	4602      	mov	r2, r0
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	6a3a      	ldr	r2, [r7, #32]
 8005976:	429a      	cmp	r2, r3
 8005978:	d302      	bcc.n	8005980 <UART_WaitOnFlagUntilTimeout+0x30>
 800597a:	6a3b      	ldr	r3, [r7, #32]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e03a      	b.n	80059fa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	68db      	ldr	r3, [r3, #12]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	d023      	beq.n	80059da <UART_WaitOnFlagUntilTimeout+0x8a>
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b80      	cmp	r3, #128	@ 0x80
 8005996:	d020      	beq.n	80059da <UART_WaitOnFlagUntilTimeout+0x8a>
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	2b40      	cmp	r3, #64	@ 0x40
 800599c:	d01d      	beq.n	80059da <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0308 	and.w	r3, r3, #8
 80059a8:	2b08      	cmp	r3, #8
 80059aa:	d116      	bne.n	80059da <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059c2:	68f8      	ldr	r0, [r7, #12]
 80059c4:	f000 f81d 	bl	8005a02 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2208      	movs	r2, #8
 80059cc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e00f      	b.n	80059fa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	4013      	ands	r3, r2
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	bf0c      	ite	eq
 80059ea:	2301      	moveq	r3, #1
 80059ec:	2300      	movne	r3, #0
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	461a      	mov	r2, r3
 80059f2:	79fb      	ldrb	r3, [r7, #7]
 80059f4:	429a      	cmp	r2, r3
 80059f6:	d0b4      	beq.n	8005962 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b095      	sub	sp, #84	@ 0x54
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	330c      	adds	r3, #12
 8005a10:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a20:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	330c      	adds	r3, #12
 8005a28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a2a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a30:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e5      	bne.n	8005a0a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3314      	adds	r3, #20
 8005a44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3314      	adds	r3, #20
 8005a5c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e5      	bne.n	8005a3e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d119      	bne.n	8005aae <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	330c      	adds	r3, #12
 8005a80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	e853 3f00 	ldrex	r3, [r3]
 8005a88:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	f023 0310 	bic.w	r3, r3, #16
 8005a90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	330c      	adds	r3, #12
 8005a98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a9a:	61ba      	str	r2, [r7, #24]
 8005a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9e:	6979      	ldr	r1, [r7, #20]
 8005aa0:	69ba      	ldr	r2, [r7, #24]
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	613b      	str	r3, [r7, #16]
   return(result);
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d1e5      	bne.n	8005a7a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2220      	movs	r2, #32
 8005ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005abc:	bf00      	nop
 8005abe:	3754      	adds	r7, #84	@ 0x54
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b084      	sub	sp, #16
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ad4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f7ff ff1e 	bl	8005924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ae8:	bf00      	nop
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b085      	sub	sp, #20
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	2b21      	cmp	r3, #33	@ 0x21
 8005b02:	d13e      	bne.n	8005b82 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b0c:	d114      	bne.n	8005b38 <UART_Transmit_IT+0x48>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d110      	bne.n	8005b38 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	881b      	ldrh	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b2a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a1b      	ldr	r3, [r3, #32]
 8005b30:	1c9a      	adds	r2, r3, #2
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	621a      	str	r2, [r3, #32]
 8005b36:	e008      	b.n	8005b4a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	1c59      	adds	r1, r3, #1
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	6211      	str	r1, [r2, #32]
 8005b42:	781a      	ldrb	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	3b01      	subs	r3, #1
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	687a      	ldr	r2, [r7, #4]
 8005b56:	4619      	mov	r1, r3
 8005b58:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10f      	bne.n	8005b7e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	68da      	ldr	r2, [r3, #12]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b6c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b7c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e000      	b.n	8005b84 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b082      	sub	sp, #8
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68da      	ldr	r2, [r3, #12]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ba6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2220      	movs	r2, #32
 8005bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f7ff fea3 	bl	80058fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08c      	sub	sp, #48	@ 0x30
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b22      	cmp	r3, #34	@ 0x22
 8005bd2:	f040 80ae 	bne.w	8005d32 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bde:	d117      	bne.n	8005c10 <UART_Receive_IT+0x50>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d113      	bne.n	8005c10 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005be8:	2300      	movs	r3, #0
 8005bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c02:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c08:	1c9a      	adds	r2, r3, #2
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c0e:	e026      	b.n	8005c5e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c16:	2300      	movs	r3, #0
 8005c18:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c22:	d007      	beq.n	8005c34 <UART_Receive_IT+0x74>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <UART_Receive_IT+0x82>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d106      	bne.n	8005c42 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c3e:	701a      	strb	r2, [r3, #0]
 8005c40:	e008      	b.n	8005c54 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c4e:	b2da      	uxtb	r2, r3
 8005c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c52:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c58:	1c5a      	adds	r2, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29b      	uxth	r3, r3
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d15d      	bne.n	8005d2e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	68da      	ldr	r2, [r3, #12]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f022 0220 	bic.w	r2, r2, #32
 8005c80:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	68da      	ldr	r2, [r3, #12]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c90:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	695a      	ldr	r2, [r3, #20]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f022 0201 	bic.w	r2, r2, #1
 8005ca0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d135      	bne.n	8005d24 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	330c      	adds	r3, #12
 8005cc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	613b      	str	r3, [r7, #16]
   return(result);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	f023 0310 	bic.w	r3, r3, #16
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	330c      	adds	r3, #12
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cde:	623a      	str	r2, [r7, #32]
 8005ce0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	69f9      	ldr	r1, [r7, #28]
 8005ce4:	6a3a      	ldr	r2, [r7, #32]
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e5      	bne.n	8005cbe <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0310 	and.w	r3, r3, #16
 8005cfc:	2b10      	cmp	r3, #16
 8005cfe:	d10a      	bne.n	8005d16 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d00:	2300      	movs	r3, #0
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	60fb      	str	r3, [r7, #12]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	60fb      	str	r3, [r7, #12]
 8005d14:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f7ff fe0b 	bl	8005938 <HAL_UARTEx_RxEventCallback>
 8005d22:	e002      	b.n	8005d2a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f7ff fdf3 	bl	8005910 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e002      	b.n	8005d34 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	e000      	b.n	8005d34 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d32:	2302      	movs	r3, #2
  }
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3730      	adds	r7, #48	@ 0x30
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	bd80      	pop	{r7, pc}

08005d3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d40:	b0c0      	sub	sp, #256	@ 0x100
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d58:	68d9      	ldr	r1, [r3, #12]
 8005d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d5e:	681a      	ldr	r2, [r3, #0]
 8005d60:	ea40 0301 	orr.w	r3, r0, r1
 8005d64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	431a      	orrs	r2, r3
 8005d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	431a      	orrs	r2, r3
 8005d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	4313      	orrs	r3, r2
 8005d84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d94:	f021 010c 	bic.w	r1, r1, #12
 8005d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005da2:	430b      	orrs	r3, r1
 8005da4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	695b      	ldr	r3, [r3, #20]
 8005dae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db6:	6999      	ldr	r1, [r3, #24]
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	ea40 0301 	orr.w	r3, r0, r1
 8005dc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	4b8f      	ldr	r3, [pc, #572]	@ (8006008 <UART_SetConfig+0x2cc>)
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d005      	beq.n	8005ddc <UART_SetConfig+0xa0>
 8005dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4b8d      	ldr	r3, [pc, #564]	@ (800600c <UART_SetConfig+0x2d0>)
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d104      	bne.n	8005de6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ddc:	f7fe f87a 	bl	8003ed4 <HAL_RCC_GetPCLK2Freq>
 8005de0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005de4:	e003      	b.n	8005dee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005de6:	f7fe f861 	bl	8003eac <HAL_RCC_GetPCLK1Freq>
 8005dea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005df2:	69db      	ldr	r3, [r3, #28]
 8005df4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005df8:	f040 810c 	bne.w	8006014 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005dfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e00:	2200      	movs	r2, #0
 8005e02:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e06:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e0a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e0e:	4622      	mov	r2, r4
 8005e10:	462b      	mov	r3, r5
 8005e12:	1891      	adds	r1, r2, r2
 8005e14:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e16:	415b      	adcs	r3, r3
 8005e18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e1a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e1e:	4621      	mov	r1, r4
 8005e20:	eb12 0801 	adds.w	r8, r2, r1
 8005e24:	4629      	mov	r1, r5
 8005e26:	eb43 0901 	adc.w	r9, r3, r1
 8005e2a:	f04f 0200 	mov.w	r2, #0
 8005e2e:	f04f 0300 	mov.w	r3, #0
 8005e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e3e:	4690      	mov	r8, r2
 8005e40:	4699      	mov	r9, r3
 8005e42:	4623      	mov	r3, r4
 8005e44:	eb18 0303 	adds.w	r3, r8, r3
 8005e48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005e4c:	462b      	mov	r3, r5
 8005e4e:	eb49 0303 	adc.w	r3, r9, r3
 8005e52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005e62:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005e66:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	18db      	adds	r3, r3, r3
 8005e6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005e70:	4613      	mov	r3, r2
 8005e72:	eb42 0303 	adc.w	r3, r2, r3
 8005e76:	657b      	str	r3, [r7, #84]	@ 0x54
 8005e78:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005e7c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e80:	f7fa fe24 	bl	8000acc <__aeabi_uldivmod>
 8005e84:	4602      	mov	r2, r0
 8005e86:	460b      	mov	r3, r1
 8005e88:	4b61      	ldr	r3, [pc, #388]	@ (8006010 <UART_SetConfig+0x2d4>)
 8005e8a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e8e:	095b      	lsrs	r3, r3, #5
 8005e90:	011c      	lsls	r4, r3, #4
 8005e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e96:	2200      	movs	r2, #0
 8005e98:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e9c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ea0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ea4:	4642      	mov	r2, r8
 8005ea6:	464b      	mov	r3, r9
 8005ea8:	1891      	adds	r1, r2, r2
 8005eaa:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005eac:	415b      	adcs	r3, r3
 8005eae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005eb0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005eb4:	4641      	mov	r1, r8
 8005eb6:	eb12 0a01 	adds.w	sl, r2, r1
 8005eba:	4649      	mov	r1, r9
 8005ebc:	eb43 0b01 	adc.w	fp, r3, r1
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	f04f 0300 	mov.w	r3, #0
 8005ec8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ecc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ed0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005ed4:	4692      	mov	sl, r2
 8005ed6:	469b      	mov	fp, r3
 8005ed8:	4643      	mov	r3, r8
 8005eda:	eb1a 0303 	adds.w	r3, sl, r3
 8005ede:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005ee2:	464b      	mov	r3, r9
 8005ee4:	eb4b 0303 	adc.w	r3, fp, r3
 8005ee8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005ef8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005efc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f00:	460b      	mov	r3, r1
 8005f02:	18db      	adds	r3, r3, r3
 8005f04:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f06:	4613      	mov	r3, r2
 8005f08:	eb42 0303 	adc.w	r3, r2, r3
 8005f0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f0e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f12:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f16:	f7fa fdd9 	bl	8000acc <__aeabi_uldivmod>
 8005f1a:	4602      	mov	r2, r0
 8005f1c:	460b      	mov	r3, r1
 8005f1e:	4611      	mov	r1, r2
 8005f20:	4b3b      	ldr	r3, [pc, #236]	@ (8006010 <UART_SetConfig+0x2d4>)
 8005f22:	fba3 2301 	umull	r2, r3, r3, r1
 8005f26:	095b      	lsrs	r3, r3, #5
 8005f28:	2264      	movs	r2, #100	@ 0x64
 8005f2a:	fb02 f303 	mul.w	r3, r2, r3
 8005f2e:	1acb      	subs	r3, r1, r3
 8005f30:	00db      	lsls	r3, r3, #3
 8005f32:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f36:	4b36      	ldr	r3, [pc, #216]	@ (8006010 <UART_SetConfig+0x2d4>)
 8005f38:	fba3 2302 	umull	r2, r3, r3, r2
 8005f3c:	095b      	lsrs	r3, r3, #5
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005f44:	441c      	add	r4, r3
 8005f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f50:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005f54:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005f58:	4642      	mov	r2, r8
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	1891      	adds	r1, r2, r2
 8005f5e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f60:	415b      	adcs	r3, r3
 8005f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f64:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005f68:	4641      	mov	r1, r8
 8005f6a:	1851      	adds	r1, r2, r1
 8005f6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005f6e:	4649      	mov	r1, r9
 8005f70:	414b      	adcs	r3, r1
 8005f72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f80:	4659      	mov	r1, fp
 8005f82:	00cb      	lsls	r3, r1, #3
 8005f84:	4651      	mov	r1, sl
 8005f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f8a:	4651      	mov	r1, sl
 8005f8c:	00ca      	lsls	r2, r1, #3
 8005f8e:	4610      	mov	r0, r2
 8005f90:	4619      	mov	r1, r3
 8005f92:	4603      	mov	r3, r0
 8005f94:	4642      	mov	r2, r8
 8005f96:	189b      	adds	r3, r3, r2
 8005f98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	460a      	mov	r2, r1
 8005fa0:	eb42 0303 	adc.w	r3, r2, r3
 8005fa4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005fb4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005fb8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005fbc:	460b      	mov	r3, r1
 8005fbe:	18db      	adds	r3, r3, r3
 8005fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	eb42 0303 	adc.w	r3, r2, r3
 8005fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005fce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005fd2:	f7fa fd7b 	bl	8000acc <__aeabi_uldivmod>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4b0d      	ldr	r3, [pc, #52]	@ (8006010 <UART_SetConfig+0x2d4>)
 8005fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8005fe0:	095b      	lsrs	r3, r3, #5
 8005fe2:	2164      	movs	r1, #100	@ 0x64
 8005fe4:	fb01 f303 	mul.w	r3, r1, r3
 8005fe8:	1ad3      	subs	r3, r2, r3
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	3332      	adds	r3, #50	@ 0x32
 8005fee:	4a08      	ldr	r2, [pc, #32]	@ (8006010 <UART_SetConfig+0x2d4>)
 8005ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff4:	095b      	lsrs	r3, r3, #5
 8005ff6:	f003 0207 	and.w	r2, r3, #7
 8005ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4422      	add	r2, r4
 8006002:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006004:	e106      	b.n	8006214 <UART_SetConfig+0x4d8>
 8006006:	bf00      	nop
 8006008:	40011000 	.word	0x40011000
 800600c:	40011400 	.word	0x40011400
 8006010:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006014:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006018:	2200      	movs	r2, #0
 800601a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800601e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006022:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006026:	4642      	mov	r2, r8
 8006028:	464b      	mov	r3, r9
 800602a:	1891      	adds	r1, r2, r2
 800602c:	6239      	str	r1, [r7, #32]
 800602e:	415b      	adcs	r3, r3
 8006030:	627b      	str	r3, [r7, #36]	@ 0x24
 8006032:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006036:	4641      	mov	r1, r8
 8006038:	1854      	adds	r4, r2, r1
 800603a:	4649      	mov	r1, r9
 800603c:	eb43 0501 	adc.w	r5, r3, r1
 8006040:	f04f 0200 	mov.w	r2, #0
 8006044:	f04f 0300 	mov.w	r3, #0
 8006048:	00eb      	lsls	r3, r5, #3
 800604a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800604e:	00e2      	lsls	r2, r4, #3
 8006050:	4614      	mov	r4, r2
 8006052:	461d      	mov	r5, r3
 8006054:	4643      	mov	r3, r8
 8006056:	18e3      	adds	r3, r4, r3
 8006058:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800605c:	464b      	mov	r3, r9
 800605e:	eb45 0303 	adc.w	r3, r5, r3
 8006062:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006072:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	f04f 0300 	mov.w	r3, #0
 800607e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006082:	4629      	mov	r1, r5
 8006084:	008b      	lsls	r3, r1, #2
 8006086:	4621      	mov	r1, r4
 8006088:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800608c:	4621      	mov	r1, r4
 800608e:	008a      	lsls	r2, r1, #2
 8006090:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006094:	f7fa fd1a 	bl	8000acc <__aeabi_uldivmod>
 8006098:	4602      	mov	r2, r0
 800609a:	460b      	mov	r3, r1
 800609c:	4b60      	ldr	r3, [pc, #384]	@ (8006220 <UART_SetConfig+0x4e4>)
 800609e:	fba3 2302 	umull	r2, r3, r3, r2
 80060a2:	095b      	lsrs	r3, r3, #5
 80060a4:	011c      	lsls	r4, r3, #4
 80060a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80060b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80060b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80060b8:	4642      	mov	r2, r8
 80060ba:	464b      	mov	r3, r9
 80060bc:	1891      	adds	r1, r2, r2
 80060be:	61b9      	str	r1, [r7, #24]
 80060c0:	415b      	adcs	r3, r3
 80060c2:	61fb      	str	r3, [r7, #28]
 80060c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060c8:	4641      	mov	r1, r8
 80060ca:	1851      	adds	r1, r2, r1
 80060cc:	6139      	str	r1, [r7, #16]
 80060ce:	4649      	mov	r1, r9
 80060d0:	414b      	adcs	r3, r1
 80060d2:	617b      	str	r3, [r7, #20]
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80060e0:	4659      	mov	r1, fp
 80060e2:	00cb      	lsls	r3, r1, #3
 80060e4:	4651      	mov	r1, sl
 80060e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ea:	4651      	mov	r1, sl
 80060ec:	00ca      	lsls	r2, r1, #3
 80060ee:	4610      	mov	r0, r2
 80060f0:	4619      	mov	r1, r3
 80060f2:	4603      	mov	r3, r0
 80060f4:	4642      	mov	r2, r8
 80060f6:	189b      	adds	r3, r3, r2
 80060f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80060fc:	464b      	mov	r3, r9
 80060fe:	460a      	mov	r2, r1
 8006100:	eb42 0303 	adc.w	r3, r2, r3
 8006104:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006112:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006114:	f04f 0200 	mov.w	r2, #0
 8006118:	f04f 0300 	mov.w	r3, #0
 800611c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006120:	4649      	mov	r1, r9
 8006122:	008b      	lsls	r3, r1, #2
 8006124:	4641      	mov	r1, r8
 8006126:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800612a:	4641      	mov	r1, r8
 800612c:	008a      	lsls	r2, r1, #2
 800612e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006132:	f7fa fccb 	bl	8000acc <__aeabi_uldivmod>
 8006136:	4602      	mov	r2, r0
 8006138:	460b      	mov	r3, r1
 800613a:	4611      	mov	r1, r2
 800613c:	4b38      	ldr	r3, [pc, #224]	@ (8006220 <UART_SetConfig+0x4e4>)
 800613e:	fba3 2301 	umull	r2, r3, r3, r1
 8006142:	095b      	lsrs	r3, r3, #5
 8006144:	2264      	movs	r2, #100	@ 0x64
 8006146:	fb02 f303 	mul.w	r3, r2, r3
 800614a:	1acb      	subs	r3, r1, r3
 800614c:	011b      	lsls	r3, r3, #4
 800614e:	3332      	adds	r3, #50	@ 0x32
 8006150:	4a33      	ldr	r2, [pc, #204]	@ (8006220 <UART_SetConfig+0x4e4>)
 8006152:	fba2 2303 	umull	r2, r3, r2, r3
 8006156:	095b      	lsrs	r3, r3, #5
 8006158:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800615c:	441c      	add	r4, r3
 800615e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006162:	2200      	movs	r2, #0
 8006164:	673b      	str	r3, [r7, #112]	@ 0x70
 8006166:	677a      	str	r2, [r7, #116]	@ 0x74
 8006168:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800616c:	4642      	mov	r2, r8
 800616e:	464b      	mov	r3, r9
 8006170:	1891      	adds	r1, r2, r2
 8006172:	60b9      	str	r1, [r7, #8]
 8006174:	415b      	adcs	r3, r3
 8006176:	60fb      	str	r3, [r7, #12]
 8006178:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800617c:	4641      	mov	r1, r8
 800617e:	1851      	adds	r1, r2, r1
 8006180:	6039      	str	r1, [r7, #0]
 8006182:	4649      	mov	r1, r9
 8006184:	414b      	adcs	r3, r1
 8006186:	607b      	str	r3, [r7, #4]
 8006188:	f04f 0200 	mov.w	r2, #0
 800618c:	f04f 0300 	mov.w	r3, #0
 8006190:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006194:	4659      	mov	r1, fp
 8006196:	00cb      	lsls	r3, r1, #3
 8006198:	4651      	mov	r1, sl
 800619a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800619e:	4651      	mov	r1, sl
 80061a0:	00ca      	lsls	r2, r1, #3
 80061a2:	4610      	mov	r0, r2
 80061a4:	4619      	mov	r1, r3
 80061a6:	4603      	mov	r3, r0
 80061a8:	4642      	mov	r2, r8
 80061aa:	189b      	adds	r3, r3, r2
 80061ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80061ae:	464b      	mov	r3, r9
 80061b0:	460a      	mov	r2, r1
 80061b2:	eb42 0303 	adc.w	r3, r2, r3
 80061b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80061b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80061c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80061c4:	f04f 0200 	mov.w	r2, #0
 80061c8:	f04f 0300 	mov.w	r3, #0
 80061cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80061d0:	4649      	mov	r1, r9
 80061d2:	008b      	lsls	r3, r1, #2
 80061d4:	4641      	mov	r1, r8
 80061d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061da:	4641      	mov	r1, r8
 80061dc:	008a      	lsls	r2, r1, #2
 80061de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80061e2:	f7fa fc73 	bl	8000acc <__aeabi_uldivmod>
 80061e6:	4602      	mov	r2, r0
 80061e8:	460b      	mov	r3, r1
 80061ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006220 <UART_SetConfig+0x4e4>)
 80061ec:	fba3 1302 	umull	r1, r3, r3, r2
 80061f0:	095b      	lsrs	r3, r3, #5
 80061f2:	2164      	movs	r1, #100	@ 0x64
 80061f4:	fb01 f303 	mul.w	r3, r1, r3
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	3332      	adds	r3, #50	@ 0x32
 80061fe:	4a08      	ldr	r2, [pc, #32]	@ (8006220 <UART_SetConfig+0x4e4>)
 8006200:	fba2 2303 	umull	r2, r3, r2, r3
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	f003 020f 	and.w	r2, r3, #15
 800620a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	4422      	add	r2, r4
 8006212:	609a      	str	r2, [r3, #8]
}
 8006214:	bf00      	nop
 8006216:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800621a:	46bd      	mov	sp, r7
 800621c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006220:	51eb851f 	.word	0x51eb851f

08006224 <sniprintf>:
 8006224:	b40c      	push	{r2, r3}
 8006226:	b530      	push	{r4, r5, lr}
 8006228:	4b17      	ldr	r3, [pc, #92]	@ (8006288 <sniprintf+0x64>)
 800622a:	1e0c      	subs	r4, r1, #0
 800622c:	681d      	ldr	r5, [r3, #0]
 800622e:	b09d      	sub	sp, #116	@ 0x74
 8006230:	da08      	bge.n	8006244 <sniprintf+0x20>
 8006232:	238b      	movs	r3, #139	@ 0x8b
 8006234:	602b      	str	r3, [r5, #0]
 8006236:	f04f 30ff 	mov.w	r0, #4294967295
 800623a:	b01d      	add	sp, #116	@ 0x74
 800623c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006240:	b002      	add	sp, #8
 8006242:	4770      	bx	lr
 8006244:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006248:	f8ad 3014 	strh.w	r3, [sp, #20]
 800624c:	bf14      	ite	ne
 800624e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006252:	4623      	moveq	r3, r4
 8006254:	9304      	str	r3, [sp, #16]
 8006256:	9307      	str	r3, [sp, #28]
 8006258:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800625c:	9002      	str	r0, [sp, #8]
 800625e:	9006      	str	r0, [sp, #24]
 8006260:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006264:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006266:	ab21      	add	r3, sp, #132	@ 0x84
 8006268:	a902      	add	r1, sp, #8
 800626a:	4628      	mov	r0, r5
 800626c:	9301      	str	r3, [sp, #4]
 800626e:	f000 f995 	bl	800659c <_svfiprintf_r>
 8006272:	1c43      	adds	r3, r0, #1
 8006274:	bfbc      	itt	lt
 8006276:	238b      	movlt	r3, #139	@ 0x8b
 8006278:	602b      	strlt	r3, [r5, #0]
 800627a:	2c00      	cmp	r4, #0
 800627c:	d0dd      	beq.n	800623a <sniprintf+0x16>
 800627e:	9b02      	ldr	r3, [sp, #8]
 8006280:	2200      	movs	r2, #0
 8006282:	701a      	strb	r2, [r3, #0]
 8006284:	e7d9      	b.n	800623a <sniprintf+0x16>
 8006286:	bf00      	nop
 8006288:	20000018 	.word	0x20000018

0800628c <memset>:
 800628c:	4402      	add	r2, r0
 800628e:	4603      	mov	r3, r0
 8006290:	4293      	cmp	r3, r2
 8006292:	d100      	bne.n	8006296 <memset+0xa>
 8006294:	4770      	bx	lr
 8006296:	f803 1b01 	strb.w	r1, [r3], #1
 800629a:	e7f9      	b.n	8006290 <memset+0x4>

0800629c <__errno>:
 800629c:	4b01      	ldr	r3, [pc, #4]	@ (80062a4 <__errno+0x8>)
 800629e:	6818      	ldr	r0, [r3, #0]
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	20000018 	.word	0x20000018

080062a8 <__libc_init_array>:
 80062a8:	b570      	push	{r4, r5, r6, lr}
 80062aa:	4d0d      	ldr	r5, [pc, #52]	@ (80062e0 <__libc_init_array+0x38>)
 80062ac:	4c0d      	ldr	r4, [pc, #52]	@ (80062e4 <__libc_init_array+0x3c>)
 80062ae:	1b64      	subs	r4, r4, r5
 80062b0:	10a4      	asrs	r4, r4, #2
 80062b2:	2600      	movs	r6, #0
 80062b4:	42a6      	cmp	r6, r4
 80062b6:	d109      	bne.n	80062cc <__libc_init_array+0x24>
 80062b8:	4d0b      	ldr	r5, [pc, #44]	@ (80062e8 <__libc_init_array+0x40>)
 80062ba:	4c0c      	ldr	r4, [pc, #48]	@ (80062ec <__libc_init_array+0x44>)
 80062bc:	f000 fc66 	bl	8006b8c <_init>
 80062c0:	1b64      	subs	r4, r4, r5
 80062c2:	10a4      	asrs	r4, r4, #2
 80062c4:	2600      	movs	r6, #0
 80062c6:	42a6      	cmp	r6, r4
 80062c8:	d105      	bne.n	80062d6 <__libc_init_array+0x2e>
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
 80062cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80062d0:	4798      	blx	r3
 80062d2:	3601      	adds	r6, #1
 80062d4:	e7ee      	b.n	80062b4 <__libc_init_array+0xc>
 80062d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80062da:	4798      	blx	r3
 80062dc:	3601      	adds	r6, #1
 80062de:	e7f2      	b.n	80062c6 <__libc_init_array+0x1e>
 80062e0:	08006cac 	.word	0x08006cac
 80062e4:	08006cac 	.word	0x08006cac
 80062e8:	08006cac 	.word	0x08006cac
 80062ec:	08006cb0 	.word	0x08006cb0

080062f0 <__retarget_lock_acquire_recursive>:
 80062f0:	4770      	bx	lr

080062f2 <__retarget_lock_release_recursive>:
 80062f2:	4770      	bx	lr

080062f4 <_free_r>:
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	4605      	mov	r5, r0
 80062f8:	2900      	cmp	r1, #0
 80062fa:	d041      	beq.n	8006380 <_free_r+0x8c>
 80062fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006300:	1f0c      	subs	r4, r1, #4
 8006302:	2b00      	cmp	r3, #0
 8006304:	bfb8      	it	lt
 8006306:	18e4      	addlt	r4, r4, r3
 8006308:	f000 f8e0 	bl	80064cc <__malloc_lock>
 800630c:	4a1d      	ldr	r2, [pc, #116]	@ (8006384 <_free_r+0x90>)
 800630e:	6813      	ldr	r3, [r2, #0]
 8006310:	b933      	cbnz	r3, 8006320 <_free_r+0x2c>
 8006312:	6063      	str	r3, [r4, #4]
 8006314:	6014      	str	r4, [r2, #0]
 8006316:	4628      	mov	r0, r5
 8006318:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800631c:	f000 b8dc 	b.w	80064d8 <__malloc_unlock>
 8006320:	42a3      	cmp	r3, r4
 8006322:	d908      	bls.n	8006336 <_free_r+0x42>
 8006324:	6820      	ldr	r0, [r4, #0]
 8006326:	1821      	adds	r1, r4, r0
 8006328:	428b      	cmp	r3, r1
 800632a:	bf01      	itttt	eq
 800632c:	6819      	ldreq	r1, [r3, #0]
 800632e:	685b      	ldreq	r3, [r3, #4]
 8006330:	1809      	addeq	r1, r1, r0
 8006332:	6021      	streq	r1, [r4, #0]
 8006334:	e7ed      	b.n	8006312 <_free_r+0x1e>
 8006336:	461a      	mov	r2, r3
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	b10b      	cbz	r3, 8006340 <_free_r+0x4c>
 800633c:	42a3      	cmp	r3, r4
 800633e:	d9fa      	bls.n	8006336 <_free_r+0x42>
 8006340:	6811      	ldr	r1, [r2, #0]
 8006342:	1850      	adds	r0, r2, r1
 8006344:	42a0      	cmp	r0, r4
 8006346:	d10b      	bne.n	8006360 <_free_r+0x6c>
 8006348:	6820      	ldr	r0, [r4, #0]
 800634a:	4401      	add	r1, r0
 800634c:	1850      	adds	r0, r2, r1
 800634e:	4283      	cmp	r3, r0
 8006350:	6011      	str	r1, [r2, #0]
 8006352:	d1e0      	bne.n	8006316 <_free_r+0x22>
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	6053      	str	r3, [r2, #4]
 800635a:	4408      	add	r0, r1
 800635c:	6010      	str	r0, [r2, #0]
 800635e:	e7da      	b.n	8006316 <_free_r+0x22>
 8006360:	d902      	bls.n	8006368 <_free_r+0x74>
 8006362:	230c      	movs	r3, #12
 8006364:	602b      	str	r3, [r5, #0]
 8006366:	e7d6      	b.n	8006316 <_free_r+0x22>
 8006368:	6820      	ldr	r0, [r4, #0]
 800636a:	1821      	adds	r1, r4, r0
 800636c:	428b      	cmp	r3, r1
 800636e:	bf04      	itt	eq
 8006370:	6819      	ldreq	r1, [r3, #0]
 8006372:	685b      	ldreq	r3, [r3, #4]
 8006374:	6063      	str	r3, [r4, #4]
 8006376:	bf04      	itt	eq
 8006378:	1809      	addeq	r1, r1, r0
 800637a:	6021      	streq	r1, [r4, #0]
 800637c:	6054      	str	r4, [r2, #4]
 800637e:	e7ca      	b.n	8006316 <_free_r+0x22>
 8006380:	bd38      	pop	{r3, r4, r5, pc}
 8006382:	bf00      	nop
 8006384:	200003c4 	.word	0x200003c4

08006388 <sbrk_aligned>:
 8006388:	b570      	push	{r4, r5, r6, lr}
 800638a:	4e0f      	ldr	r6, [pc, #60]	@ (80063c8 <sbrk_aligned+0x40>)
 800638c:	460c      	mov	r4, r1
 800638e:	6831      	ldr	r1, [r6, #0]
 8006390:	4605      	mov	r5, r0
 8006392:	b911      	cbnz	r1, 800639a <sbrk_aligned+0x12>
 8006394:	f000 fba6 	bl	8006ae4 <_sbrk_r>
 8006398:	6030      	str	r0, [r6, #0]
 800639a:	4621      	mov	r1, r4
 800639c:	4628      	mov	r0, r5
 800639e:	f000 fba1 	bl	8006ae4 <_sbrk_r>
 80063a2:	1c43      	adds	r3, r0, #1
 80063a4:	d103      	bne.n	80063ae <sbrk_aligned+0x26>
 80063a6:	f04f 34ff 	mov.w	r4, #4294967295
 80063aa:	4620      	mov	r0, r4
 80063ac:	bd70      	pop	{r4, r5, r6, pc}
 80063ae:	1cc4      	adds	r4, r0, #3
 80063b0:	f024 0403 	bic.w	r4, r4, #3
 80063b4:	42a0      	cmp	r0, r4
 80063b6:	d0f8      	beq.n	80063aa <sbrk_aligned+0x22>
 80063b8:	1a21      	subs	r1, r4, r0
 80063ba:	4628      	mov	r0, r5
 80063bc:	f000 fb92 	bl	8006ae4 <_sbrk_r>
 80063c0:	3001      	adds	r0, #1
 80063c2:	d1f2      	bne.n	80063aa <sbrk_aligned+0x22>
 80063c4:	e7ef      	b.n	80063a6 <sbrk_aligned+0x1e>
 80063c6:	bf00      	nop
 80063c8:	200003c0 	.word	0x200003c0

080063cc <_malloc_r>:
 80063cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063d0:	1ccd      	adds	r5, r1, #3
 80063d2:	f025 0503 	bic.w	r5, r5, #3
 80063d6:	3508      	adds	r5, #8
 80063d8:	2d0c      	cmp	r5, #12
 80063da:	bf38      	it	cc
 80063dc:	250c      	movcc	r5, #12
 80063de:	2d00      	cmp	r5, #0
 80063e0:	4606      	mov	r6, r0
 80063e2:	db01      	blt.n	80063e8 <_malloc_r+0x1c>
 80063e4:	42a9      	cmp	r1, r5
 80063e6:	d904      	bls.n	80063f2 <_malloc_r+0x26>
 80063e8:	230c      	movs	r3, #12
 80063ea:	6033      	str	r3, [r6, #0]
 80063ec:	2000      	movs	r0, #0
 80063ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80064c8 <_malloc_r+0xfc>
 80063f6:	f000 f869 	bl	80064cc <__malloc_lock>
 80063fa:	f8d8 3000 	ldr.w	r3, [r8]
 80063fe:	461c      	mov	r4, r3
 8006400:	bb44      	cbnz	r4, 8006454 <_malloc_r+0x88>
 8006402:	4629      	mov	r1, r5
 8006404:	4630      	mov	r0, r6
 8006406:	f7ff ffbf 	bl	8006388 <sbrk_aligned>
 800640a:	1c43      	adds	r3, r0, #1
 800640c:	4604      	mov	r4, r0
 800640e:	d158      	bne.n	80064c2 <_malloc_r+0xf6>
 8006410:	f8d8 4000 	ldr.w	r4, [r8]
 8006414:	4627      	mov	r7, r4
 8006416:	2f00      	cmp	r7, #0
 8006418:	d143      	bne.n	80064a2 <_malloc_r+0xd6>
 800641a:	2c00      	cmp	r4, #0
 800641c:	d04b      	beq.n	80064b6 <_malloc_r+0xea>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	4639      	mov	r1, r7
 8006422:	4630      	mov	r0, r6
 8006424:	eb04 0903 	add.w	r9, r4, r3
 8006428:	f000 fb5c 	bl	8006ae4 <_sbrk_r>
 800642c:	4581      	cmp	r9, r0
 800642e:	d142      	bne.n	80064b6 <_malloc_r+0xea>
 8006430:	6821      	ldr	r1, [r4, #0]
 8006432:	1a6d      	subs	r5, r5, r1
 8006434:	4629      	mov	r1, r5
 8006436:	4630      	mov	r0, r6
 8006438:	f7ff ffa6 	bl	8006388 <sbrk_aligned>
 800643c:	3001      	adds	r0, #1
 800643e:	d03a      	beq.n	80064b6 <_malloc_r+0xea>
 8006440:	6823      	ldr	r3, [r4, #0]
 8006442:	442b      	add	r3, r5
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	f8d8 3000 	ldr.w	r3, [r8]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	bb62      	cbnz	r2, 80064a8 <_malloc_r+0xdc>
 800644e:	f8c8 7000 	str.w	r7, [r8]
 8006452:	e00f      	b.n	8006474 <_malloc_r+0xa8>
 8006454:	6822      	ldr	r2, [r4, #0]
 8006456:	1b52      	subs	r2, r2, r5
 8006458:	d420      	bmi.n	800649c <_malloc_r+0xd0>
 800645a:	2a0b      	cmp	r2, #11
 800645c:	d917      	bls.n	800648e <_malloc_r+0xc2>
 800645e:	1961      	adds	r1, r4, r5
 8006460:	42a3      	cmp	r3, r4
 8006462:	6025      	str	r5, [r4, #0]
 8006464:	bf18      	it	ne
 8006466:	6059      	strne	r1, [r3, #4]
 8006468:	6863      	ldr	r3, [r4, #4]
 800646a:	bf08      	it	eq
 800646c:	f8c8 1000 	streq.w	r1, [r8]
 8006470:	5162      	str	r2, [r4, r5]
 8006472:	604b      	str	r3, [r1, #4]
 8006474:	4630      	mov	r0, r6
 8006476:	f000 f82f 	bl	80064d8 <__malloc_unlock>
 800647a:	f104 000b 	add.w	r0, r4, #11
 800647e:	1d23      	adds	r3, r4, #4
 8006480:	f020 0007 	bic.w	r0, r0, #7
 8006484:	1ac2      	subs	r2, r0, r3
 8006486:	bf1c      	itt	ne
 8006488:	1a1b      	subne	r3, r3, r0
 800648a:	50a3      	strne	r3, [r4, r2]
 800648c:	e7af      	b.n	80063ee <_malloc_r+0x22>
 800648e:	6862      	ldr	r2, [r4, #4]
 8006490:	42a3      	cmp	r3, r4
 8006492:	bf0c      	ite	eq
 8006494:	f8c8 2000 	streq.w	r2, [r8]
 8006498:	605a      	strne	r2, [r3, #4]
 800649a:	e7eb      	b.n	8006474 <_malloc_r+0xa8>
 800649c:	4623      	mov	r3, r4
 800649e:	6864      	ldr	r4, [r4, #4]
 80064a0:	e7ae      	b.n	8006400 <_malloc_r+0x34>
 80064a2:	463c      	mov	r4, r7
 80064a4:	687f      	ldr	r7, [r7, #4]
 80064a6:	e7b6      	b.n	8006416 <_malloc_r+0x4a>
 80064a8:	461a      	mov	r2, r3
 80064aa:	685b      	ldr	r3, [r3, #4]
 80064ac:	42a3      	cmp	r3, r4
 80064ae:	d1fb      	bne.n	80064a8 <_malloc_r+0xdc>
 80064b0:	2300      	movs	r3, #0
 80064b2:	6053      	str	r3, [r2, #4]
 80064b4:	e7de      	b.n	8006474 <_malloc_r+0xa8>
 80064b6:	230c      	movs	r3, #12
 80064b8:	6033      	str	r3, [r6, #0]
 80064ba:	4630      	mov	r0, r6
 80064bc:	f000 f80c 	bl	80064d8 <__malloc_unlock>
 80064c0:	e794      	b.n	80063ec <_malloc_r+0x20>
 80064c2:	6005      	str	r5, [r0, #0]
 80064c4:	e7d6      	b.n	8006474 <_malloc_r+0xa8>
 80064c6:	bf00      	nop
 80064c8:	200003c4 	.word	0x200003c4

080064cc <__malloc_lock>:
 80064cc:	4801      	ldr	r0, [pc, #4]	@ (80064d4 <__malloc_lock+0x8>)
 80064ce:	f7ff bf0f 	b.w	80062f0 <__retarget_lock_acquire_recursive>
 80064d2:	bf00      	nop
 80064d4:	200003bc 	.word	0x200003bc

080064d8 <__malloc_unlock>:
 80064d8:	4801      	ldr	r0, [pc, #4]	@ (80064e0 <__malloc_unlock+0x8>)
 80064da:	f7ff bf0a 	b.w	80062f2 <__retarget_lock_release_recursive>
 80064de:	bf00      	nop
 80064e0:	200003bc 	.word	0x200003bc

080064e4 <__ssputs_r>:
 80064e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064e8:	688e      	ldr	r6, [r1, #8]
 80064ea:	461f      	mov	r7, r3
 80064ec:	42be      	cmp	r6, r7
 80064ee:	680b      	ldr	r3, [r1, #0]
 80064f0:	4682      	mov	sl, r0
 80064f2:	460c      	mov	r4, r1
 80064f4:	4690      	mov	r8, r2
 80064f6:	d82d      	bhi.n	8006554 <__ssputs_r+0x70>
 80064f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80064fc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006500:	d026      	beq.n	8006550 <__ssputs_r+0x6c>
 8006502:	6965      	ldr	r5, [r4, #20]
 8006504:	6909      	ldr	r1, [r1, #16]
 8006506:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800650a:	eba3 0901 	sub.w	r9, r3, r1
 800650e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006512:	1c7b      	adds	r3, r7, #1
 8006514:	444b      	add	r3, r9
 8006516:	106d      	asrs	r5, r5, #1
 8006518:	429d      	cmp	r5, r3
 800651a:	bf38      	it	cc
 800651c:	461d      	movcc	r5, r3
 800651e:	0553      	lsls	r3, r2, #21
 8006520:	d527      	bpl.n	8006572 <__ssputs_r+0x8e>
 8006522:	4629      	mov	r1, r5
 8006524:	f7ff ff52 	bl	80063cc <_malloc_r>
 8006528:	4606      	mov	r6, r0
 800652a:	b360      	cbz	r0, 8006586 <__ssputs_r+0xa2>
 800652c:	6921      	ldr	r1, [r4, #16]
 800652e:	464a      	mov	r2, r9
 8006530:	f000 fae8 	bl	8006b04 <memcpy>
 8006534:	89a3      	ldrh	r3, [r4, #12]
 8006536:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800653a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800653e:	81a3      	strh	r3, [r4, #12]
 8006540:	6126      	str	r6, [r4, #16]
 8006542:	6165      	str	r5, [r4, #20]
 8006544:	444e      	add	r6, r9
 8006546:	eba5 0509 	sub.w	r5, r5, r9
 800654a:	6026      	str	r6, [r4, #0]
 800654c:	60a5      	str	r5, [r4, #8]
 800654e:	463e      	mov	r6, r7
 8006550:	42be      	cmp	r6, r7
 8006552:	d900      	bls.n	8006556 <__ssputs_r+0x72>
 8006554:	463e      	mov	r6, r7
 8006556:	6820      	ldr	r0, [r4, #0]
 8006558:	4632      	mov	r2, r6
 800655a:	4641      	mov	r1, r8
 800655c:	f000 faa8 	bl	8006ab0 <memmove>
 8006560:	68a3      	ldr	r3, [r4, #8]
 8006562:	1b9b      	subs	r3, r3, r6
 8006564:	60a3      	str	r3, [r4, #8]
 8006566:	6823      	ldr	r3, [r4, #0]
 8006568:	4433      	add	r3, r6
 800656a:	6023      	str	r3, [r4, #0]
 800656c:	2000      	movs	r0, #0
 800656e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006572:	462a      	mov	r2, r5
 8006574:	f000 fad4 	bl	8006b20 <_realloc_r>
 8006578:	4606      	mov	r6, r0
 800657a:	2800      	cmp	r0, #0
 800657c:	d1e0      	bne.n	8006540 <__ssputs_r+0x5c>
 800657e:	6921      	ldr	r1, [r4, #16]
 8006580:	4650      	mov	r0, sl
 8006582:	f7ff feb7 	bl	80062f4 <_free_r>
 8006586:	230c      	movs	r3, #12
 8006588:	f8ca 3000 	str.w	r3, [sl]
 800658c:	89a3      	ldrh	r3, [r4, #12]
 800658e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006592:	81a3      	strh	r3, [r4, #12]
 8006594:	f04f 30ff 	mov.w	r0, #4294967295
 8006598:	e7e9      	b.n	800656e <__ssputs_r+0x8a>
	...

0800659c <_svfiprintf_r>:
 800659c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a0:	4698      	mov	r8, r3
 80065a2:	898b      	ldrh	r3, [r1, #12]
 80065a4:	061b      	lsls	r3, r3, #24
 80065a6:	b09d      	sub	sp, #116	@ 0x74
 80065a8:	4607      	mov	r7, r0
 80065aa:	460d      	mov	r5, r1
 80065ac:	4614      	mov	r4, r2
 80065ae:	d510      	bpl.n	80065d2 <_svfiprintf_r+0x36>
 80065b0:	690b      	ldr	r3, [r1, #16]
 80065b2:	b973      	cbnz	r3, 80065d2 <_svfiprintf_r+0x36>
 80065b4:	2140      	movs	r1, #64	@ 0x40
 80065b6:	f7ff ff09 	bl	80063cc <_malloc_r>
 80065ba:	6028      	str	r0, [r5, #0]
 80065bc:	6128      	str	r0, [r5, #16]
 80065be:	b930      	cbnz	r0, 80065ce <_svfiprintf_r+0x32>
 80065c0:	230c      	movs	r3, #12
 80065c2:	603b      	str	r3, [r7, #0]
 80065c4:	f04f 30ff 	mov.w	r0, #4294967295
 80065c8:	b01d      	add	sp, #116	@ 0x74
 80065ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065ce:	2340      	movs	r3, #64	@ 0x40
 80065d0:	616b      	str	r3, [r5, #20]
 80065d2:	2300      	movs	r3, #0
 80065d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065d6:	2320      	movs	r3, #32
 80065d8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80065dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80065e0:	2330      	movs	r3, #48	@ 0x30
 80065e2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006780 <_svfiprintf_r+0x1e4>
 80065e6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80065ea:	f04f 0901 	mov.w	r9, #1
 80065ee:	4623      	mov	r3, r4
 80065f0:	469a      	mov	sl, r3
 80065f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80065f6:	b10a      	cbz	r2, 80065fc <_svfiprintf_r+0x60>
 80065f8:	2a25      	cmp	r2, #37	@ 0x25
 80065fa:	d1f9      	bne.n	80065f0 <_svfiprintf_r+0x54>
 80065fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006600:	d00b      	beq.n	800661a <_svfiprintf_r+0x7e>
 8006602:	465b      	mov	r3, fp
 8006604:	4622      	mov	r2, r4
 8006606:	4629      	mov	r1, r5
 8006608:	4638      	mov	r0, r7
 800660a:	f7ff ff6b 	bl	80064e4 <__ssputs_r>
 800660e:	3001      	adds	r0, #1
 8006610:	f000 80a7 	beq.w	8006762 <_svfiprintf_r+0x1c6>
 8006614:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006616:	445a      	add	r2, fp
 8006618:	9209      	str	r2, [sp, #36]	@ 0x24
 800661a:	f89a 3000 	ldrb.w	r3, [sl]
 800661e:	2b00      	cmp	r3, #0
 8006620:	f000 809f 	beq.w	8006762 <_svfiprintf_r+0x1c6>
 8006624:	2300      	movs	r3, #0
 8006626:	f04f 32ff 	mov.w	r2, #4294967295
 800662a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800662e:	f10a 0a01 	add.w	sl, sl, #1
 8006632:	9304      	str	r3, [sp, #16]
 8006634:	9307      	str	r3, [sp, #28]
 8006636:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800663a:	931a      	str	r3, [sp, #104]	@ 0x68
 800663c:	4654      	mov	r4, sl
 800663e:	2205      	movs	r2, #5
 8006640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006644:	484e      	ldr	r0, [pc, #312]	@ (8006780 <_svfiprintf_r+0x1e4>)
 8006646:	f7f9 fdd3 	bl	80001f0 <memchr>
 800664a:	9a04      	ldr	r2, [sp, #16]
 800664c:	b9d8      	cbnz	r0, 8006686 <_svfiprintf_r+0xea>
 800664e:	06d0      	lsls	r0, r2, #27
 8006650:	bf44      	itt	mi
 8006652:	2320      	movmi	r3, #32
 8006654:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006658:	0711      	lsls	r1, r2, #28
 800665a:	bf44      	itt	mi
 800665c:	232b      	movmi	r3, #43	@ 0x2b
 800665e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006662:	f89a 3000 	ldrb.w	r3, [sl]
 8006666:	2b2a      	cmp	r3, #42	@ 0x2a
 8006668:	d015      	beq.n	8006696 <_svfiprintf_r+0xfa>
 800666a:	9a07      	ldr	r2, [sp, #28]
 800666c:	4654      	mov	r4, sl
 800666e:	2000      	movs	r0, #0
 8006670:	f04f 0c0a 	mov.w	ip, #10
 8006674:	4621      	mov	r1, r4
 8006676:	f811 3b01 	ldrb.w	r3, [r1], #1
 800667a:	3b30      	subs	r3, #48	@ 0x30
 800667c:	2b09      	cmp	r3, #9
 800667e:	d94b      	bls.n	8006718 <_svfiprintf_r+0x17c>
 8006680:	b1b0      	cbz	r0, 80066b0 <_svfiprintf_r+0x114>
 8006682:	9207      	str	r2, [sp, #28]
 8006684:	e014      	b.n	80066b0 <_svfiprintf_r+0x114>
 8006686:	eba0 0308 	sub.w	r3, r0, r8
 800668a:	fa09 f303 	lsl.w	r3, r9, r3
 800668e:	4313      	orrs	r3, r2
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	46a2      	mov	sl, r4
 8006694:	e7d2      	b.n	800663c <_svfiprintf_r+0xa0>
 8006696:	9b03      	ldr	r3, [sp, #12]
 8006698:	1d19      	adds	r1, r3, #4
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	9103      	str	r1, [sp, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	bfbb      	ittet	lt
 80066a2:	425b      	neglt	r3, r3
 80066a4:	f042 0202 	orrlt.w	r2, r2, #2
 80066a8:	9307      	strge	r3, [sp, #28]
 80066aa:	9307      	strlt	r3, [sp, #28]
 80066ac:	bfb8      	it	lt
 80066ae:	9204      	strlt	r2, [sp, #16]
 80066b0:	7823      	ldrb	r3, [r4, #0]
 80066b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80066b4:	d10a      	bne.n	80066cc <_svfiprintf_r+0x130>
 80066b6:	7863      	ldrb	r3, [r4, #1]
 80066b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80066ba:	d132      	bne.n	8006722 <_svfiprintf_r+0x186>
 80066bc:	9b03      	ldr	r3, [sp, #12]
 80066be:	1d1a      	adds	r2, r3, #4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	9203      	str	r2, [sp, #12]
 80066c4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80066c8:	3402      	adds	r4, #2
 80066ca:	9305      	str	r3, [sp, #20]
 80066cc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006790 <_svfiprintf_r+0x1f4>
 80066d0:	7821      	ldrb	r1, [r4, #0]
 80066d2:	2203      	movs	r2, #3
 80066d4:	4650      	mov	r0, sl
 80066d6:	f7f9 fd8b 	bl	80001f0 <memchr>
 80066da:	b138      	cbz	r0, 80066ec <_svfiprintf_r+0x150>
 80066dc:	9b04      	ldr	r3, [sp, #16]
 80066de:	eba0 000a 	sub.w	r0, r0, sl
 80066e2:	2240      	movs	r2, #64	@ 0x40
 80066e4:	4082      	lsls	r2, r0
 80066e6:	4313      	orrs	r3, r2
 80066e8:	3401      	adds	r4, #1
 80066ea:	9304      	str	r3, [sp, #16]
 80066ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066f0:	4824      	ldr	r0, [pc, #144]	@ (8006784 <_svfiprintf_r+0x1e8>)
 80066f2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80066f6:	2206      	movs	r2, #6
 80066f8:	f7f9 fd7a 	bl	80001f0 <memchr>
 80066fc:	2800      	cmp	r0, #0
 80066fe:	d036      	beq.n	800676e <_svfiprintf_r+0x1d2>
 8006700:	4b21      	ldr	r3, [pc, #132]	@ (8006788 <_svfiprintf_r+0x1ec>)
 8006702:	bb1b      	cbnz	r3, 800674c <_svfiprintf_r+0x1b0>
 8006704:	9b03      	ldr	r3, [sp, #12]
 8006706:	3307      	adds	r3, #7
 8006708:	f023 0307 	bic.w	r3, r3, #7
 800670c:	3308      	adds	r3, #8
 800670e:	9303      	str	r3, [sp, #12]
 8006710:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006712:	4433      	add	r3, r6
 8006714:	9309      	str	r3, [sp, #36]	@ 0x24
 8006716:	e76a      	b.n	80065ee <_svfiprintf_r+0x52>
 8006718:	fb0c 3202 	mla	r2, ip, r2, r3
 800671c:	460c      	mov	r4, r1
 800671e:	2001      	movs	r0, #1
 8006720:	e7a8      	b.n	8006674 <_svfiprintf_r+0xd8>
 8006722:	2300      	movs	r3, #0
 8006724:	3401      	adds	r4, #1
 8006726:	9305      	str	r3, [sp, #20]
 8006728:	4619      	mov	r1, r3
 800672a:	f04f 0c0a 	mov.w	ip, #10
 800672e:	4620      	mov	r0, r4
 8006730:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006734:	3a30      	subs	r2, #48	@ 0x30
 8006736:	2a09      	cmp	r2, #9
 8006738:	d903      	bls.n	8006742 <_svfiprintf_r+0x1a6>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d0c6      	beq.n	80066cc <_svfiprintf_r+0x130>
 800673e:	9105      	str	r1, [sp, #20]
 8006740:	e7c4      	b.n	80066cc <_svfiprintf_r+0x130>
 8006742:	fb0c 2101 	mla	r1, ip, r1, r2
 8006746:	4604      	mov	r4, r0
 8006748:	2301      	movs	r3, #1
 800674a:	e7f0      	b.n	800672e <_svfiprintf_r+0x192>
 800674c:	ab03      	add	r3, sp, #12
 800674e:	9300      	str	r3, [sp, #0]
 8006750:	462a      	mov	r2, r5
 8006752:	4b0e      	ldr	r3, [pc, #56]	@ (800678c <_svfiprintf_r+0x1f0>)
 8006754:	a904      	add	r1, sp, #16
 8006756:	4638      	mov	r0, r7
 8006758:	f3af 8000 	nop.w
 800675c:	1c42      	adds	r2, r0, #1
 800675e:	4606      	mov	r6, r0
 8006760:	d1d6      	bne.n	8006710 <_svfiprintf_r+0x174>
 8006762:	89ab      	ldrh	r3, [r5, #12]
 8006764:	065b      	lsls	r3, r3, #25
 8006766:	f53f af2d 	bmi.w	80065c4 <_svfiprintf_r+0x28>
 800676a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800676c:	e72c      	b.n	80065c8 <_svfiprintf_r+0x2c>
 800676e:	ab03      	add	r3, sp, #12
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	462a      	mov	r2, r5
 8006774:	4b05      	ldr	r3, [pc, #20]	@ (800678c <_svfiprintf_r+0x1f0>)
 8006776:	a904      	add	r1, sp, #16
 8006778:	4638      	mov	r0, r7
 800677a:	f000 f879 	bl	8006870 <_printf_i>
 800677e:	e7ed      	b.n	800675c <_svfiprintf_r+0x1c0>
 8006780:	08006c70 	.word	0x08006c70
 8006784:	08006c7a 	.word	0x08006c7a
 8006788:	00000000 	.word	0x00000000
 800678c:	080064e5 	.word	0x080064e5
 8006790:	08006c76 	.word	0x08006c76

08006794 <_printf_common>:
 8006794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006798:	4616      	mov	r6, r2
 800679a:	4698      	mov	r8, r3
 800679c:	688a      	ldr	r2, [r1, #8]
 800679e:	690b      	ldr	r3, [r1, #16]
 80067a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80067a4:	4293      	cmp	r3, r2
 80067a6:	bfb8      	it	lt
 80067a8:	4613      	movlt	r3, r2
 80067aa:	6033      	str	r3, [r6, #0]
 80067ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80067b0:	4607      	mov	r7, r0
 80067b2:	460c      	mov	r4, r1
 80067b4:	b10a      	cbz	r2, 80067ba <_printf_common+0x26>
 80067b6:	3301      	adds	r3, #1
 80067b8:	6033      	str	r3, [r6, #0]
 80067ba:	6823      	ldr	r3, [r4, #0]
 80067bc:	0699      	lsls	r1, r3, #26
 80067be:	bf42      	ittt	mi
 80067c0:	6833      	ldrmi	r3, [r6, #0]
 80067c2:	3302      	addmi	r3, #2
 80067c4:	6033      	strmi	r3, [r6, #0]
 80067c6:	6825      	ldr	r5, [r4, #0]
 80067c8:	f015 0506 	ands.w	r5, r5, #6
 80067cc:	d106      	bne.n	80067dc <_printf_common+0x48>
 80067ce:	f104 0a19 	add.w	sl, r4, #25
 80067d2:	68e3      	ldr	r3, [r4, #12]
 80067d4:	6832      	ldr	r2, [r6, #0]
 80067d6:	1a9b      	subs	r3, r3, r2
 80067d8:	42ab      	cmp	r3, r5
 80067da:	dc26      	bgt.n	800682a <_printf_common+0x96>
 80067dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80067e0:	6822      	ldr	r2, [r4, #0]
 80067e2:	3b00      	subs	r3, #0
 80067e4:	bf18      	it	ne
 80067e6:	2301      	movne	r3, #1
 80067e8:	0692      	lsls	r2, r2, #26
 80067ea:	d42b      	bmi.n	8006844 <_printf_common+0xb0>
 80067ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80067f0:	4641      	mov	r1, r8
 80067f2:	4638      	mov	r0, r7
 80067f4:	47c8      	blx	r9
 80067f6:	3001      	adds	r0, #1
 80067f8:	d01e      	beq.n	8006838 <_printf_common+0xa4>
 80067fa:	6823      	ldr	r3, [r4, #0]
 80067fc:	6922      	ldr	r2, [r4, #16]
 80067fe:	f003 0306 	and.w	r3, r3, #6
 8006802:	2b04      	cmp	r3, #4
 8006804:	bf02      	ittt	eq
 8006806:	68e5      	ldreq	r5, [r4, #12]
 8006808:	6833      	ldreq	r3, [r6, #0]
 800680a:	1aed      	subeq	r5, r5, r3
 800680c:	68a3      	ldr	r3, [r4, #8]
 800680e:	bf0c      	ite	eq
 8006810:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006814:	2500      	movne	r5, #0
 8006816:	4293      	cmp	r3, r2
 8006818:	bfc4      	itt	gt
 800681a:	1a9b      	subgt	r3, r3, r2
 800681c:	18ed      	addgt	r5, r5, r3
 800681e:	2600      	movs	r6, #0
 8006820:	341a      	adds	r4, #26
 8006822:	42b5      	cmp	r5, r6
 8006824:	d11a      	bne.n	800685c <_printf_common+0xc8>
 8006826:	2000      	movs	r0, #0
 8006828:	e008      	b.n	800683c <_printf_common+0xa8>
 800682a:	2301      	movs	r3, #1
 800682c:	4652      	mov	r2, sl
 800682e:	4641      	mov	r1, r8
 8006830:	4638      	mov	r0, r7
 8006832:	47c8      	blx	r9
 8006834:	3001      	adds	r0, #1
 8006836:	d103      	bne.n	8006840 <_printf_common+0xac>
 8006838:	f04f 30ff 	mov.w	r0, #4294967295
 800683c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006840:	3501      	adds	r5, #1
 8006842:	e7c6      	b.n	80067d2 <_printf_common+0x3e>
 8006844:	18e1      	adds	r1, r4, r3
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	2030      	movs	r0, #48	@ 0x30
 800684a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800684e:	4422      	add	r2, r4
 8006850:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006854:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006858:	3302      	adds	r3, #2
 800685a:	e7c7      	b.n	80067ec <_printf_common+0x58>
 800685c:	2301      	movs	r3, #1
 800685e:	4622      	mov	r2, r4
 8006860:	4641      	mov	r1, r8
 8006862:	4638      	mov	r0, r7
 8006864:	47c8      	blx	r9
 8006866:	3001      	adds	r0, #1
 8006868:	d0e6      	beq.n	8006838 <_printf_common+0xa4>
 800686a:	3601      	adds	r6, #1
 800686c:	e7d9      	b.n	8006822 <_printf_common+0x8e>
	...

08006870 <_printf_i>:
 8006870:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006874:	7e0f      	ldrb	r7, [r1, #24]
 8006876:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006878:	2f78      	cmp	r7, #120	@ 0x78
 800687a:	4691      	mov	r9, r2
 800687c:	4680      	mov	r8, r0
 800687e:	460c      	mov	r4, r1
 8006880:	469a      	mov	sl, r3
 8006882:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006886:	d807      	bhi.n	8006898 <_printf_i+0x28>
 8006888:	2f62      	cmp	r7, #98	@ 0x62
 800688a:	d80a      	bhi.n	80068a2 <_printf_i+0x32>
 800688c:	2f00      	cmp	r7, #0
 800688e:	f000 80d2 	beq.w	8006a36 <_printf_i+0x1c6>
 8006892:	2f58      	cmp	r7, #88	@ 0x58
 8006894:	f000 80b9 	beq.w	8006a0a <_printf_i+0x19a>
 8006898:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800689c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80068a0:	e03a      	b.n	8006918 <_printf_i+0xa8>
 80068a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80068a6:	2b15      	cmp	r3, #21
 80068a8:	d8f6      	bhi.n	8006898 <_printf_i+0x28>
 80068aa:	a101      	add	r1, pc, #4	@ (adr r1, 80068b0 <_printf_i+0x40>)
 80068ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80068b0:	08006909 	.word	0x08006909
 80068b4:	0800691d 	.word	0x0800691d
 80068b8:	08006899 	.word	0x08006899
 80068bc:	08006899 	.word	0x08006899
 80068c0:	08006899 	.word	0x08006899
 80068c4:	08006899 	.word	0x08006899
 80068c8:	0800691d 	.word	0x0800691d
 80068cc:	08006899 	.word	0x08006899
 80068d0:	08006899 	.word	0x08006899
 80068d4:	08006899 	.word	0x08006899
 80068d8:	08006899 	.word	0x08006899
 80068dc:	08006a1d 	.word	0x08006a1d
 80068e0:	08006947 	.word	0x08006947
 80068e4:	080069d7 	.word	0x080069d7
 80068e8:	08006899 	.word	0x08006899
 80068ec:	08006899 	.word	0x08006899
 80068f0:	08006a3f 	.word	0x08006a3f
 80068f4:	08006899 	.word	0x08006899
 80068f8:	08006947 	.word	0x08006947
 80068fc:	08006899 	.word	0x08006899
 8006900:	08006899 	.word	0x08006899
 8006904:	080069df 	.word	0x080069df
 8006908:	6833      	ldr	r3, [r6, #0]
 800690a:	1d1a      	adds	r2, r3, #4
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6032      	str	r2, [r6, #0]
 8006910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006914:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006918:	2301      	movs	r3, #1
 800691a:	e09d      	b.n	8006a58 <_printf_i+0x1e8>
 800691c:	6833      	ldr	r3, [r6, #0]
 800691e:	6820      	ldr	r0, [r4, #0]
 8006920:	1d19      	adds	r1, r3, #4
 8006922:	6031      	str	r1, [r6, #0]
 8006924:	0606      	lsls	r6, r0, #24
 8006926:	d501      	bpl.n	800692c <_printf_i+0xbc>
 8006928:	681d      	ldr	r5, [r3, #0]
 800692a:	e003      	b.n	8006934 <_printf_i+0xc4>
 800692c:	0645      	lsls	r5, r0, #25
 800692e:	d5fb      	bpl.n	8006928 <_printf_i+0xb8>
 8006930:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006934:	2d00      	cmp	r5, #0
 8006936:	da03      	bge.n	8006940 <_printf_i+0xd0>
 8006938:	232d      	movs	r3, #45	@ 0x2d
 800693a:	426d      	negs	r5, r5
 800693c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006940:	4859      	ldr	r0, [pc, #356]	@ (8006aa8 <_printf_i+0x238>)
 8006942:	230a      	movs	r3, #10
 8006944:	e011      	b.n	800696a <_printf_i+0xfa>
 8006946:	6821      	ldr	r1, [r4, #0]
 8006948:	6833      	ldr	r3, [r6, #0]
 800694a:	0608      	lsls	r0, r1, #24
 800694c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006950:	d402      	bmi.n	8006958 <_printf_i+0xe8>
 8006952:	0649      	lsls	r1, r1, #25
 8006954:	bf48      	it	mi
 8006956:	b2ad      	uxthmi	r5, r5
 8006958:	2f6f      	cmp	r7, #111	@ 0x6f
 800695a:	4853      	ldr	r0, [pc, #332]	@ (8006aa8 <_printf_i+0x238>)
 800695c:	6033      	str	r3, [r6, #0]
 800695e:	bf14      	ite	ne
 8006960:	230a      	movne	r3, #10
 8006962:	2308      	moveq	r3, #8
 8006964:	2100      	movs	r1, #0
 8006966:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800696a:	6866      	ldr	r6, [r4, #4]
 800696c:	60a6      	str	r6, [r4, #8]
 800696e:	2e00      	cmp	r6, #0
 8006970:	bfa2      	ittt	ge
 8006972:	6821      	ldrge	r1, [r4, #0]
 8006974:	f021 0104 	bicge.w	r1, r1, #4
 8006978:	6021      	strge	r1, [r4, #0]
 800697a:	b90d      	cbnz	r5, 8006980 <_printf_i+0x110>
 800697c:	2e00      	cmp	r6, #0
 800697e:	d04b      	beq.n	8006a18 <_printf_i+0x1a8>
 8006980:	4616      	mov	r6, r2
 8006982:	fbb5 f1f3 	udiv	r1, r5, r3
 8006986:	fb03 5711 	mls	r7, r3, r1, r5
 800698a:	5dc7      	ldrb	r7, [r0, r7]
 800698c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006990:	462f      	mov	r7, r5
 8006992:	42bb      	cmp	r3, r7
 8006994:	460d      	mov	r5, r1
 8006996:	d9f4      	bls.n	8006982 <_printf_i+0x112>
 8006998:	2b08      	cmp	r3, #8
 800699a:	d10b      	bne.n	80069b4 <_printf_i+0x144>
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	07df      	lsls	r7, r3, #31
 80069a0:	d508      	bpl.n	80069b4 <_printf_i+0x144>
 80069a2:	6923      	ldr	r3, [r4, #16]
 80069a4:	6861      	ldr	r1, [r4, #4]
 80069a6:	4299      	cmp	r1, r3
 80069a8:	bfde      	ittt	le
 80069aa:	2330      	movle	r3, #48	@ 0x30
 80069ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80069b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80069b4:	1b92      	subs	r2, r2, r6
 80069b6:	6122      	str	r2, [r4, #16]
 80069b8:	f8cd a000 	str.w	sl, [sp]
 80069bc:	464b      	mov	r3, r9
 80069be:	aa03      	add	r2, sp, #12
 80069c0:	4621      	mov	r1, r4
 80069c2:	4640      	mov	r0, r8
 80069c4:	f7ff fee6 	bl	8006794 <_printf_common>
 80069c8:	3001      	adds	r0, #1
 80069ca:	d14a      	bne.n	8006a62 <_printf_i+0x1f2>
 80069cc:	f04f 30ff 	mov.w	r0, #4294967295
 80069d0:	b004      	add	sp, #16
 80069d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069d6:	6823      	ldr	r3, [r4, #0]
 80069d8:	f043 0320 	orr.w	r3, r3, #32
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	4833      	ldr	r0, [pc, #204]	@ (8006aac <_printf_i+0x23c>)
 80069e0:	2778      	movs	r7, #120	@ 0x78
 80069e2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80069e6:	6823      	ldr	r3, [r4, #0]
 80069e8:	6831      	ldr	r1, [r6, #0]
 80069ea:	061f      	lsls	r7, r3, #24
 80069ec:	f851 5b04 	ldr.w	r5, [r1], #4
 80069f0:	d402      	bmi.n	80069f8 <_printf_i+0x188>
 80069f2:	065f      	lsls	r7, r3, #25
 80069f4:	bf48      	it	mi
 80069f6:	b2ad      	uxthmi	r5, r5
 80069f8:	6031      	str	r1, [r6, #0]
 80069fa:	07d9      	lsls	r1, r3, #31
 80069fc:	bf44      	itt	mi
 80069fe:	f043 0320 	orrmi.w	r3, r3, #32
 8006a02:	6023      	strmi	r3, [r4, #0]
 8006a04:	b11d      	cbz	r5, 8006a0e <_printf_i+0x19e>
 8006a06:	2310      	movs	r3, #16
 8006a08:	e7ac      	b.n	8006964 <_printf_i+0xf4>
 8006a0a:	4827      	ldr	r0, [pc, #156]	@ (8006aa8 <_printf_i+0x238>)
 8006a0c:	e7e9      	b.n	80069e2 <_printf_i+0x172>
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	f023 0320 	bic.w	r3, r3, #32
 8006a14:	6023      	str	r3, [r4, #0]
 8006a16:	e7f6      	b.n	8006a06 <_printf_i+0x196>
 8006a18:	4616      	mov	r6, r2
 8006a1a:	e7bd      	b.n	8006998 <_printf_i+0x128>
 8006a1c:	6833      	ldr	r3, [r6, #0]
 8006a1e:	6825      	ldr	r5, [r4, #0]
 8006a20:	6961      	ldr	r1, [r4, #20]
 8006a22:	1d18      	adds	r0, r3, #4
 8006a24:	6030      	str	r0, [r6, #0]
 8006a26:	062e      	lsls	r6, r5, #24
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	d501      	bpl.n	8006a30 <_printf_i+0x1c0>
 8006a2c:	6019      	str	r1, [r3, #0]
 8006a2e:	e002      	b.n	8006a36 <_printf_i+0x1c6>
 8006a30:	0668      	lsls	r0, r5, #25
 8006a32:	d5fb      	bpl.n	8006a2c <_printf_i+0x1bc>
 8006a34:	8019      	strh	r1, [r3, #0]
 8006a36:	2300      	movs	r3, #0
 8006a38:	6123      	str	r3, [r4, #16]
 8006a3a:	4616      	mov	r6, r2
 8006a3c:	e7bc      	b.n	80069b8 <_printf_i+0x148>
 8006a3e:	6833      	ldr	r3, [r6, #0]
 8006a40:	1d1a      	adds	r2, r3, #4
 8006a42:	6032      	str	r2, [r6, #0]
 8006a44:	681e      	ldr	r6, [r3, #0]
 8006a46:	6862      	ldr	r2, [r4, #4]
 8006a48:	2100      	movs	r1, #0
 8006a4a:	4630      	mov	r0, r6
 8006a4c:	f7f9 fbd0 	bl	80001f0 <memchr>
 8006a50:	b108      	cbz	r0, 8006a56 <_printf_i+0x1e6>
 8006a52:	1b80      	subs	r0, r0, r6
 8006a54:	6060      	str	r0, [r4, #4]
 8006a56:	6863      	ldr	r3, [r4, #4]
 8006a58:	6123      	str	r3, [r4, #16]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a60:	e7aa      	b.n	80069b8 <_printf_i+0x148>
 8006a62:	6923      	ldr	r3, [r4, #16]
 8006a64:	4632      	mov	r2, r6
 8006a66:	4649      	mov	r1, r9
 8006a68:	4640      	mov	r0, r8
 8006a6a:	47d0      	blx	sl
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d0ad      	beq.n	80069cc <_printf_i+0x15c>
 8006a70:	6823      	ldr	r3, [r4, #0]
 8006a72:	079b      	lsls	r3, r3, #30
 8006a74:	d413      	bmi.n	8006a9e <_printf_i+0x22e>
 8006a76:	68e0      	ldr	r0, [r4, #12]
 8006a78:	9b03      	ldr	r3, [sp, #12]
 8006a7a:	4298      	cmp	r0, r3
 8006a7c:	bfb8      	it	lt
 8006a7e:	4618      	movlt	r0, r3
 8006a80:	e7a6      	b.n	80069d0 <_printf_i+0x160>
 8006a82:	2301      	movs	r3, #1
 8006a84:	4632      	mov	r2, r6
 8006a86:	4649      	mov	r1, r9
 8006a88:	4640      	mov	r0, r8
 8006a8a:	47d0      	blx	sl
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d09d      	beq.n	80069cc <_printf_i+0x15c>
 8006a90:	3501      	adds	r5, #1
 8006a92:	68e3      	ldr	r3, [r4, #12]
 8006a94:	9903      	ldr	r1, [sp, #12]
 8006a96:	1a5b      	subs	r3, r3, r1
 8006a98:	42ab      	cmp	r3, r5
 8006a9a:	dcf2      	bgt.n	8006a82 <_printf_i+0x212>
 8006a9c:	e7eb      	b.n	8006a76 <_printf_i+0x206>
 8006a9e:	2500      	movs	r5, #0
 8006aa0:	f104 0619 	add.w	r6, r4, #25
 8006aa4:	e7f5      	b.n	8006a92 <_printf_i+0x222>
 8006aa6:	bf00      	nop
 8006aa8:	08006c81 	.word	0x08006c81
 8006aac:	08006c92 	.word	0x08006c92

08006ab0 <memmove>:
 8006ab0:	4288      	cmp	r0, r1
 8006ab2:	b510      	push	{r4, lr}
 8006ab4:	eb01 0402 	add.w	r4, r1, r2
 8006ab8:	d902      	bls.n	8006ac0 <memmove+0x10>
 8006aba:	4284      	cmp	r4, r0
 8006abc:	4623      	mov	r3, r4
 8006abe:	d807      	bhi.n	8006ad0 <memmove+0x20>
 8006ac0:	1e43      	subs	r3, r0, #1
 8006ac2:	42a1      	cmp	r1, r4
 8006ac4:	d008      	beq.n	8006ad8 <memmove+0x28>
 8006ac6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006aca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ace:	e7f8      	b.n	8006ac2 <memmove+0x12>
 8006ad0:	4402      	add	r2, r0
 8006ad2:	4601      	mov	r1, r0
 8006ad4:	428a      	cmp	r2, r1
 8006ad6:	d100      	bne.n	8006ada <memmove+0x2a>
 8006ad8:	bd10      	pop	{r4, pc}
 8006ada:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ade:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ae2:	e7f7      	b.n	8006ad4 <memmove+0x24>

08006ae4 <_sbrk_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	4d06      	ldr	r5, [pc, #24]	@ (8006b00 <_sbrk_r+0x1c>)
 8006ae8:	2300      	movs	r3, #0
 8006aea:	4604      	mov	r4, r0
 8006aec:	4608      	mov	r0, r1
 8006aee:	602b      	str	r3, [r5, #0]
 8006af0:	f7fb fc54 	bl	800239c <_sbrk>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_sbrk_r+0x1a>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_sbrk_r+0x1a>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	200003b8 	.word	0x200003b8

08006b04 <memcpy>:
 8006b04:	440a      	add	r2, r1
 8006b06:	4291      	cmp	r1, r2
 8006b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b0c:	d100      	bne.n	8006b10 <memcpy+0xc>
 8006b0e:	4770      	bx	lr
 8006b10:	b510      	push	{r4, lr}
 8006b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b16:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b1a:	4291      	cmp	r1, r2
 8006b1c:	d1f9      	bne.n	8006b12 <memcpy+0xe>
 8006b1e:	bd10      	pop	{r4, pc}

08006b20 <_realloc_r>:
 8006b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b24:	4680      	mov	r8, r0
 8006b26:	4615      	mov	r5, r2
 8006b28:	460c      	mov	r4, r1
 8006b2a:	b921      	cbnz	r1, 8006b36 <_realloc_r+0x16>
 8006b2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b30:	4611      	mov	r1, r2
 8006b32:	f7ff bc4b 	b.w	80063cc <_malloc_r>
 8006b36:	b92a      	cbnz	r2, 8006b44 <_realloc_r+0x24>
 8006b38:	f7ff fbdc 	bl	80062f4 <_free_r>
 8006b3c:	2400      	movs	r4, #0
 8006b3e:	4620      	mov	r0, r4
 8006b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b44:	f000 f81a 	bl	8006b7c <_malloc_usable_size_r>
 8006b48:	4285      	cmp	r5, r0
 8006b4a:	4606      	mov	r6, r0
 8006b4c:	d802      	bhi.n	8006b54 <_realloc_r+0x34>
 8006b4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8006b52:	d8f4      	bhi.n	8006b3e <_realloc_r+0x1e>
 8006b54:	4629      	mov	r1, r5
 8006b56:	4640      	mov	r0, r8
 8006b58:	f7ff fc38 	bl	80063cc <_malloc_r>
 8006b5c:	4607      	mov	r7, r0
 8006b5e:	2800      	cmp	r0, #0
 8006b60:	d0ec      	beq.n	8006b3c <_realloc_r+0x1c>
 8006b62:	42b5      	cmp	r5, r6
 8006b64:	462a      	mov	r2, r5
 8006b66:	4621      	mov	r1, r4
 8006b68:	bf28      	it	cs
 8006b6a:	4632      	movcs	r2, r6
 8006b6c:	f7ff ffca 	bl	8006b04 <memcpy>
 8006b70:	4621      	mov	r1, r4
 8006b72:	4640      	mov	r0, r8
 8006b74:	f7ff fbbe 	bl	80062f4 <_free_r>
 8006b78:	463c      	mov	r4, r7
 8006b7a:	e7e0      	b.n	8006b3e <_realloc_r+0x1e>

08006b7c <_malloc_usable_size_r>:
 8006b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b80:	1f18      	subs	r0, r3, #4
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	bfbc      	itt	lt
 8006b86:	580b      	ldrlt	r3, [r1, r0]
 8006b88:	18c0      	addlt	r0, r0, r3
 8006b8a:	4770      	bx	lr

08006b8c <_init>:
 8006b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b8e:	bf00      	nop
 8006b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b92:	bc08      	pop	{r3}
 8006b94:	469e      	mov	lr, r3
 8006b96:	4770      	bx	lr

08006b98 <_fini>:
 8006b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b9a:	bf00      	nop
 8006b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b9e:	bc08      	pop	{r3}
 8006ba0:	469e      	mov	lr, r3
 8006ba2:	4770      	bx	lr
